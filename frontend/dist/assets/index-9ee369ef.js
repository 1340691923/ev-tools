import{c as tT}from"./index-0aae8c1b.js";import{L as iR,a as oA,b as DA}from"./es-map-864ea611.js";import{_ as o,J as PA,K as lA,d as Ie,b as Y,f as kE,i as _E,e as YE,o as v,c as AE,k as TE,t as W,x as SE,h as b,q as MA,D as UA,G as uA,r as f,l as k,L as J,M as cA,z as nR,a as G,w as c,A as qT,E as Q,g as te,F as AT,s as oR,B as ZT,N as Ne,O as DR,P as dA,C as GA,u as pA}from"./index-ff273ca0.js";import{r as P,m as PR,a as se,D as CE,i as HA,b as le,I as lR,c as BA,d as QE,T as re,e as mA,$ as w,f as RT,C as Me,E as qE,g as YA,N as FA,n as hA,h as fA,j as WE,k as _T,l as _e,R as ZE,o as jE,p as nE,q as H,Q as VA,M as MR,s as UR,t as uR,u as Ce,v as vA,w as yA,x as WA,y as gA,O as XA,z as CT,G as cR,A as dR,B as NT,F as bA,H as KA,K as jT,L as xA,P as wA,S as GR,U as pR,V as JA,W as Ue,X as ue,Y as $A,Z as kA,_ as QA,a0 as ce,a1 as HR,a2 as qA,a3 as ZA,a4 as zT,a5 as jA,a6 as zA,a7 as ES,a8 as TS,a9 as ae,aa as BR,ab as mR,ac as YR,ad as FR,ae as hR,af as eS,ag as RS,ah as AS,ai as SS,aj as OS,ak as IS,al as tS,am as NS,an as sS,ao as rS,ap as fR,aq as _S,ar as CS,as as VR,at as aS,au as LS,av as de,aw as iS,ax as nS,ay as oS,az as DS,aA as PS,aB as Ge,aC as GE,aD as lS,J as bE}from"./index-02fd6334.js";import{_ as aT}from"./_plugin-vue_export-helper-c27b6911.js";import{I as MS}from"./select-298e5948.js";import{f as vR,a as US,S as uS}from"./es-155edf90.js";import{I as cS,U as dS,D as GS,K as pS}from"./style-409defd8.js";import"./es-index-d77ba448.js";P({id:"abap",extensions:[".abap"],aliases:["abap","ABAP"],loader:()=>o(()=>import("./abap-5136cd1e.js"),[])});P({id:"apex",extensions:[".cls"],aliases:["Apex","apex"],mimetypes:["text/x-apex-source","text/x-apex"],loader:()=>o(()=>import("./apex-fdc12298.js"),[])});P({id:"azcli",extensions:[".azcli"],aliases:["Azure CLI","azcli"],loader:()=>o(()=>import("./azcli-e7c82b58.js"),[])});P({id:"bat",extensions:[".bat",".cmd"],aliases:["Batch","bat"],loader:()=>o(()=>import("./bat-23aec95c.js"),[])});P({id:"bicep",extensions:[".bicep"],aliases:["Bicep"],loader:()=>o(()=>import("./bicep-e5d6869b.js"),[])});P({id:"cameligo",extensions:[".mligo"],aliases:["Cameligo"],loader:()=>o(()=>import("./cameligo-b2a06855.js"),[])});P({id:"clojure",extensions:[".clj",".cljs",".cljc",".edn"],aliases:["clojure","Clojure"],loader:()=>o(()=>import("./clojure-16ace516.js"),[])});P({id:"coffeescript",extensions:[".coffee"],aliases:["CoffeeScript","coffeescript","coffee"],mimetypes:["text/x-coffeescript","text/coffeescript"],loader:()=>o(()=>import("./coffee-a99495fc.js"),[])});P({id:"c",extensions:[".c",".h"],aliases:["C","c"],loader:()=>o(()=>import("./cpp-8733b637.js"),[])});P({id:"cpp",extensions:[".cpp",".cc",".cxx",".hpp",".hh",".hxx"],aliases:["C++","Cpp","cpp"],loader:()=>o(()=>import("./cpp-8733b637.js"),[])});P({id:"csharp",extensions:[".cs",".csx",".cake"],aliases:["C#","csharp"],loader:()=>o(()=>import("./csharp-1afb6245.js"),[])});P({id:"csp",extensions:[".csp"],aliases:["CSP","csp"],loader:()=>o(()=>import("./csp-6191d3ec.js"),[])});P({id:"css",extensions:[".css"],aliases:["CSS","css"],mimetypes:["text/css"],loader:()=>o(()=>import("./css-3ab76587.js"),[])});P({id:"cypher",extensions:[".cypher",".cyp"],aliases:["Cypher","OpenCypher"],loader:()=>o(()=>import("./cypher-0f532af0.js"),[])});P({id:"dart",extensions:[".dart"],aliases:["Dart","dart"],mimetypes:["text/x-dart-source","text/x-dart"],loader:()=>o(()=>import("./dart-f78859ad.js"),[])});P({id:"dockerfile",extensions:[".dockerfile"],filenames:["Dockerfile"],aliases:["Dockerfile"],loader:()=>o(()=>import("./dockerfile-1716b85c.js"),[])});P({id:"ecl",extensions:[".ecl"],aliases:["ECL","Ecl","ecl"],loader:()=>o(()=>import("./ecl-23ac35a8.js"),[])});P({id:"elixir",extensions:[".ex",".exs"],aliases:["Elixir","elixir","ex"],loader:()=>o(()=>import("./elixir-12911c0a.js"),[])});P({id:"flow9",extensions:[".flow"],aliases:["Flow9","Flow","flow9","flow"],loader:()=>o(()=>import("./flow9-9c295ae4.js"),[])});P({id:"fsharp",extensions:[".fs",".fsi",".ml",".mli",".fsx",".fsscript"],aliases:["F#","FSharp","fsharp"],loader:()=>o(()=>import("./fsharp-c1becadc.js"),[])});P({id:"freemarker2",extensions:[".ftl",".ftlh",".ftlx"],aliases:["FreeMarker2","Apache FreeMarker2"],loader:()=>o(()=>import("./freemarker2-686f4330.js"),["assets/freemarker2-686f4330.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"]).then(T=>T.TagAutoInterpolationDollar)});P({id:"freemarker2.tag-angle.interpolation-dollar",aliases:["FreeMarker2 (Angle/Dollar)","Apache FreeMarker2 (Angle/Dollar)"],loader:()=>o(()=>import("./freemarker2-686f4330.js"),["assets/freemarker2-686f4330.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"]).then(T=>T.TagAngleInterpolationDollar)});P({id:"freemarker2.tag-bracket.interpolation-dollar",aliases:["FreeMarker2 (Bracket/Dollar)","Apache FreeMarker2 (Bracket/Dollar)"],loader:()=>o(()=>import("./freemarker2-686f4330.js"),["assets/freemarker2-686f4330.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"]).then(T=>T.TagBracketInterpolationDollar)});P({id:"freemarker2.tag-angle.interpolation-bracket",aliases:["FreeMarker2 (Angle/Bracket)","Apache FreeMarker2 (Angle/Bracket)"],loader:()=>o(()=>import("./freemarker2-686f4330.js"),["assets/freemarker2-686f4330.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"]).then(T=>T.TagAngleInterpolationBracket)});P({id:"freemarker2.tag-bracket.interpolation-bracket",aliases:["FreeMarker2 (Bracket/Bracket)","Apache FreeMarker2 (Bracket/Bracket)"],loader:()=>o(()=>import("./freemarker2-686f4330.js"),["assets/freemarker2-686f4330.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"]).then(T=>T.TagBracketInterpolationBracket)});P({id:"freemarker2.tag-auto.interpolation-dollar",aliases:["FreeMarker2 (Auto/Dollar)","Apache FreeMarker2 (Auto/Dollar)"],loader:()=>o(()=>import("./freemarker2-686f4330.js"),["assets/freemarker2-686f4330.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"]).then(T=>T.TagAutoInterpolationDollar)});P({id:"freemarker2.tag-auto.interpolation-bracket",aliases:["FreeMarker2 (Auto/Bracket)","Apache FreeMarker2 (Auto/Bracket)"],loader:()=>o(()=>import("./freemarker2-686f4330.js"),["assets/freemarker2-686f4330.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"]).then(T=>T.TagAutoInterpolationBracket)});P({id:"go",extensions:[".go"],aliases:["Go"],loader:()=>o(()=>import("./go-00cb1fc9.js"),[])});P({id:"graphql",extensions:[".graphql",".gql"],aliases:["GraphQL","graphql","gql"],mimetypes:["application/graphql"],loader:()=>o(()=>import("./graphql-3c5f48bf.js"),[])});P({id:"handlebars",extensions:[".handlebars",".hbs"],aliases:["Handlebars","handlebars","hbs"],mimetypes:["text/x-handlebars-template"],loader:()=>o(()=>import("./handlebars-5041a517.js"),["assets/handlebars-5041a517.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"hcl",extensions:[".tf",".tfvars",".hcl"],aliases:["Terraform","tf","HCL","hcl"],loader:()=>o(()=>import("./hcl-6e4d1f8b.js"),[])});P({id:"html",extensions:[".html",".htm",".shtml",".xhtml",".mdoc",".jsp",".asp",".aspx",".jshtm"],aliases:["HTML","htm","html","xhtml"],mimetypes:["text/html","text/x-jshtm","text/template","text/ng-template"],loader:()=>o(()=>import("./html-7f44631b.js"),["assets/html-7f44631b.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"ini",extensions:[".ini",".properties",".gitconfig"],filenames:["config",".gitattributes",".gitconfig",".editorconfig"],aliases:["Ini","ini"],loader:()=>o(()=>import("./ini-737fefa5.js"),[])});P({id:"java",extensions:[".java",".jav"],aliases:["Java","java"],mimetypes:["text/x-java-source","text/x-java"],loader:()=>o(()=>import("./java-aa428f7a.js"),[])});P({id:"julia",extensions:[".jl"],aliases:["julia","Julia"],loader:()=>o(()=>import("./julia-aaa076b7.js"),[])});P({id:"kotlin",extensions:[".kt",".kts"],aliases:["Kotlin","kotlin"],mimetypes:["text/x-kotlin-source","text/x-kotlin"],loader:()=>o(()=>import("./kotlin-a227e79c.js"),[])});P({id:"less",extensions:[".less"],aliases:["Less","less"],mimetypes:["text/x-less","text/less"],loader:()=>o(()=>import("./less-860b1b22.js"),[])});P({id:"lexon",extensions:[".lex"],aliases:["Lexon"],loader:()=>o(()=>import("./lexon-4496e71c.js"),[])});P({id:"lua",extensions:[".lua"],aliases:["Lua","lua"],loader:()=>o(()=>import("./lua-a143ce8a.js"),[])});P({id:"liquid",extensions:[".liquid",".html.liquid"],aliases:["Liquid","liquid"],mimetypes:["application/liquid"],loader:()=>o(()=>import("./liquid-7fded55d.js"),["assets/liquid-7fded55d.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"m3",extensions:[".m3",".i3",".mg",".ig"],aliases:["Modula-3","Modula3","modula3","m3"],loader:()=>o(()=>import("./m3-e21369e6.js"),[])});P({id:"mdx",extensions:[".mdx"],aliases:["MDX","mdx"],loader:()=>o(()=>import("./mdx-6dbd355c.js"),["assets/mdx-6dbd355c.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"mips",extensions:[".s"],aliases:["MIPS","MIPS-V"],mimetypes:["text/x-mips","text/mips","text/plaintext"],loader:()=>o(()=>import("./mips-2b78dbdf.js"),[])});P({id:"msdax",extensions:[".dax",".msdax"],aliases:["DAX","MSDAX"],loader:()=>o(()=>import("./msdax-4ed77215.js"),[])});P({id:"mysql",extensions:[],aliases:["MySQL","mysql"],loader:()=>o(()=>import("./mysql-5831cd58.js"),[])});P({id:"objective-c",extensions:[".m"],aliases:["Objective-C"],loader:()=>o(()=>import("./objective-c-120e3467.js"),[])});P({id:"pascal",extensions:[".pas",".p",".pp"],aliases:["Pascal","pas"],mimetypes:["text/x-pascal-source","text/x-pascal"],loader:()=>o(()=>import("./pascal-1717b1bf.js"),[])});P({id:"pascaligo",extensions:[".ligo"],aliases:["Pascaligo","ligo"],loader:()=>o(()=>import("./pascaligo-14d70b0d.js"),[])});P({id:"perl",extensions:[".pl",".pm"],aliases:["Perl","pl"],loader:()=>o(()=>import("./perl-77914477.js"),[])});P({id:"pgsql",extensions:[],aliases:["PostgreSQL","postgres","pg","postgre"],loader:()=>o(()=>import("./pgsql-f61db739.js"),[])});P({id:"php",extensions:[".php",".php4",".php5",".phtml",".ctp"],aliases:["PHP","php"],mimetypes:["application/x-php"],loader:()=>o(()=>import("./php-8b5792e6.js"),[])});P({id:"pla",extensions:[".pla"],loader:()=>o(()=>import("./pla-ed9d9ff6.js"),[])});P({id:"postiats",extensions:[".dats",".sats",".hats"],aliases:["ATS","ATS/Postiats"],loader:()=>o(()=>import("./postiats-30a14510.js"),[])});P({id:"powerquery",extensions:[".pq",".pqm"],aliases:["PQ","M","Power Query","Power Query M"],loader:()=>o(()=>import("./powerquery-90fe9b48.js"),[])});P({id:"powershell",extensions:[".ps1",".psm1",".psd1"],aliases:["PowerShell","powershell","ps","ps1"],loader:()=>o(()=>import("./powershell-053e1172.js"),[])});P({id:"proto",extensions:[".proto"],aliases:["protobuf","Protocol Buffers"],loader:()=>o(()=>import("./protobuf-ac38b0d9.js"),[])});P({id:"pug",extensions:[".jade",".pug"],aliases:["Pug","Jade","jade"],loader:()=>o(()=>import("./pug-de82639c.js"),[])});P({id:"python",extensions:[".py",".rpy",".pyw",".cpy",".gyp",".gypi"],aliases:["Python","py"],firstLine:"^#!/.*\\bpython[0-9.-]*\\b",loader:()=>o(()=>import("./python-15ac9207.js"),["assets/python-15ac9207.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"qsharp",extensions:[".qs"],aliases:["Q#","qsharp"],loader:()=>o(()=>import("./qsharp-aa871c73.js"),[])});P({id:"r",extensions:[".r",".rhistory",".rmd",".rprofile",".rt"],aliases:["R","r"],loader:()=>o(()=>import("./r-525458cd.js"),[])});P({id:"razor",extensions:[".cshtml"],aliases:["Razor","razor"],mimetypes:["text/x-cshtml"],loader:()=>o(()=>import("./razor-8e9fe565.js"),["assets/razor-8e9fe565.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"redis",extensions:[".redis"],aliases:["redis"],loader:()=>o(()=>import("./redis-41d76724.js"),[])});P({id:"redshift",extensions:[],aliases:["Redshift","redshift"],loader:()=>o(()=>import("./redshift-b8701f4d.js"),[])});P({id:"restructuredtext",extensions:[".rst"],aliases:["reStructuredText","restructuredtext"],loader:()=>o(()=>import("./restructuredtext-d50aa482.js"),[])});P({id:"ruby",extensions:[".rb",".rbx",".rjs",".gemspec",".pp"],filenames:["rakefile","Gemfile"],aliases:["Ruby","rb"],loader:()=>o(()=>import("./ruby-b875f0fe.js"),[])});P({id:"rust",extensions:[".rs",".rlib"],aliases:["Rust","rust"],loader:()=>o(()=>import("./rust-3405567e.js"),[])});P({id:"sb",extensions:[".sb"],aliases:["Small Basic","sb"],loader:()=>o(()=>import("./sb-deafe633.js"),[])});P({id:"scala",extensions:[".scala",".sc",".sbt"],aliases:["Scala","scala","SBT","Sbt","sbt","Dotty","dotty"],mimetypes:["text/x-scala-source","text/x-scala","text/x-sbt","text/x-dotty"],loader:()=>o(()=>import("./scala-871b4d7c.js"),[])});P({id:"scheme",extensions:[".scm",".ss",".sch",".rkt"],aliases:["scheme","Scheme"],loader:()=>o(()=>import("./scheme-416d452d.js"),[])});P({id:"scss",extensions:[".scss"],aliases:["Sass","sass","scss"],mimetypes:["text/x-scss","text/scss"],loader:()=>o(()=>import("./scss-77c6146f.js"),[])});P({id:"shell",extensions:[".sh",".bash"],aliases:["Shell","sh"],loader:()=>o(()=>import("./shell-f858a369.js"),[])});P({id:"sol",extensions:[".sol"],aliases:["sol","solidity","Solidity"],loader:()=>o(()=>import("./solidity-08e0d87b.js"),[])});P({id:"aes",extensions:[".aes"],aliases:["aes","sophia","Sophia"],loader:()=>o(()=>import("./sophia-19822547.js"),[])});P({id:"sparql",extensions:[".rq"],aliases:["sparql","SPARQL"],loader:()=>o(()=>import("./sparql-aa2fe9b9.js"),[])});P({id:"sql",extensions:[".sql"],aliases:["SQL"],loader:()=>o(()=>Promise.resolve().then(()=>Us),void 0)});P({id:"st",extensions:[".st",".iecst",".iecplc",".lc3lib",".TcPOU",".TcDUT",".TcGVL",".TcIO"],aliases:["StructuredText","scl","stl"],loader:()=>o(()=>import("./st-0d5c874b.js"),[])});P({id:"swift",aliases:["Swift","swift"],extensions:[".swift"],mimetypes:["text/swift"],loader:()=>o(()=>import("./swift-bfec51e6.js"),[])});P({id:"systemverilog",extensions:[".sv",".svh"],aliases:["SV","sv","SystemVerilog","systemverilog"],loader:()=>o(()=>import("./systemverilog-4f425e56.js"),[])});P({id:"verilog",extensions:[".v",".vh"],aliases:["V","v","Verilog","verilog"],loader:()=>o(()=>import("./systemverilog-4f425e56.js"),[])});P({id:"tcl",extensions:[".tcl"],aliases:["tcl","Tcl","tcltk","TclTk","tcl/tk","Tcl/Tk"],loader:()=>o(()=>import("./tcl-70c5b4ac.js"),[])});P({id:"twig",extensions:[".twig"],aliases:["Twig","twig"],mimetypes:["text/x-twig"],loader:()=>o(()=>import("./twig-9c388ecb.js"),[])});P({id:"typescript",extensions:[".ts",".tsx",".cts",".mts"],aliases:["TypeScript","ts","typescript"],mimetypes:["text/typescript"],loader:()=>o(()=>import("./typescript-2a16909e.js"),["assets/typescript-2a16909e.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"typespec",extensions:[".tsp"],aliases:["TypeSpec"],loader:()=>o(()=>import("./typespec-3237f8e5.js"),[])});P({id:"vb",extensions:[".vb"],aliases:["Visual Basic","vb"],loader:()=>o(()=>import("./vb-77586bec.js"),[])});P({id:"wgsl",extensions:[".wgsl"],aliases:["WebGPU Shading Language","WGSL","wgsl"],loader:()=>o(()=>import("./wgsl-20bb95ef.js"),[])});P({id:"xml",extensions:[".xml",".xsd",".dtd",".ascx",".csproj",".config",".props",".targets",".wxi",".wxl",".wxs",".xaml",".svg",".svgz",".opf",".xslt",".xsl"],firstLine:"(\\<\\?xml.*)|(\\<svg)|(\\<\\!doctype\\s+svg)",aliases:["XML","xml"],mimetypes:["text/xml","application/xml","application/xaml+xml","application/xml-dtd"],loader:()=>o(()=>import("./xml-87c419fd.js"),["assets/xml-87c419fd.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});P({id:"yaml",extensions:[".yaml",".yml"],aliases:["YAML","yaml","YML","yml"],mimetypes:["application/x-yaml","text/x-yaml"],loader:()=>o(()=>import("./yaml-e0994d0d.js"),["assets/yaml-e0994d0d.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])});/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/var HS=Object.defineProperty,BS=Object.getOwnPropertyDescriptor,mS=Object.getOwnPropertyNames,YS=Object.prototype.hasOwnProperty,pe=(T,E,e,R)=>{if(E&&typeof E=="object"||typeof E=="function")for(let A of mS(E))!YS.call(T,A)&&A!==e&&HS(T,A,{get:()=>E[A],enumerable:!(R=BS(E,A))||R.enumerable});return T},FS=(T,E,e)=>(pe(T,E,"default"),e&&pe(e,E,"default")),vE={};FS(vE,PR);var Le=class{constructor(E,e,R){this._onDidChange=new vE.Emitter,this._languageId=E,this.setOptions(e),this.setModeConfiguration(R)}get onDidChange(){return this._onDidChange.event}get languageId(){return this._languageId}get modeConfiguration(){return this._modeConfiguration}get diagnosticsOptions(){return this.options}get options(){return this._options}setOptions(E){this._options=E||Object.create(null),this._onDidChange.fire(this)}setDiagnosticsOptions(E){this.setOptions(E)}setModeConfiguration(E){this._modeConfiguration=E||Object.create(null),this._onDidChange.fire(this)}},ie={validate:!0,lint:{compatibleVendorPrefixes:"ignore",vendorPrefix:"warning",duplicateProperties:"warning",emptyRules:"warning",importStatement:"ignore",boxModel:"ignore",universalSelector:"ignore",zeroUnits:"ignore",fontFaceProperties:"warning",hexColorLength:"error",argumentsInColorFunction:"error",unknownProperties:"warning",ieHack:"ignore",unknownVendorSpecificProperties:"ignore",propertyIgnoredDueToDisplay:"warning",important:"ignore",float:"ignore",idSelector:"ignore"},data:{useDefaultDataProvider:!0},format:{newlineBetweenSelectors:!0,newlineBetweenRules:!0,spaceAroundSelectorSeparator:!1,braceStyle:"collapse",maxPreserveNewLines:void 0,preserveNewLines:!0}},ne={completionItems:!0,hovers:!0,documentSymbols:!0,definitions:!0,references:!0,documentHighlights:!0,rename:!0,colors:!0,foldingRanges:!0,diagnostics:!0,selectionRanges:!0,documentFormattingEdits:!0,documentRangeFormattingEdits:!0},yR=new Le("css",ie,ne),WR=new Le("scss",ie,ne),gR=new Le("less",ie,ne);vE.languages.css={cssDefaults:yR,lessDefaults:gR,scssDefaults:WR};function oe(){return o(()=>import("./cssMode-f7cd21a1.js"),["assets/cssMode-f7cd21a1.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])}vE.languages.onLanguage("less",()=>{oe().then(T=>T.setupMode(gR))});vE.languages.onLanguage("scss",()=>{oe().then(T=>T.setupMode(WR))});vE.languages.onLanguage("css",()=>{oe().then(T=>T.setupMode(yR))});/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/var hS=Object.defineProperty,fS=Object.getOwnPropertyDescriptor,VS=Object.getOwnPropertyNames,vS=Object.prototype.hasOwnProperty,He=(T,E,e,R)=>{if(E&&typeof E=="object"||typeof E=="function")for(let A of VS(E))!vS.call(T,A)&&A!==e&&hS(T,A,{get:()=>E[A],enumerable:!(R=fS(E,A))||R.enumerable});return T},yS=(T,E,e)=>(He(T,E,"default"),e&&He(e,E,"default")),LT={};yS(LT,PR);var WS=class{constructor(T,E,e){this._onDidChange=new LT.Emitter,this._languageId=T,this.setOptions(E),this.setModeConfiguration(e)}get onDidChange(){return this._onDidChange.event}get languageId(){return this._languageId}get options(){return this._options}get modeConfiguration(){return this._modeConfiguration}setOptions(T){this._options=T||Object.create(null),this._onDidChange.fire(this)}setModeConfiguration(T){this._modeConfiguration=T||Object.create(null),this._onDidChange.fire(this)}},gS={tabSize:4,insertSpaces:!1,wrapLineLength:120,unformatted:'default": "a, abbr, acronym, b, bdo, big, br, button, cite, code, dfn, em, i, img, input, kbd, label, map, object, q, samp, select, small, span, strong, sub, sup, textarea, tt, var',contentUnformatted:"pre",indentInnerHtml:!1,preserveNewLines:!0,maxPreserveNewLines:void 0,indentHandlebars:!1,endWithNewline:!1,extraLiners:"head, body, /html",wrapAttributes:"auto"},iT={format:gS,suggest:{},data:{useDefaultDataProvider:!0}};function nT(T){return{completionItems:!0,hovers:!0,documentSymbols:!0,links:!0,documentHighlights:!0,rename:!0,colors:!0,foldingRanges:!0,selectionRanges:!0,diagnostics:T===KE,documentFormattingEdits:T===KE,documentRangeFormattingEdits:T===KE}}var KE="html",Be="handlebars",me="razor",XR=oT(KE,iT,nT(KE)),XS=XR.defaults,bR=oT(Be,iT,nT(Be)),bS=bR.defaults,KR=oT(me,iT,nT(me)),KS=KR.defaults;LT.languages.html={htmlDefaults:XS,razorDefaults:KS,handlebarDefaults:bS,htmlLanguageService:XR,handlebarLanguageService:bR,razorLanguageService:KR,registerHTMLLanguageService:oT};function xS(){return o(()=>import("./htmlMode-04177a55.js"),["assets/htmlMode-04177a55.js","assets/index-02fd6334.js","assets/index-ff273ca0.js","assets/index-b3322bc4.css","assets/_plugin-vue_export-helper-c27b6911.js","assets/index-7977e5c9.css"])}function oT(T,E=iT,e=nT(T)){const R=new WS(T,E,e);let A;const S=LT.languages.onLanguage(T,async()=>{A=(await xS()).setupMode(R)});return{defaults:R,dispose(){S.dispose(),A==null||A.dispose(),A=void 0}}}class Ee extends CE{constructor(E){super(),this.editor=E,this.widget=null,HA&&(this._register(E.onDidChangeConfiguration(()=>this.update())),this.update())}update(){const E=!this.editor.getOption(91);!this.widget&&E?this.widget=new DT(this.editor):this.widget&&!E&&(this.widget.dispose(),this.widget=null)}dispose(){super.dispose(),this.widget&&(this.widget.dispose(),this.widget=null)}}Ee.ID="editor.contrib.iPadShowKeyboard";class DT extends CE{constructor(E){super(),this.editor=E,this._domNode=document.createElement("textarea"),this._domNode.className="iPadShowKeyboard",this._register(le(this._domNode,"touchstart",e=>{this.editor.focus()})),this._register(le(this._domNode,"focus",e=>{this.editor.focus()})),this.editor.addOverlayWidget(this)}dispose(){this.editor.removeOverlayWidget(this),super.dispose()}getId(){return DT.ID}getDomNode(){return this._domNode}getPosition(){return{preference:1}}}DT.ID="editor.contrib.ShowKeyboardWidget";se(Ee.ID,Ee,3);var wS=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},Ye=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}},Te;let fE=Te=class extends CE{static get(E){return E.getContribution(Te.ID)}constructor(E,e,R){super(),this._editor=E,this._languageService=R,this._widget=null,this._register(this._editor.onDidChangeModel(A=>this.stop())),this._register(this._editor.onDidChangeModelLanguage(A=>this.stop())),this._register(re.onDidChange(A=>this.stop())),this._register(this._editor.onKeyUp(A=>A.keyCode===9&&this.stop()))}dispose(){this.stop(),super.dispose()}launch(){this._widget||this._editor.hasModel()&&(this._widget=new PT(this._editor,this._languageService))}stop(){this._widget&&(this._widget.dispose(),this._widget=null)}};fE.ID="editor.contrib.inspectTokens";fE=Te=wS([Ye(1,lR),Ye(2,BA)],fE);class JS extends qE{constructor(){super({id:"editor.action.inspectTokens",label:YA.inspectTokensAction,alias:"Developer: Inspect Tokens",precondition:void 0})}run(E,e){const R=fE.get(e);R==null||R.launch()}}function $S(T){let E="";for(let e=0,R=T.length;e<R;e++){const A=T.charCodeAt(e);switch(A){case 9:E+="→";break;case 32:E+="·";break;default:E+=String.fromCharCode(A)}}return E}function kS(T,E){const e=re.get(E);if(e)return e;const R=T.encodeLanguageId(E);return{getInitialState:()=>FA,tokenize:(A,S,O)=>hA(E,O),tokenizeEncoded:(A,S,O)=>fA(R,O)}}class PT extends CE{constructor(E,e){super(),this.allowEditorOverflow=!0,this._editor=E,this._languageService=e,this._model=this._editor.getModel(),this._domNode=document.createElement("div"),this._domNode.className="tokens-inspect-widget",this._tokenizationSupport=kS(this._languageService.languageIdCodec,this._model.getLanguageId()),this._compute(this._editor.getPosition()),this._register(this._editor.onDidChangeCursorPosition(R=>this._compute(this._editor.getPosition()))),this._editor.addContentWidget(this)}dispose(){this._editor.removeContentWidget(this),super.dispose()}getId(){return PT._ID}_compute(E){const e=this._getTokensAtLine(E.lineNumber);let R=0;for(let i=e.tokens1.length-1;i>=0;i--){const I=e.tokens1[i];if(E.column-1>=I.offset){R=i;break}}let A=0;for(let i=e.tokens2.length>>>1;i>=0;i--)if(E.column-1>=e.tokens2[i<<1]){A=i;break}const S=this._model.getLineContent(E.lineNumber);let O="";if(R<e.tokens1.length){const i=e.tokens1[R].offset,I=R+1<e.tokens1.length?e.tokens1[R+1].offset:S.length;O=S.substring(i,I)}mA(this._domNode,w("h2.tm-token",void 0,$S(O),w("span.tm-token-length",void 0,`${O.length} ${O.length===1?"char":"chars"}`))),RT(this._domNode,w("hr.tokens-inspect-separator",{style:"clear:both"}));const N=(A<<1)+1<e.tokens2.length?this._decodeMetadata(e.tokens2[(A<<1)+1]):null;RT(this._domNode,w("table.tm-metadata-table",void 0,w("tbody",void 0,w("tr",void 0,w("td.tm-metadata-key",void 0,"language"),w("td.tm-metadata-value",void 0,`${N?N.languageId:"-?-"}`)),w("tr",void 0,w("td.tm-metadata-key",void 0,"token type"),w("td.tm-metadata-value",void 0,`${N?this._tokenTypeToString(N.tokenType):"-?-"}`)),w("tr",void 0,w("td.tm-metadata-key",void 0,"font style"),w("td.tm-metadata-value",void 0,`${N?this._fontStyleToString(N.fontStyle):"-?-"}`)),w("tr",void 0,w("td.tm-metadata-key",void 0,"foreground"),w("td.tm-metadata-value",void 0,`${N?Me.Format.CSS.formatHex(N.foreground):"-?-"}`)),w("tr",void 0,w("td.tm-metadata-key",void 0,"background"),w("td.tm-metadata-value",void 0,`${N?Me.Format.CSS.formatHex(N.background):"-?-"}`))))),RT(this._domNode,w("hr.tokens-inspect-separator")),R<e.tokens1.length&&RT(this._domNode,w("span.tm-token-type",void 0,e.tokens1[R].type)),this._editor.layoutContentWidget(this)}_decodeMetadata(E){const e=re.getColorMap(),R=WE.getLanguageId(E),A=WE.getTokenType(E),S=WE.getFontStyle(E),O=WE.getForeground(E),N=WE.getBackground(E);return{languageId:this._languageService.languageIdCodec.decodeLanguageId(R),tokenType:A,fontStyle:S,foreground:e[O],background:e[N]}}_tokenTypeToString(E){switch(E){case 0:return"Other";case 1:return"Comment";case 2:return"String";case 3:return"RegEx";default:return"??"}}_fontStyleToString(E){let e="";return E&1&&(e+="italic "),E&2&&(e+="bold "),E&4&&(e+="underline "),E&8&&(e+="strikethrough "),e.length===0&&(e="---"),e}_getTokensAtLine(E){const e=this._getStateBeforeLine(E),R=this._tokenizationSupport.tokenize(this._model.getLineContent(E),!0,e),A=this._tokenizationSupport.tokenizeEncoded(this._model.getLineContent(E),!0,e);return{startState:e,tokens1:R.tokens,tokens2:A.tokens,endState:R.endState}}_getStateBeforeLine(E){let e=this._tokenizationSupport.getInitialState();for(let R=1;R<E;R++)e=this._tokenizationSupport.tokenize(this._model.getLineContent(R),!0,e).endState;return e}getDomNode(){return this._domNode}getPosition(){return{position:this._editor.getPosition(),preference:[2,1]}}}PT._ID="editor.contrib.inspectTokensWidget";se(fE.ID,fE,4);QE(JS);var QS=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},Fe=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}},gE;let sT=gE=class{constructor(E,e){this.quickInputService=E,this.keybindingService=e,this.registry=ZE.as(jE.Quickaccess)}provide(E){const e=new nE;return e.add(E.onDidAccept(()=>{const[R]=E.selectedItems;R&&this.quickInputService.quickAccess.show(R.prefix,{preserveValue:!0})})),e.add(E.onDidChangeValue(R=>{const A=this.registry.getQuickAccessProvider(R.substr(gE.PREFIX.length));A&&A.prefix&&A.prefix!==gE.PREFIX&&this.quickInputService.quickAccess.show(A.prefix,{preserveValue:!0})})),E.items=this.getQuickAccessProviders().filter(R=>R.prefix!==gE.PREFIX),e}getQuickAccessProviders(){return this.registry.getQuickAccessProviders().sort((e,R)=>e.prefix.localeCompare(R.prefix)).flatMap(e=>this.createPicks(e))}createPicks(E){return E.helpEntries.map(e=>{const R=e.prefix||E.prefix,A=R||"…";return{prefix:R,label:A,keybinding:e.commandId?this.keybindingService.lookupKeybinding(e.commandId):void 0,ariaLabel:H("helpPickAriaLabel","{0}, {1}",A,e.description),description:e.description}})}};sT.PREFIX="?";sT=gE=QS([Fe(0,_T),Fe(1,_e)],sT);ZE.as(jE.Quickaccess).registerQuickAccessProvider({ctor:sT,prefix:"",helpEntries:[{description:VA.helpQuickAccessActionLabel}]});class xR{constructor(E){this.options=E,this.rangeHighlightDecorationId=void 0}provide(E,e,R){var A;const S=new nE;E.canAcceptInBackground=!!(!((A=this.options)===null||A===void 0)&&A.canAcceptInBackground),E.matchOnLabel=E.matchOnDescription=E.matchOnDetail=E.sortByLabel=!1;const O=S.add(new MR);return O.value=this.doProvide(E,e,R),S.add(this.onDidActiveTextEditorControlChange(()=>{O.value=void 0,O.value=this.doProvide(E,e)})),S}doProvide(E,e,R){var A;const S=new nE,O=this.activeTextEditorControl;if(O&&this.canProvideWithTextEditor(O)){const N={editor:O},i=UR(O);if(i){let I=(A=O.saveViewState())!==null&&A!==void 0?A:void 0;S.add(i.onDidChangeCursorPosition(()=>{var t;I=(t=O.saveViewState())!==null&&t!==void 0?t:void 0})),N.restoreViewState=()=>{I&&O===this.activeTextEditorControl&&O.restoreViewState(I)},S.add(uR(e.onCancellationRequested)(()=>{var t;return(t=N.restoreViewState)===null||t===void 0?void 0:t.call(N)}))}S.add(Ce(()=>this.clearDecorations(O))),S.add(this.provideWithTextEditor(N,E,e,R))}else S.add(this.provideWithoutTextEditor(E,e));return S}canProvideWithTextEditor(E){return!0}gotoLocation({editor:E},e){E.setSelection(e.range,"code.jump"),E.revealRangeInCenter(e.range,0),e.preserveFocus||E.focus();const R=E.getModel();R&&"getLineContent"in R&&vA(`${R.getLineContent(e.range.startLineNumber)}`)}getModel(E){var e;return yA(E)?(e=E.getModel())===null||e===void 0?void 0:e.modified:E.getModel()}addDecorations(E,e){E.changeDecorations(R=>{const A=[];this.rangeHighlightDecorationId&&(A.push(this.rangeHighlightDecorationId.overviewRulerDecorationId),A.push(this.rangeHighlightDecorationId.rangeHighlightId),this.rangeHighlightDecorationId=void 0);const S=[{range:e,options:{description:"quick-access-range-highlight",className:"rangeHighlight",isWholeLine:!0}},{range:e,options:{description:"quick-access-range-highlight-overview",overviewRuler:{color:WA(gA),position:XA.Full}}}],[O,N]=R.deltaDecorations(A,S);this.rangeHighlightDecorationId={rangeHighlightId:O,overviewRulerDecorationId:N}})}clearDecorations(E){const e=this.rangeHighlightDecorationId;e&&(E.changeDecorations(R=>{R.deltaDecorations([e.overviewRulerDecorationId,e.rangeHighlightId],[])}),this.rangeHighlightDecorationId=void 0)}}class lT extends xR{constructor(){super({canAcceptInBackground:!0})}provideWithoutTextEditor(E){const e=H("cannotRunGotoLine","Open a text editor first to go to a line.");return E.items=[{label:e}],E.ariaLabel=e,CE.None}provideWithTextEditor(E,e,R){const A=E.editor,S=new nE;S.add(e.onDidAccept(i=>{const[I]=e.selectedItems;if(I){if(!this.isValidLineNumber(A,I.lineNumber))return;this.gotoLocation(E,{range:this.toRange(I.lineNumber,I.column),keyMods:e.keyMods,preserveFocus:i.inBackground}),i.inBackground||e.hide()}}));const O=()=>{const i=this.parsePosition(A,e.value.trim().substr(lT.PREFIX.length)),I=this.getPickLabel(A,i.lineNumber,i.column);if(e.items=[{lineNumber:i.lineNumber,column:i.column,label:I}],e.ariaLabel=I,!this.isValidLineNumber(A,i.lineNumber)){this.clearDecorations(A);return}const t=this.toRange(i.lineNumber,i.column);A.revealRangeInCenter(t,0),this.addDecorations(A,t)};O(),S.add(e.onDidChangeValue(()=>O()));const N=UR(A);return N&&N.getOptions().get(68).renderType===2&&(N.updateOptions({lineNumbers:"on"}),S.add(Ce(()=>N.updateOptions({lineNumbers:"relative"})))),S}toRange(E=1,e=1){return{startLineNumber:E,startColumn:e,endLineNumber:E,endColumn:e}}parsePosition(E,e){const R=e.split(/,|:|#/).map(S=>parseInt(S,10)).filter(S=>!isNaN(S)),A=this.lineCount(E)+1;return{lineNumber:R[0]>0?R[0]:A+R[0],column:R[1]}}getPickLabel(E,e,R){if(this.isValidLineNumber(E,e))return this.isValidColumn(E,e,R)?H("gotoLineColumnLabel","Go to line {0} and character {1}.",e,R):H("gotoLineLabel","Go to line {0}.",e);const A=E.getPosition()||{lineNumber:1,column:1},S=this.lineCount(E);return S>1?H("gotoLineLabelEmptyWithLimit","Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.",A.lineNumber,A.column,S):H("gotoLineLabelEmpty","Current Line: {0}, Character: {1}. Type a line number to navigate to.",A.lineNumber,A.column)}isValidLineNumber(E,e){return!e||typeof e!="number"?!1:e>0&&e<=this.lineCount(E)}isValidColumn(E,e,R){if(!R||typeof R!="number")return!1;const A=this.getModel(E);if(!A)return!1;const S={lineNumber:e,column:R};return A.validatePosition(S).equals(S)}lineCount(E){var e,R;return(R=(e=this.getModel(E))===null||e===void 0?void 0:e.getLineCount())!==null&&R!==void 0?R:0}}lT.PREFIX=":";var qS=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},ZS=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}};let JE=class extends lT{constructor(E){super(),this.editorService=E,this.onDidActiveTextEditorControlChange=dR.None}get activeTextEditorControl(){var E;return(E=this.editorService.getFocusedCodeEditor())!==null&&E!==void 0?E:void 0}};JE=qS([ZS(0,CT)],JE);let De=class wR extends qE{constructor(){super({id:wR.ID,label:cR.gotoLineActionLabel,alias:"Go to Line/Column...",precondition:void 0,kbOpts:{kbExpr:NT.focus,primary:2085,mac:{primary:293},weight:100}})}run(E){E.get(_T).quickAccess.show(JE.PREFIX)}};De.ID="editor.action.gotoLine";QE(De);ZE.as(jE.Quickaccess).registerQuickAccessProvider({ctor:JE,prefix:JE.PREFIX,helpEntries:[{description:cR.gotoLineActionLabel,commandId:De.ID}]});const JR=[void 0,[]];function uT(T,E,e=0,R=0){const A=E;return A.values&&A.values.length>1?jS(T,A.values,e,R):$R(T,E,e,R)}function jS(T,E,e,R){let A=0;const S=[];for(const O of E){const[N,i]=$R(T,O,e,R);if(typeof N!="number")return JR;A+=N,S.push(...i)}return[A,zS(S)]}function $R(T,E,e,R){const A=bA(E.original,E.originalLowercase,e,T,T.toLowerCase(),R,{firstMatchCanBeWeak:!0,boostFullMatch:!0});return A?[A[0],KA(A)]:JR}function zS(T){const E=T.sort((A,S)=>A.start-S.start),e=[];let R;for(const A of E)!R||!EO(R,A)?(R=A,e.push(A)):(R.start=Math.min(R.start,A.start),R.end=Math.max(R.end,A.end));return e}function EO(T,E){return!(T.end<E.start||E.end<T.start)}function he(T){return T.startsWith('"')&&T.endsWith('"')}const kR=" ";function ee(T){typeof T!="string"&&(T="");const E=T.toLowerCase(),{pathNormalized:e,normalized:R,normalizedLowercase:A}=fe(T),S=e.indexOf(jT)>=0,O=he(T);let N;const i=T.split(kR);if(i.length>1)for(const I of i){const t=he(I),{pathNormalized:s,normalized:r,normalizedLowercase:n}=fe(I);r&&(N||(N=[]),N.push({original:I,originalLowercase:I.toLowerCase(),pathNormalized:s,normalized:r,normalizedLowercase:n,expectContiguousMatch:t}))}return{original:T,originalLowercase:E,pathNormalized:e,normalized:R,normalizedLowercase:A,values:N,containsPathSeparator:S,expectContiguousMatch:O}}function fe(T){let E;xA?E=T.replace(/\//g,jT):E=T.replace(/\\/g,jT);const e=wA(E).replace(/\s|"/g,"");return{pathNormalized:E,normalized:e,normalizedLowercase:e.toLowerCase()}}function Ve(T){return Array.isArray(T)?ee(T.map(E=>E.original).join(kR)):ee(T.original)}var TO=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},ve=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}},hE;let sE=hE=class extends xR{constructor(E,e,R=Object.create(null)){super(R),this._languageFeaturesService=E,this._outlineModelService=e,this.options=R,this.options.canAcceptInBackground=!0}provideWithoutTextEditor(E){return this.provideLabelPick(E,H("cannotRunGotoSymbolWithoutEditor","To go to a symbol, first open a text editor with symbol information.")),CE.None}provideWithTextEditor(E,e,R,A){const S=E.editor,O=this.getModel(S);return O?this._languageFeaturesService.documentSymbolProvider.has(O)?this.doProvideWithEditorSymbols(E,O,e,R,A):this.doProvideWithoutEditorSymbols(E,O,e,R):CE.None}doProvideWithoutEditorSymbols(E,e,R,A){const S=new nE;return this.provideLabelPick(R,H("cannotRunGotoSymbolWithoutSymbolProvider","The active text editor does not provide symbol information.")),(async()=>!await this.waitForLanguageSymbolRegistry(e,S)||A.isCancellationRequested||S.add(this.doProvideWithEditorSymbols(E,e,R,A)))(),S}provideLabelPick(E,e){E.items=[{label:e,index:0,kind:14}],E.ariaLabel=e}async waitForLanguageSymbolRegistry(E,e){if(this._languageFeaturesService.documentSymbolProvider.has(E))return!0;const R=new JA,A=e.add(this._languageFeaturesService.documentSymbolProvider.onDidChange(()=>{this._languageFeaturesService.documentSymbolProvider.has(E)&&(A.dispose(),R.complete(!0))}));return e.add(Ce(()=>R.complete(!1))),R.p}doProvideWithEditorSymbols(E,e,R,A,S){var O;const N=E.editor,i=new nE;i.add(R.onDidAccept(r=>{var n;const[a]=R.selectedItems;a&&a.range&&(this.gotoLocation(E,{range:a.range.selection,keyMods:R.keyMods,preserveFocus:r.inBackground}),(n=S==null?void 0:S.handleAccept)===null||n===void 0||n.call(S,a),r.inBackground||R.hide())})),i.add(R.onDidTriggerItemButton(({item:r})=>{r&&r.range&&(this.gotoLocation(E,{range:r.range.selection,keyMods:R.keyMods,forceSideBySide:!0}),R.hide())}));const I=this.getDocumentSymbols(e,A);let t;const s=async r=>{t==null||t.dispose(!0),R.busy=!1,t=new HR(A),R.busy=!0;try{const n=ee(R.value.substr(hE.PREFIX.length).trim()),a=await this.doGetSymbolPicks(I,n,void 0,t.token,e);if(A.isCancellationRequested)return;if(a.length>0){if(R.items=a,r&&n.original.length===0){const l=qA(a,u=>!!(u.type!=="separator"&&u.range&&ce.containsPosition(u.range.decoration,r)));l&&(R.activeItems=[l])}}else n.original.length>0?this.provideLabelPick(R,H("noMatchingSymbolResults","No matching editor symbols")):this.provideLabelPick(R,H("noSymbolResults","No editor symbols"))}finally{A.isCancellationRequested||(R.busy=!1)}};return i.add(R.onDidChangeValue(()=>s(void 0))),s((O=N.getSelection())===null||O===void 0?void 0:O.getPosition()),i.add(R.onDidChangeActive(()=>{const[r]=R.activeItems;r&&r.range&&(N.revealRangeInCenter(r.range.selection,0),this.addDecorations(N,r.range.decoration))})),i}async doGetSymbolPicks(E,e,R,A,S){var O,N;const i=await E;if(A.isCancellationRequested)return[];const I=e.original.indexOf(hE.SCOPE_PREFIX)===0,t=I?1:0;let s,r;e.values&&e.values.length>1?(s=Ve(e.values[0]),r=Ve(e.values.slice(1))):s=e;let n;const a=(N=(O=this.options)===null||O===void 0?void 0:O.openSideBySideDirection)===null||N===void 0?void 0:N.call(O);a&&(n=[{iconClass:a==="right"?Ue.asClassName(ue.splitHorizontal):Ue.asClassName(ue.splitVertical),tooltip:a==="right"?H("openToSide","Open to the Side"):H("openToBottom","Open to the Bottom")}]);const l=[];for(let D=0;D<i.length;D++){const U=i[D],B=$A(U.name),h=`$(${kA.toIcon(U.kind).id}) ${B}`,x=h.length-B.length;let $=U.containerName;R!=null&&R.extraContainerLabel&&($?$=`${R.extraContainerLabel} • ${$}`:$=R.extraContainerLabel);let EE,OE,IE,cE;if(e.original.length>t){let DE=!1;if(s!==e&&([EE,OE]=uT(h,{...e,values:void 0},t,x),typeof EE=="number"&&(DE=!0)),typeof EE!="number"&&([EE,OE]=uT(h,s,t,x),typeof EE!="number"))continue;if(!DE&&r){if($&&r.original.length>0&&([IE,cE]=uT($,r)),typeof IE!="number")continue;typeof EE=="number"&&(EE+=IE)}}const dE=U.tags&&U.tags.indexOf(1)>=0;l.push({index:D,kind:U.kind,score:EE,label:h,ariaLabel:QA(U.name,U.kind),description:$,highlights:dE?void 0:{label:OE,description:cE},range:{selection:ce.collapseToStart(U.selectionRange),decoration:U.range},uri:S.uri,symbolName:B,strikethrough:dE,buttons:n})}const u=l.sort((D,U)=>I?this.compareByKindAndScore(D,U):this.compareByScore(D,U));let C=[];if(I){let h=function(){U&&typeof D=="number"&&B>0&&(U.label=ZA(dT[D]||cT,B))},D,U,B=0;for(const x of u)D!==x.kind?(h(),D=x.kind,B=1,U={type:"separator"},C.push(U)):B++,C.push(x);h()}else u.length>0&&(C=[{label:H("symbols","symbols ({0})",l.length),type:"separator"},...u]);return C}compareByScore(E,e){if(typeof E.score!="number"&&typeof e.score=="number")return 1;if(typeof E.score=="number"&&typeof e.score!="number")return-1;if(typeof E.score=="number"&&typeof e.score=="number"){if(E.score>e.score)return-1;if(E.score<e.score)return 1}return E.index<e.index?-1:E.index>e.index?1:0}compareByKindAndScore(E,e){const R=dT[E.kind]||cT,A=dT[e.kind]||cT,S=R.localeCompare(A);return S===0?this.compareByScore(E,e):S}async getDocumentSymbols(E,e){const R=await this._outlineModelService.getOrCreate(E,e);return e.isCancellationRequested?[]:R.asListOfDocumentSymbols()}};sE.PREFIX="@";sE.SCOPE_PREFIX=":";sE.PREFIX_BY_CATEGORY=`${hE.PREFIX}${hE.SCOPE_PREFIX}`;sE=hE=TO([ve(0,GR),ve(1,pR)],sE);const cT=H("property","properties ({0})"),dT={5:H("method","methods ({0})"),11:H("function","functions ({0})"),8:H("_constructor","constructors ({0})"),12:H("variable","variables ({0})"),4:H("class","classes ({0})"),22:H("struct","structs ({0})"),23:H("event","events ({0})"),24:H("operator","operators ({0})"),10:H("interface","interfaces ({0})"),2:H("namespace","namespaces ({0})"),3:H("package","packages ({0})"),25:H("typeParameter","type parameters ({0})"),1:H("modules","modules ({0})"),6:H("property","properties ({0})"),9:H("enum","enumerations ({0})"),21:H("enumMember","enumeration members ({0})"),14:H("string","strings ({0})"),0:H("file","files ({0})"),17:H("array","arrays ({0})"),15:H("number","numbers ({0})"),16:H("boolean","booleans ({0})"),18:H("object","objects ({0})"),19:H("key","keys ({0})"),7:H("field","fields ({0})"),13:H("constant","constants ({0})")};var eO=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},GT=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}};let Re=class extends sE{constructor(E,e,R){super(e,R),this.editorService=E,this.onDidActiveTextEditorControlChange=dR.None}get activeTextEditorControl(){var E;return(E=this.editorService.getFocusedCodeEditor())!==null&&E!==void 0?E:void 0}};Re=eO([GT(0,CT),GT(1,GR),GT(2,pR)],Re);class zE extends qE{constructor(){super({id:zE.ID,label:zT.quickOutlineActionLabel,alias:"Go to Symbol...",precondition:NT.hasDocumentSymbolProvider,kbOpts:{kbExpr:NT.focus,primary:3117,weight:100},contextMenuOpts:{group:"navigation",order:3}})}run(E){E.get(_T).quickAccess.show(sE.PREFIX,{itemActivation:jA.NONE})}}zE.ID="editor.action.quickOutline";QE(zE);ZE.as(jE.Quickaccess).registerQuickAccessProvider({ctor:Re,prefix:sE.PREFIX,helpEntries:[{description:zT.quickOutlineActionLabel,prefix:sE.PREFIX,commandId:zE.ID},{description:zT.quickOutlineByCategoryActionLabel,prefix:sE.PREFIX_BY_CATEGORY}]});function RO(T){var E;const e=new Map;for(const R of T)e.set(R,((E=e.get(R))!==null&&E!==void 0?E:0)+1);return e}class xE{constructor(){this.chunkCount=0,this.chunkOccurrences=new Map,this.documents=new Map}calculateScores(E,e){const R=this.computeEmbedding(E),A=new Map,S=[];for(const[O,N]of this.documents){if(e.isCancellationRequested)return[];for(const i of N.chunks){const I=this.computeSimilarityScore(i,R,A);I>0&&S.push({key:O,score:I})}}return S}static termFrequencies(E){return RO(xE.splitTerms(E))}static*splitTerms(E){const e=R=>R.toLowerCase();for(const[R]of E.matchAll(/\b\p{Letter}[\p{Letter}\d]{2,}\b/gu)){yield e(R);const A=R.replace(/([a-z])([A-Z])/g,"$1 $2").split(/\s+/g);if(A.length>1)for(const S of A)S.length>2&&/\p{Letter}{3,}/gu.test(S)&&(yield e(S))}}updateDocuments(E){var e;for(const{key:R}of E)this.deleteDocument(R);for(const R of E){const A=[];for(const S of R.textChunks){const O=xE.termFrequencies(S);for(const N of O.keys())this.chunkOccurrences.set(N,((e=this.chunkOccurrences.get(N))!==null&&e!==void 0?e:0)+1);A.push({text:S,tf:O})}this.chunkCount+=A.length,this.documents.set(R.key,{chunks:A})}return this}deleteDocument(E){const e=this.documents.get(E);if(e){this.documents.delete(E),this.chunkCount-=e.chunks.length;for(const R of e.chunks)for(const A of R.tf.keys()){const S=this.chunkOccurrences.get(A);if(typeof S=="number"){const O=S-1;O<=0?this.chunkOccurrences.delete(A):this.chunkOccurrences.set(A,O)}}}}computeSimilarityScore(E,e,R){let A=0;for(const[S,O]of Object.entries(e)){const N=E.tf.get(S);if(!N)continue;let i=R.get(S);typeof i!="number"&&(i=this.computeIdf(S),R.set(S,i));const I=N*i;A+=I*O}return A}computeEmbedding(E){const e=xE.termFrequencies(E);return this.computeTfidf(e)}computeIdf(E){var e;const R=(e=this.chunkOccurrences.get(E))!==null&&e!==void 0?e:0;return R>0?Math.log((this.chunkCount+1)/R):0}computeTfidf(E){const e=Object.create(null);for(const[R,A]of E){const S=this.computeIdf(R);S>0&&(e[R]=A*S)}return e}}function AO(T){var E,e;const R=T.slice(0);R.sort((S,O)=>O.score-S.score);const A=(e=(E=R[0])===null||E===void 0?void 0:E.score)!==null&&e!==void 0?e:0;if(A>0)for(const S of R)S.score/=A;return R}var FE;(function(T){T[T.NO_ACTION=0]="NO_ACTION",T[T.CLOSE_PICKER=1]="CLOSE_PICKER",T[T.REFRESH_PICKER=2]="REFRESH_PICKER",T[T.REMOVE_ITEM=3]="REMOVE_ITEM"})(FE||(FE={}));function pT(T){const E=T;return Array.isArray(E.items)}function ye(T){const E=T;return!!E.picks&&E.additionalPicks instanceof Promise}class SO extends CE{constructor(E,e){super(),this.prefix=E,this.options=e}provide(E,e,R){var A;const S=new nE;E.canAcceptInBackground=!!(!((A=this.options)===null||A===void 0)&&A.canAcceptInBackground),E.matchOnLabel=E.matchOnDescription=E.matchOnDetail=E.sortByLabel=!1;let O;const N=S.add(new MR),i=async()=>{var t;const s=N.value=new nE;O==null||O.dispose(!0),E.busy=!1,O=new HR(e);const r=O.token;let n=E.value.substring(this.prefix.length);!((t=this.options)===null||t===void 0)&&t.shouldSkipTrimPickFilter||(n=n.trim());const a=this._getPicks(n,s,r,R),l=(C,D)=>{var U;let B,h;if(pT(C)?(B=C.items,h=C.active):B=C,B.length===0){if(D)return!1;(n.length>0||E.hideInput)&&(!((U=this.options)===null||U===void 0)&&U.noResultsPick)&&(zA(this.options.noResultsPick)?B=[this.options.noResultsPick(n)]:B=[this.options.noResultsPick])}return E.items=B,h&&(E.activeItems=[h]),!0},u=async C=>{let D=!1,U=!1;await Promise.all([(async()=>{typeof C.mergeDelay=="number"&&(await ES(C.mergeDelay),r.isCancellationRequested)||U||(D=l(C.picks,!0))})(),(async()=>{E.busy=!0;try{const B=await C.additionalPicks;if(r.isCancellationRequested)return;let h,x;pT(C.picks)?(h=C.picks.items,x=C.picks.active):h=C.picks;let $,EE;if(pT(B)?($=B.items,EE=B.active):$=B,$.length>0||!D){let OE;if(!x&&!EE){const IE=E.activeItems[0];IE&&h.indexOf(IE)!==-1&&(OE=IE)}l({items:[...h,...$],active:x||EE||OE})}}finally{r.isCancellationRequested||(E.busy=!1),U=!0}})()])};if(a!==null)if(ye(a))await u(a);else if(!(a instanceof Promise))l(a);else{E.busy=!0;try{const C=await a;if(r.isCancellationRequested)return;ye(C)?await u(C):l(C)}finally{r.isCancellationRequested||(E.busy=!1)}}};S.add(E.onDidChangeValue(()=>i())),i(),S.add(E.onDidAccept(t=>{var s;if(R!=null&&R.handleAccept){t.inBackground||E.hide(),(s=R.handleAccept)===null||s===void 0||s.call(R,E.activeItems[0]);return}const[r]=E.selectedItems;typeof(r==null?void 0:r.accept)=="function"&&(t.inBackground||E.hide(),r.accept(E.keyMods,t))}));const I=async(t,s)=>{var r,n;if(typeof s.trigger!="function")return;const a=(n=(r=s.buttons)===null||r===void 0?void 0:r.indexOf(t))!==null&&n!==void 0?n:-1;if(a>=0){const l=s.trigger(a,E.keyMods),u=typeof l=="number"?l:await l;if(e.isCancellationRequested)return;switch(u){case FE.NO_ACTION:break;case FE.CLOSE_PICKER:E.hide();break;case FE.REFRESH_PICKER:i();break;case FE.REMOVE_ITEM:{const C=E.items.indexOf(s);if(C!==-1){const D=E.items.slice(),U=D.splice(C,1),B=E.activeItems.filter(x=>x!==U[0]),h=E.keepScrollPosition;E.keepScrollPosition=!0,E.items=D,B&&(E.activeItems=B),E.keepScrollPosition=h}break}}}};return S.add(E.onDidTriggerItemButton(({button:t,item:s})=>I(t,s))),S.add(E.onDidTriggerSeparatorButton(({button:t,separator:s})=>I(t,s))),S}}var QR=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},iE=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}},lE,K;let ME=lE=class extends SO{constructor(E,e,R,A,S,O){super(lE.PREFIX,E),this.instantiationService=e,this.keybindingService=R,this.commandService=A,this.telemetryService=S,this.dialogService=O,this.commandsHistory=this._register(this.instantiationService.createInstance(oE)),this.options=E}async _getPicks(E,e,R,A){var S,O,N,i;const I=await this.getCommandPicks(R);if(R.isCancellationRequested)return[];const t=uR(()=>{const C=new xE;C.updateDocuments(I.map(U=>({key:U.commandId,textChunks:[this.getTfIdfChunk(U)]})));const D=C.calculateScores(E,R);return AO(D).filter(U=>U.score>lE.TFIDF_THRESHOLD).slice(0,lE.TFIDF_MAX_RESULTS)}),s=[];for(const C of I){const D=(S=lE.WORD_FILTER(E,C.label))!==null&&S!==void 0?S:void 0,U=C.commandAlias&&(O=lE.WORD_FILTER(E,C.commandAlias))!==null&&O!==void 0?O:void 0;if(D||U)C.highlights={label:D,detail:this.options.showAlias?U:void 0},s.push(C);else if(E===C.commandId)s.push(C);else if(E.length>=3){const B=t();if(R.isCancellationRequested)return[];const h=B.find(x=>x.key===C.commandId);h&&(C.tfIdfScore=h.score,s.push(C))}}const r=new Map;for(const C of s){const D=r.get(C.label);D?(C.description=C.commandId,D.description=D.commandId):r.set(C.label,C)}s.sort((C,D)=>{if(C.tfIdfScore&&D.tfIdfScore)return C.tfIdfScore===D.tfIdfScore?C.label.localeCompare(D.label):D.tfIdfScore-C.tfIdfScore;if(C.tfIdfScore)return 1;if(D.tfIdfScore)return-1;const U=this.commandsHistory.peek(C.commandId),B=this.commandsHistory.peek(D.commandId);if(U&&B)return U>B?-1:1;if(U)return-1;if(B)return 1;if(this.options.suggestedCommandIds){const h=this.options.suggestedCommandIds.has(C.commandId),x=this.options.suggestedCommandIds.has(D.commandId);if(h&&x)return 0;if(h)return-1;if(x)return 1}return C.label.localeCompare(D.label)});const n=[];let a=!1,l=!0,u=!!this.options.suggestedCommandIds;for(let C=0;C<s.length;C++){const D=s[C];C===0&&this.commandsHistory.peek(D.commandId)&&(n.push({type:"separator",label:H("recentlyUsed","recently used")}),a=!0),l&&D.tfIdfScore!==void 0&&(n.push({type:"separator",label:H("suggested","similar commands")}),l=!1),u&&D.tfIdfScore===void 0&&!this.commandsHistory.peek(D.commandId)&&(!((N=this.options.suggestedCommandIds)===null||N===void 0)&&N.has(D.commandId))&&(n.push({type:"separator",label:H("commonlyUsed","commonly used")}),a=!0,u=!1),a&&D.tfIdfScore===void 0&&!this.commandsHistory.peek(D.commandId)&&!(!((i=this.options.suggestedCommandIds)===null||i===void 0)&&i.has(D.commandId))&&(n.push({type:"separator",label:H("morecCommands","other commands")}),a=!1),n.push(this.toCommandPick(D,A))}return this.hasAdditionalCommandPicks(E,R)?{picks:n,additionalPicks:(async()=>{var C;const D=await this.getAdditionalCommandPicks(I,s,E,R);if(R.isCancellationRequested)return[];const U=D.map(B=>this.toCommandPick(B,A));return l&&((C=U[0])===null||C===void 0?void 0:C.type)!=="separator"&&U.unshift({type:"separator",label:H("suggested","similar commands")}),U})()}:n}toCommandPick(E,e){if(E.type==="separator")return E;const R=this.keybindingService.lookupKeybinding(E.commandId),A=R?H("commandPickAriaLabelWithKeybinding","{0}, {1}",E.label,R.getAriaLabel()):E.label;return{...E,ariaLabel:A,detail:this.options.showAlias&&E.commandAlias!==E.label?E.commandAlias:void 0,keybinding:R,accept:async()=>{var S,O;this.commandsHistory.push(E.commandId),this.telemetryService.publicLog2("workbenchActionExecuted",{id:E.commandId,from:(S=e==null?void 0:e.from)!==null&&S!==void 0?S:"quick open"});try{!((O=E.args)===null||O===void 0)&&O.length?await this.commandService.executeCommand(E.commandId,...E.args):await this.commandService.executeCommand(E.commandId)}catch(N){RS(N)||this.dialogService.error(H("canNotRun","Command '{0}' resulted in an error",E.label),AS(N))}}}}getTfIdfChunk({label:E,commandAlias:e,commandDescription:R}){let A=E;return e&&e!==E&&(A+=` - ${e}`),R&&R.value!==E&&(A+=` - ${R.value===R.original?R.value:`${R.value} (${R.original})`}`),A}};ME.PREFIX=">";ME.TFIDF_THRESHOLD=.5;ME.TFIDF_MAX_RESULTS=5;ME.WORD_FILTER=TS(IS,OS,SS);ME=lE=QR([iE(1,ae),iE(2,_e),iE(3,BR),iE(4,mR),iE(5,YR)],ME);let oE=K=class extends CE{constructor(E,e,R){super(),this.storageService=E,this.configurationService=e,this.logService=R,this.configuredCommandsHistoryLength=0,this.updateConfiguration(),this.load(),this.registerListeners()}registerListeners(){this._register(this.configurationService.onDidChangeConfiguration(E=>this.updateConfiguration(E))),this._register(this.storageService.onWillSaveState(E=>{E.reason===tS.SHUTDOWN&&this.saveState()}))}updateConfiguration(E){E&&!E.affectsConfiguration("workbench.commandPalette.history")||(this.configuredCommandsHistoryLength=K.getConfiguredCommandHistoryLength(this.configurationService),K.cache&&K.cache.limit!==this.configuredCommandsHistoryLength&&(K.cache.limit=this.configuredCommandsHistoryLength,K.hasChanges=!0))}load(){const E=this.storageService.get(K.PREF_KEY_CACHE,0);let e;if(E)try{e=JSON.parse(E)}catch(A){this.logService.error(`[CommandsHistory] invalid data: ${A}`)}const R=K.cache=new NS(this.configuredCommandsHistoryLength,1);if(e){let A;e.usesLRU?A=e.entries:A=e.entries.sort((S,O)=>S.value-O.value),A.forEach(S=>R.set(S.key,S.value))}K.counter=this.storageService.getNumber(K.PREF_KEY_COUNTER,0,K.counter)}push(E){K.cache&&(K.cache.set(E,K.counter++),K.hasChanges=!0)}peek(E){var e;return(e=K.cache)===null||e===void 0?void 0:e.peek(E)}saveState(){if(!K.cache||!K.hasChanges)return;const E={usesLRU:!0,entries:[]};K.cache.forEach((e,R)=>E.entries.push({key:R,value:e})),this.storageService.store(K.PREF_KEY_CACHE,JSON.stringify(E),0,0),this.storageService.store(K.PREF_KEY_COUNTER,K.counter,0,0),K.hasChanges=!1}static getConfiguredCommandHistoryLength(E){var e,R;const S=(R=(e=E.getValue().workbench)===null||e===void 0?void 0:e.commandPalette)===null||R===void 0?void 0:R.history;return typeof S=="number"?S:K.DEFAULT_COMMANDS_HISTORY_LENGTH}};oE.DEFAULT_COMMANDS_HISTORY_LENGTH=50;oE.PREF_KEY_CACHE="commandPalette.mru.cache";oE.PREF_KEY_COUNTER="commandPalette.mru.counter";oE.counter=1;oE.hasChanges=!1;oE=K=QR([iE(0,FR),iE(1,hR),iE(2,eS)],oE);class OO extends ME{constructor(E,e,R,A,S,O){super(E,e,R,A,S,O)}getCodeEditorCommandPicks(){var E;const e=this.activeTextEditorControl;if(!e)return[];const R=[];for(const A of e.getSupportedActions()){let S;!((E=A.metadata)===null||E===void 0)&&E.description&&(sS(A.metadata.description)?S=A.metadata.description:S={original:A.metadata.description,value:A.metadata.description}),R.push({commandId:A.id,commandAlias:A.alias,commandDescription:S,label:rS(A.label)||A.id})}return R}}var IO=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},pE=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}};let $E=class extends OO{get activeTextEditorControl(){var E;return(E=this.codeEditorService.getFocusedCodeEditor())!==null&&E!==void 0?E:void 0}constructor(E,e,R,A,S,O){super({showAlias:!1},E,R,A,S,O),this.codeEditorService=e}async getCommandPicks(){return this.getCodeEditorCommandPicks()}hasAdditionalCommandPicks(){return!1}async getAdditionalCommandPicks(){return[]}};$E=IO([pE(0,ae),pE(1,CT),pE(2,_e),pE(3,BR),pE(4,mR),pE(5,YR)],$E);class ET extends qE{constructor(){super({id:ET.ID,label:fR.quickCommandActionLabel,alias:"Command Palette",precondition:void 0,kbOpts:{kbExpr:NT.focus,primary:59,weight:100},contextMenuOpts:{group:"z_commands",order:1}})}run(E){E.get(_T).quickAccess.show($E.PREFIX)}}ET.ID="editor.action.quickCommand";QE(ET);ZE.as(jE.Quickaccess).registerQuickAccessProvider({ctor:$E,prefix:$E.PREFIX,helpEntries:[{description:fR.quickCommandHelp,commandId:ET.ID}]});var tO=globalThis&&globalThis.__decorate||function(T,E,e,R){var A=arguments.length,S=A<3?E:R===null?R=Object.getOwnPropertyDescriptor(E,e):R,O;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")S=Reflect.decorate(T,E,e,R);else for(var N=T.length-1;N>=0;N--)(O=T[N])&&(S=(A<3?O(S):A>3?O(E,e,S):O(E,e))||S);return A>3&&S&&Object.defineProperty(E,e,S),S},HE=globalThis&&globalThis.__param||function(T,E){return function(e,R){E(e,R,T)}};let Ae=class extends VR{constructor(E,e,R,A,S,O,N){super(!0,E,e,R,A,S,O,N)}};Ae=tO([HE(1,_S),HE(2,CT),HE(3,CS),HE(4,ae),HE(5,FR),HE(6,hR)],Ae);se(VR.ID,Ae,4);class NO extends qE{constructor(){super({id:"editor.action.toggleHighContrast",label:aS.toggleHighContrast,alias:"Toggle High Contrast Theme",precondition:void 0}),this._originalThemeName=null}run(E,e){const R=E.get(lR),A=R.getColorTheme();LS(A.type)?(R.setTheme(this._originalThemeName||(de(A.type)?iS:nS)),this._originalThemeName=null):(R.setTheme(de(A.type)?oS:DS),this._originalThemeName=A.themeName)}}QE(NO);var qR={exports:{}};(function(T){(function(E,e){T.exports?T.exports=e():E.nearley=e()})(PA,function(){function E(I,t,s){return this.id=++E.highestId,this.name=I,this.symbols=t,this.postprocess=s,this}E.highestId=0,E.prototype.toString=function(I){var t=typeof I>"u"?this.symbols.map(i).join(" "):this.symbols.slice(0,I).map(i).join(" ")+" ● "+this.symbols.slice(I).map(i).join(" ");return this.name+" → "+t};function e(I,t,s,r){this.rule=I,this.dot=t,this.reference=s,this.data=[],this.wantedBy=r,this.isComplete=this.dot===I.symbols.length}e.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},e.prototype.nextState=function(I){var t=new e(this.rule,this.dot+1,this.reference,this.wantedBy);return t.left=this,t.right=I,t.isComplete&&(t.data=t.build(),t.right=void 0),t},e.prototype.build=function(){var I=[],t=this;do I.push(t.right.data),t=t.left;while(t.left);return I.reverse(),I},e.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,O.fail))};function R(I,t){this.grammar=I,this.index=t,this.states=[],this.wants={},this.scannable=[],this.completed={}}R.prototype.process=function(I){for(var t=this.states,s=this.wants,r=this.completed,n=0;n<t.length;n++){var a=t[n];if(a.isComplete){if(a.finish(),a.data!==O.fail){for(var l=a.wantedBy,u=l.length;u--;){var C=l[u];this.complete(C,a)}if(a.reference===this.index){var D=a.rule.name;(this.completed[D]=this.completed[D]||[]).push(a)}}}else{var D=a.rule.symbols[a.dot];if(typeof D!="string"){this.scannable.push(a);continue}if(s[D]){if(s[D].push(a),r.hasOwnProperty(D))for(var U=r[D],u=0;u<U.length;u++){var B=U[u];this.complete(a,B)}}else s[D]=[a],this.predict(D)}}},R.prototype.predict=function(I){for(var t=this.grammar.byName[I]||[],s=0;s<t.length;s++){var r=t[s],n=this.wants[I],a=new e(r,0,this.index,n);this.states.push(a)}},R.prototype.complete=function(I,t){var s=I.nextState(t);this.states.push(s)};function A(I,t){this.rules=I,this.start=t||this.rules[0].name;var s=this.byName={};this.rules.forEach(function(r){s.hasOwnProperty(r.name)||(s[r.name]=[]),s[r.name].push(r)})}A.fromCompiled=function(r,t){var s=r.Lexer;r.ParserStart&&(t=r.ParserStart,r=r.ParserRules);var r=r.map(function(a){return new E(a.name,a.symbols,a.postprocess)}),n=new A(r,t);return n.lexer=s,n};function S(){this.reset("")}S.prototype.reset=function(I,t){this.buffer=I,this.index=0,this.line=t?t.line:1,this.lastLineBreak=t?-t.col:0},S.prototype.next=function(){if(this.index<this.buffer.length){var I=this.buffer[this.index++];return I===`
`&&(this.line+=1,this.lastLineBreak=this.index),{value:I}}},S.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},S.prototype.formatError=function(I,t){var s=this.buffer;if(typeof s=="string"){var r=s.split(`
`).slice(Math.max(0,this.line-5),this.line),n=s.indexOf(`
`,this.index);n===-1&&(n=s.length);var a=this.index-this.lastLineBreak,l=String(this.line).length;return t+=" at line "+this.line+" col "+a+`:

`,t+=r.map(function(C,D){return u(this.line-r.length+D+1,l)+" "+C},this).join(`
`),t+=`
`+u("",l+a)+`^
`,t}else return t+" at index "+(this.index-1);function u(C,D){var U=String(C);return Array(D-U.length+1).join(" ")+U}};function O(I,t,s){if(I instanceof A)var r=I,s=t;else var r=A.fromCompiled(I,t);this.grammar=r,this.options={keepHistory:!1,lexer:r.lexer||new S};for(var n in s||{})this.options[n]=s[n];this.lexer=this.options.lexer,this.lexerState=void 0;var a=new R(r,0);this.table=[a],a.wants[r.start]=[],a.predict(r.start),a.process(),this.current=0}O.fail={},O.prototype.feed=function(I){var t=this.lexer;t.reset(I,this.lexerState);for(var s;;){try{if(s=t.next(),!s)break}catch($){var l=new R(this.grammar,this.current+1);this.table.push(l);var r=new Error(this.reportLexerError($));throw r.offset=this.current,r.token=$.token,r}var n=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var a=this.current+1,l=new R(this.grammar,a);this.table.push(l);for(var u=s.text!==void 0?s.text:s.value,C=t.constructor===S?s.value:s,D=n.scannable,U=D.length;U--;){var B=D[U],h=B.rule.symbols[B.dot];if(h.test?h.test(C):h.type?h.type===s.type:h.literal===u){var x=B.nextState({data:C,token:s,isToken:!0,reference:a-1});l.states.push(x)}}if(l.process(),l.states.length===0){var r=new Error(this.reportError(s));throw r.offset=this.current,r.token=s,r}this.options.keepHistory&&(n.lexerState=t.save()),this.current++}return n&&(this.lexerState=t.save()),this.results=this.finish(),this},O.prototype.reportLexerError=function(I){var t,s,r=I.token;return r?(t="input "+JSON.stringify(r.text[0])+" (lexer error)",s=this.lexer.formatError(r,"Syntax error")):(t="input (lexer error)",s=I.message),this.reportErrorCommon(s,t)},O.prototype.reportError=function(I){var t=(I.type?I.type+" token: ":"")+JSON.stringify(I.value!==void 0?I.value:I),s=this.lexer.formatError(I,"Syntax error");return this.reportErrorCommon(s,t)},O.prototype.reportErrorCommon=function(I,t){var s=[];s.push(I);var r=this.table.length-2,n=this.table[r],a=n.states.filter(function(u){var C=u.rule.symbols[u.dot];return C&&typeof C!="string"});if(a.length===0)s.push("Unexpected "+t+`. I did not expect any more input. Here is the state of my parse table:
`),this.displayStateStack(n.states,s);else{s.push("Unexpected "+t+`. Instead, I was expecting to see one of the following:
`);var l=a.map(function(u){return this.buildFirstStateStack(u,[])||[u]},this);l.forEach(function(u){var C=u[0],D=C.rule.symbols[C.dot],U=this.getSymbolDisplay(D);s.push("A "+U+" based on:"),this.displayStateStack(u,s)},this)}return s.push(""),s.join(`
`)},O.prototype.displayStateStack=function(I,t){for(var s,r=0,n=0;n<I.length;n++){var a=I[n],l=a.rule.toString(a.dot);l===s?r++:(r>0&&t.push("    ^ "+r+" more lines identical to this"),r=0,t.push("    "+l)),s=l}},O.prototype.getSymbolDisplay=function(I){return N(I)},O.prototype.buildFirstStateStack=function(I,t){if(t.indexOf(I)!==-1)return null;if(I.wantedBy.length===0)return[I];var s=I.wantedBy[0],r=[I].concat(t),n=this.buildFirstStateStack(s,r);return n===null?null:[I].concat(n)},O.prototype.save=function(){var I=this.table[this.current];return I.lexerState=this.lexerState,I},O.prototype.restore=function(I){var t=I.index;this.current=t,this.table[t]=I,this.table.splice(t+1),this.lexerState=I.lexerState,this.results=this.finish()},O.prototype.rewind=function(I){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[I])},O.prototype.finish=function(){var I=[],t=this.grammar.start,s=this.table[this.table.length-1];return s.states.forEach(function(r){r.rule.name===t&&r.dot===r.rule.symbols.length&&r.reference===0&&r.data!==O.fail&&I.push(r)}),I.map(function(r){return r.data})};function N(I){var t=typeof I;if(t==="string")return I;if(t==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return"character matching "+I;if(I.type)return I.type+" token";if(I.test)return"token matching "+String(I.test);throw new Error("Unknown symbol type: "+I)}}function i(I){var t=typeof I;if(t==="string")return I;if(t==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return I.toString();if(I.type)return"%"+I.type;if(I.test)return"<"+String(I.test)+">";throw new Error("Unknown symbol type: "+I)}}return{Parser:O,Grammar:A,Rule:E}})})(qR);var sO=qR.exports;const rO=lA(sO);var ZR=Object.defineProperty,_O=Object.defineProperties,CO=Object.getOwnPropertyDescriptors,rT=Object.getOwnPropertySymbols,jR=Object.prototype.hasOwnProperty,zR=Object.prototype.propertyIsEnumerable,We=(T,E,e)=>E in T?ZR(T,E,{enumerable:!0,configurable:!0,writable:!0,value:e}):T[E]=e,z=(T,E)=>{for(var e in E||(E={}))jR.call(E,e)&&We(T,e,E[e]);if(rT)for(var e of rT(E))zR.call(E,e)&&We(T,e,E[e]);return T},eE=(T,E)=>_O(T,CO(E)),aO=(T,E)=>{var e={};for(var R in T)jR.call(T,R)&&E.indexOf(R)<0&&(e[R]=T[R]);if(T!=null&&rT)for(var R of rT(T))E.indexOf(R)<0&&zR.call(T,R)&&(e[R]=T[R]);return e},LO=(T,E)=>{for(var e in E)ZR(T,e,{get:E[e],enumerable:!0})},EA={};LO(EA,{bigquery:()=>FO,db2:()=>JO,db2i:()=>TI,hive:()=>sI,mariadb:()=>DI,mysql:()=>pI,n1ql:()=>JI,plsql:()=>Tt,postgresql:()=>rt,redshift:()=>Pt,singlestoredb:()=>lN,snowflake:()=>BN,spark:()=>Ht,sql:()=>kt,sqlite:()=>Wt,tidb:()=>vI,transactsql:()=>_N,trino:()=>RN});var _=T=>T.flatMap(iO),iO=T=>ST(oO(T)).map(nO),nO=T=>T.replace(/ +/g," ").trim(),oO=T=>({type:"mandatory_block",items:Pe(T,0)[0]}),Pe=(T,E,e)=>{const R=[];for(;T[E];){const[A,S]=DO(T,E);if(R.push(A),E=S,T[E]==="|")E++;else if(T[E]==="}"||T[E]==="]"){if(e!==T[E])throw new Error(`Unbalanced parenthesis in: ${T}`);return E++,[R,E]}else if(E===T.length){if(e)throw new Error(`Unbalanced parenthesis in: ${T}`);return[R,E]}else throw new Error(`Unexpected "${T[E]}"`)}return[R,E]},DO=(T,E)=>{const e=[];for(;;){const[R,A]=PO(T,E);if(R)e.push(R),E=A;else break}return e.length===1?[e[0],E]:[{type:"concatenation",items:e},E]},PO=(T,E)=>{if(T[E]==="{")return lO(T,E+1);if(T[E]==="[")return MO(T,E+1);{let e="";for(;T[E]&&/[A-Za-z0-9_ ]/.test(T[E]);)e+=T[E],E++;return[e,E]}},lO=(T,E)=>{const[e,R]=Pe(T,E,"}");return[{type:"mandatory_block",items:e},R]},MO=(T,E)=>{const[e,R]=Pe(T,E,"]");return[{type:"optional_block",items:e},R]},ST=T=>{if(typeof T=="string")return[T];if(T.type==="concatenation")return T.items.map(ST).reduce(UO,[""]);if(T.type==="mandatory_block")return T.items.flatMap(ST);if(T.type==="optional_block")return["",...T.items.flatMap(ST)];throw new Error(`Unknown node type: ${T}`)},UO=(T,E)=>{const e=[];for(const R of T)for(const A of E)e.push(R+A);return e},TA=(T=>(T.QUOTED_IDENTIFIER="QUOTED_IDENTIFIER",T.IDENTIFIER="IDENTIFIER",T.STRING="STRING",T.VARIABLE="VARIABLE",T.RESERVED_DATA_TYPE="RESERVED_DATA_TYPE",T.RESERVED_PARAMETERIZED_DATA_TYPE="RESERVED_PARAMETERIZED_DATA_TYPE",T.RESERVED_KEYWORD="RESERVED_KEYWORD",T.RESERVED_FUNCTION_NAME="RESERVED_FUNCTION_NAME",T.RESERVED_PHRASE="RESERVED_PHRASE",T.RESERVED_SET_OPERATION="RESERVED_SET_OPERATION",T.RESERVED_CLAUSE="RESERVED_CLAUSE",T.RESERVED_SELECT="RESERVED_SELECT",T.RESERVED_JOIN="RESERVED_JOIN",T.ARRAY_IDENTIFIER="ARRAY_IDENTIFIER",T.ARRAY_KEYWORD="ARRAY_KEYWORD",T.CASE="CASE",T.END="END",T.WHEN="WHEN",T.ELSE="ELSE",T.THEN="THEN",T.LIMIT="LIMIT",T.BETWEEN="BETWEEN",T.AND="AND",T.OR="OR",T.XOR="XOR",T.OPERATOR="OPERATOR",T.COMMA="COMMA",T.ASTERISK="ASTERISK",T.PROPERTY_ACCESS_OPERATOR="PROPERTY_ACCESS_OPERATOR",T.OPEN_PAREN="OPEN_PAREN",T.CLOSE_PAREN="CLOSE_PAREN",T.LINE_COMMENT="LINE_COMMENT",T.BLOCK_COMMENT="BLOCK_COMMENT",T.DISABLE_COMMENT="DISABLE_COMMENT",T.NUMBER="NUMBER",T.NAMED_PARAMETER="NAMED_PARAMETER",T.QUOTED_PARAMETER="QUOTED_PARAMETER",T.NUMBERED_PARAMETER="NUMBERED_PARAMETER",T.POSITIONAL_PARAMETER="POSITIONAL_PARAMETER",T.CUSTOM_PARAMETER="CUSTOM_PARAMETER",T.DELIMITER="DELIMITER",T.EOF="EOF",T))(TA||{}),eA=T=>({type:"EOF",raw:"«EOF»",text:"«EOF»",start:T}),VE=eA(1/0),BE=T=>E=>E.type===T.type&&E.text===T.text,UE={ARRAY:BE({text:"ARRAY",type:"RESERVED_DATA_TYPE"}),BY:BE({text:"BY",type:"RESERVED_KEYWORD"}),SET:BE({text:"SET",type:"RESERVED_CLAUSE"}),STRUCT:BE({text:"STRUCT",type:"RESERVED_DATA_TYPE"}),WINDOW:BE({text:"WINDOW",type:"RESERVED_CLAUSE"}),VALUES:BE({text:"VALUES",type:"RESERVED_CLAUSE"})},RA=T=>T==="RESERVED_DATA_TYPE"||T==="RESERVED_KEYWORD"||T==="RESERVED_FUNCTION_NAME"||T==="RESERVED_PHRASE"||T==="RESERVED_CLAUSE"||T==="RESERVED_SELECT"||T==="RESERVED_SET_OPERATION"||T==="RESERVED_JOIN"||T==="ARRAY_KEYWORD"||T==="CASE"||T==="END"||T==="WHEN"||T==="ELSE"||T==="THEN"||T==="LIMIT"||T==="BETWEEN"||T==="AND"||T==="OR"||T==="XOR",uO=T=>T==="AND"||T==="OR"||T==="XOR",cO=["KEYS.NEW_KEYSET","KEYS.ADD_KEY_FROM_RAW_BYTES","AEAD.DECRYPT_BYTES","AEAD.DECRYPT_STRING","AEAD.ENCRYPT","KEYS.KEYSET_CHAIN","KEYS.KEYSET_FROM_JSON","KEYS.KEYSET_TO_JSON","KEYS.ROTATE_KEYSET","KEYS.KEYSET_LENGTH","ANY_VALUE","ARRAY_AGG","AVG","CORR","COUNT","COUNTIF","COVAR_POP","COVAR_SAMP","MAX","MIN","ST_CLUSTERDBSCAN","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","VAR_POP","VAR_SAMP","ANY_VALUE","ARRAY_AGG","ARRAY_CONCAT_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","COUNT","COUNTIF","LOGICAL_AND","LOGICAL_OR","MAX","MIN","STRING_AGG","SUM","APPROX_COUNT_DISTINCT","APPROX_QUANTILES","APPROX_TOP_COUNT","APPROX_TOP_SUM","ARRAY_CONCAT","ARRAY_LENGTH","ARRAY_TO_STRING","GENERATE_ARRAY","GENERATE_DATE_ARRAY","GENERATE_TIMESTAMP_ARRAY","ARRAY_REVERSE","OFFSET","SAFE_OFFSET","ORDINAL","SAFE_ORDINAL","BIT_COUNT","PARSE_BIGNUMERIC","PARSE_NUMERIC","SAFE_CAST","CURRENT_DATE","EXTRACT","DATE","DATE_ADD","DATE_SUB","DATE_DIFF","DATE_TRUNC","DATE_FROM_UNIX_DATE","FORMAT_DATE","LAST_DAY","PARSE_DATE","UNIX_DATE","CURRENT_DATETIME","DATETIME","EXTRACT","DATETIME_ADD","DATETIME_SUB","DATETIME_DIFF","DATETIME_TRUNC","FORMAT_DATETIME","LAST_DAY","PARSE_DATETIME","ERROR","EXTERNAL_QUERY","S2_CELLIDFROMPOINT","S2_COVERINGCELLIDS","ST_ANGLE","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_AZIMUTH","ST_BOUNDARY","ST_BOUNDINGBOX","ST_BUFFER","ST_BUFFERWITHTOLERANCE","ST_CENTROID","ST_CENTROID_AGG","ST_CLOSESTPOINT","ST_CLUSTERDBSCAN","ST_CONTAINS","ST_CONVEXHULL","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DUMP","ST_DWITHIN","ST_ENDPOINT","ST_EQUALS","ST_EXTENT","ST_EXTERIORRING","ST_GEOGFROM","ST_GEOGFROMGEOJSON","ST_GEOGFROMTEXT","ST_GEOGFROMWKB","ST_GEOGPOINT","ST_GEOGPOINTFROMGEOHASH","ST_GEOHASH","ST_GEOMETRYTYPE","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_INTERSECTSBOX","ST_ISCOLLECTION","ST_ISEMPTY","ST_LENGTH","ST_MAKELINE","ST_MAKEPOLYGON","ST_MAKEPOLYGONORIENTED","ST_MAXDISTANCE","ST_NPOINTS","ST_NUMGEOMETRIES","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SIMPLIFY","ST_SNAPTOGRID","ST_STARTPOINT","ST_TOUCHES","ST_UNION","ST_UNION_AGG","ST_WITHIN","ST_X","ST_Y","FARM_FINGERPRINT","MD5","SHA1","SHA256","SHA512","HLL_COUNT.INIT","HLL_COUNT.MERGE","HLL_COUNT.MERGE_PARTIAL","HLL_COUNT.EXTRACT","MAKE_INTERVAL","EXTRACT","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","JSON_EXTRACT","JSON_QUERY","JSON_EXTRACT_SCALAR","JSON_VALUE","JSON_EXTRACT_ARRAY","JSON_QUERY_ARRAY","JSON_EXTRACT_STRING_ARRAY","JSON_VALUE_ARRAY","TO_JSON_STRING","ABS","SIGN","IS_INF","IS_NAN","IEEE_DIVIDE","RAND","SQRT","POW","POWER","EXP","LN","LOG","LOG10","GREATEST","LEAST","DIV","SAFE_DIVIDE","SAFE_MULTIPLY","SAFE_NEGATE","SAFE_ADD","SAFE_SUBTRACT","MOD","ROUND","TRUNC","CEIL","CEILING","FLOOR","COS","COSH","ACOS","ACOSH","SIN","SINH","ASIN","ASINH","TAN","TANH","ATAN","ATANH","ATAN2","RANGE_BUCKET","FIRST_VALUE","LAST_VALUE","NTH_VALUE","LEAD","LAG","PERCENTILE_CONT","PERCENTILE_DISC","NET.IP_FROM_STRING","NET.SAFE_IP_FROM_STRING","NET.IP_TO_STRING","NET.IP_NET_MASK","NET.IP_TRUNC","NET.IPV4_FROM_INT64","NET.IPV4_TO_INT64","NET.HOST","NET.PUBLIC_SUFFIX","NET.REG_DOMAIN","RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","NTILE","ROW_NUMBER","SESSION_USER","CORR","COVAR_POP","COVAR_SAMP","STDDEV_POP","STDDEV_SAMP","STDDEV","VAR_POP","VAR_SAMP","VARIANCE","ASCII","BYTE_LENGTH","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CODE_POINTS_TO_BYTES","CODE_POINTS_TO_STRING","CONCAT","CONTAINS_SUBSTR","ENDS_WITH","FORMAT","FROM_BASE32","FROM_BASE64","FROM_HEX","INITCAP","INSTR","LEFT","LENGTH","LPAD","LOWER","LTRIM","NORMALIZE","NORMALIZE_AND_CASEFOLD","OCTET_LENGTH","REGEXP_CONTAINS","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","REPEAT","REVERSE","RIGHT","RPAD","RTRIM","SAFE_CONVERT_BYTES_TO_STRING","SOUNDEX","SPLIT","STARTS_WITH","STRPOS","SUBSTR","SUBSTRING","TO_BASE32","TO_BASE64","TO_CODE_POINTS","TO_HEX","TRANSLATE","TRIM","UNICODE","UPPER","CURRENT_TIME","TIME","EXTRACT","TIME_ADD","TIME_SUB","TIME_DIFF","TIME_TRUNC","FORMAT_TIME","PARSE_TIME","CURRENT_TIMESTAMP","EXTRACT","STRING","TIMESTAMP","TIMESTAMP_ADD","TIMESTAMP_SUB","TIMESTAMP_DIFF","TIMESTAMP_TRUNC","FORMAT_TIMESTAMP","PARSE_TIMESTAMP","TIMESTAMP_SECONDS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UNIX_SECONDS","UNIX_MILLIS","UNIX_MICROS","GENERATE_UUID","COALESCE","IF","IFNULL","NULLIF","AVG","BIT_AND","BIT_OR","BIT_XOR","CORR","COUNT","COVAR_POP","COVAR_SAMP","EXACT_COUNT_DISTINCT","FIRST","GROUP_CONCAT","GROUP_CONCAT_UNQUOTED","LAST","MAX","MIN","NEST","NTH","QUANTILES","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","TOP","UNIQUE","VARIANCE","VAR_POP","VAR_SAMP","BIT_COUNT","BOOLEAN","BYTES","CAST","FLOAT","HEX_STRING","INTEGER","STRING","COALESCE","GREATEST","IFNULL","IS_INF","IS_NAN","IS_EXPLICITLY_DEFINED","LEAST","NVL","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE","DATE_ADD","DATEDIFF","DAY","DAYOFWEEK","DAYOFYEAR","FORMAT_UTC_USEC","HOUR","MINUTE","MONTH","MSEC_TO_TIMESTAMP","NOW","PARSE_UTC_USEC","QUARTER","SEC_TO_TIMESTAMP","SECOND","STRFTIME_UTC_USEC","TIME","TIMESTAMP","TIMESTAMP_TO_MSEC","TIMESTAMP_TO_SEC","TIMESTAMP_TO_USEC","USEC_TO_TIMESTAMP","UTC_USEC_TO_DAY","UTC_USEC_TO_HOUR","UTC_USEC_TO_MONTH","UTC_USEC_TO_WEEK","UTC_USEC_TO_YEAR","WEEK","YEAR","FORMAT_IP","PARSE_IP","FORMAT_PACKED_IP","PARSE_PACKED_IP","JSON_EXTRACT","JSON_EXTRACT_SCALAR","ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","ATAN2","CEIL","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG2","LOG10","PI","POW","RADIANS","RAND","ROUND","SIN","SINH","SQRT","TAN","TANH","REGEXP_MATCH","REGEXP_EXTRACT","REGEXP_REPLACE","CONCAT","INSTR","LEFT","LENGTH","LOWER","LPAD","LTRIM","REPLACE","RIGHT","RPAD","RTRIM","SPLIT","SUBSTR","UPPER","TABLE_DATE_RANGE","TABLE_DATE_RANGE_STRICT","TABLE_QUERY","HOST","DOMAIN","TLD","AVG","COUNT","MAX","MIN","STDDEV","SUM","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","CURRENT_USER","EVERY","FROM_BASE64","HASH","FARM_FINGERPRINT","IF","POSITION","SHA1","SOME","TO_BASE64","BQ.JOBS.CANCEL","BQ.REFRESH_MATERIALIZED_VIEW","OPTIONS","PIVOT","UNPIVOT"],dO=["ALL","AND","ANY","AS","ASC","ASSERT_ROWS_MODIFIED","AT","BETWEEN","BY","CASE","CAST","COLLATE","CONTAINS","CREATE","CROSS","CUBE","CURRENT","DEFAULT","DEFINE","DESC","DISTINCT","ELSE","END","ENUM","ESCAPE","EXCEPT","EXCLUDE","EXISTS","EXTRACT","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","GROUP","GROUPING","GROUPS","HASH","HAVING","IF","IGNORE","IN","INNER","INTERSECT","INTO","IS","JOIN","LATERAL","LEFT","LIMIT","LOOKUP","MERGE","NATURAL","NEW","NO","NOT","NULL","NULLS","OF","ON","OR","ORDER","OUTER","OVER","PARTITION","PRECEDING","PROTO","RANGE","RECURSIVE","RESPECT","RIGHT","ROLLUP","ROWS","SELECT","SET","SOME","TABLE","TABLESAMPLE","THEN","TO","TREAT","TRUE","UNBOUNDED","UNION","UNNEST","USING","WHEN","WHERE","WINDOW","WITH","WITHIN","SAFE","LIKE","COPY","CLONE","IN","OUT","INOUT","RETURNS","LANGUAGE","CASCADE","RESTRICT","DETERMINISTIC"],GO=["ARRAY","BOOL","BYTES","DATE","DATETIME","GEOGRAPHY","INTERVAL","INT64","INT","SMALLINT","INTEGER","BIGINT","TINYINT","BYTEINT","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","FLOAT64","STRING","STRUCT","TIME","TIMEZONE"],pO=_(["SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]"]),HO=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","QUALIFY","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","OMIT RECORD IF","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]","UPDATE SET","CLUSTER BY","FOR SYSTEM_TIME AS OF","WITH CONNECTION","WITH PARTITION COLUMNS","REMOTE WITH CONNECTION"]),ge=_(["CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]"]),HT=_(["CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]","UPDATE","DELETE [FROM]","DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME TO","ALTER COLUMN [IF EXISTS]","SET DEFAULT COLLATE","SET OPTIONS","DROP NOT NULL","SET DATA TYPE","ALTER SCHEMA [IF EXISTS]","ALTER [MATERIALIZED] VIEW [IF EXISTS]","ALTER BI_CAPACITY","TRUNCATE TABLE","CREATE SCHEMA [IF NOT EXISTS]","DEFAULT COLLATE","CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]","CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]","GRANT TO","FILTER USING","CREATE CAPACITY","AS JSON","CREATE RESERVATION","CREATE ASSIGNMENT","CREATE SEARCH INDEX [IF NOT EXISTS]","DROP SCHEMA [IF EXISTS]","DROP [MATERIALIZED] VIEW [IF EXISTS]","DROP [TABLE] FUNCTION [IF EXISTS]","DROP PROCEDURE [IF EXISTS]","DROP ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","DROP CAPACITY [IF EXISTS]","DROP RESERVATION [IF EXISTS]","DROP ASSIGNMENT [IF EXISTS]","DROP SEARCH INDEX [IF EXISTS]","DROP [IF EXISTS]","GRANT","REVOKE","DECLARE","EXECUTE IMMEDIATE","LOOP","END LOOP","REPEAT","END REPEAT","WHILE","END WHILE","BREAK","LEAVE","CONTINUE","ITERATE","FOR","END FOR","BEGIN","BEGIN TRANSACTION","COMMIT TRANSACTION","ROLLBACK TRANSACTION","RAISE","RETURN","CALL","ASSERT","EXPORT DATA"]),BO=_(["UNION {ALL | DISTINCT}","EXCEPT DISTINCT","INTERSECT DISTINCT"]),mO=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),YO=_(["TABLESAMPLE SYSTEM","ANY TYPE","ALL COLUMNS","NOT DETERMINISTIC","{ROWS | RANGE} BETWEEN","IS [NOT] DISTINCT FROM"]),FO={name:"bigquery",tokenizerOptions:{reservedSelect:pO,reservedClauses:[...HO,...HT,...ge],reservedSetOperations:BO,reservedJoins:mO,reservedPhrases:YO,reservedKeywords:dO,reservedDataTypes:GO,reservedFunctionNames:cO,extraParens:["[]"],stringTypes:[{quote:'""".."""',prefixes:["R","B","RB","BR"]},{quote:"'''..'''",prefixes:["R","B","RB","BR"]},'""-bs',"''-bs",{quote:'""-raw',prefixes:["R","B","RB","BR"],requirePrefix:!0},{quote:"''-raw",prefixes:["R","B","RB","BR"],requirePrefix:!0}],identTypes:["``"],identChars:{dashes:!0},paramTypes:{positional:!0,named:["@"],quoted:["@"]},variableTypes:[{regex:String.raw`@@\w+`}],lineCommentTypes:["--","#"],operators:["&","|","^","~",">>","<<","||","=>"],postProcess:hO},formatOptions:{onelineClauses:[...ge,...HT],tabularOnelineClauses:HT}};function hO(T){return fO(VO(T))}function fO(T){let E=VE;return T.map(e=>e.text==="OFFSET"&&E.text==="["?(E=e,eE(z({},e),{type:"RESERVED_FUNCTION_NAME"})):(E=e,e))}function VO(T){var E;const e=[];for(let R=0;R<T.length;R++){const A=T[R];if((UE.ARRAY(A)||UE.STRUCT(A))&&((E=T[R+1])==null?void 0:E.text)==="<"){const S=vO(T,R+1),O=T.slice(R,S+1);e.push({type:"IDENTIFIER",raw:O.map(Xe("raw")).join(""),text:O.map(Xe("text")).join(""),start:A.start}),R=S}else e.push(A)}return e}var Xe=T=>E=>E.type==="IDENTIFIER"||E.type==="COMMA"?E[T]+" ":E[T];function vO(T,E){let e=0;for(let R=E;R<T.length;R++){const A=T[R];if(A.text==="<"?e++:A.text===">"?e--:A.text===">>"&&(e-=2),e===0)return R}return T.length-1}var yO=["ARRAY_AGG","AVG","CORRELATION","COUNT","COUNT_BIG","COVARIANCE","COVARIANCE_SAMP","CUME_DIST","GROUPING","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_ICPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_SAMP","SUM","VARIANCE","VARIANCE_SAMP","XMLAGG","XMLGROUP","ABS","ABSVAL","ACOS","ADD_DAYS","ADD_HOURS","ADD_MINUTES","ADD_MONTHS","ADD_SECONDS","ADD_YEARS","AGE","ARRAY_DELETE","ARRAY_FIRST","ARRAY_LAST","ARRAY_NEXT","ARRAY_PRIOR","ASCII","ASCII_STR","ASIN","ATAN","ATAN2","ATANH","BITAND","BITANDNOT","BITOR","BITXOR","BITNOT","BPCHAR","BSON_TO_JSON","BTRIM","CARDINALITY","CEILING","CEIL","CHARACTER_LENGTH","CHR","COALESCE","COLLATION_KEY","COLLATION_KEY_BIT","COMPARE_DECFLOAT","CONCAT","COS","COSH","COT","CURSOR_ROWCOUNT","DATAPARTITIONNUM","DATE_PART","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFWEEK_ISO","DAYOFYEAR","DAYS","DAYS_BETWEEN","DAYS_TO_END_OF_MONTH","DBPARTITIONNUM","DECFLOAT","DECFLOAT_FORMAT","DECODE","DECRYPT_BIN","DECRYPT_CHAR","DEGREES","DEREF","DIFFERENCE","DIGITS","DOUBLE_PRECISION","EMPTY_BLOB","EMPTY_CLOB","EMPTY_DBCLOB","EMPTY_NCLOB","ENCRYPT","EVENT_MON_STATE","EXP","EXTRACT","FIRST_DAY","FLOOR","FROM_UTC_TIMESTAMP","GENERATE_UNIQUE","GETHINT","GREATEST","HASH","HASH4","HASH8","HASHEDVALUE","HEX","HEXTORAW","HOUR","HOURS_BETWEEN","IDENTITY_VAL_LOCAL","IFNULL","INITCAP","INSERT","INSTR","INSTR2","INSTR4","INSTRB","INTNAND","INTNOR","INTNXOR","INTNNOT","ISNULL","JSON_ARRAY","JSON_OBJECT","JSON_QUERY","JSON_TO_BSON","JSON_VALUE","JULIAN_DAY","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LENGTH2","LENGTH4","LENGTHB","LN","LOCATE","LOCATE_IN_STRING","LOG10","LONG_VARCHAR","LONG_VARGRAPHIC","LOWER","LPAD","LTRIM","MAX","MAX_CARDINALITY","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MINUTES_BETWEEN","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","MULTIPLY_ALT","NEXT_DAY","NEXT_MONTH","NEXT_QUARTER","NEXT_WEEK","NEXT_YEAR","NORMALIZE_DECFLOAT","NOW","NULLIF","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARAMETER","POSITION","POSSTR","POW","POWER","QUANTIZE","QUARTER","QUOTE_IDENT","QUOTE_LITERAL","RADIANS","RAISE_ERROR","RAND","RANDOM","RAWTOHEX","REC2XML","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_MATCH_COUNT","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RID_BIT","RIGHT","ROUND","ROUND_TIMESTAMP","RPAD","RTRIM","SECLABEL","SECLABEL_BY_NAME","SECLABEL_TO_CHAR","SECOND","SECONDS_BETWEEN","SIGN","SIN","SINH","SOUNDEX","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTR2","SUBSTR4","SUBSTRB","SUBSTRING","TABLE_NAME","TABLE_SCHEMA","TAN","TANH","THIS_MONTH","THIS_QUARTER","THIS_WEEK","THIS_YEAR","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMPDIFF","TIMEZONE","TO_CHAR","TO_CLOB","TO_DATE","TO_HEX","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_UTC_TIMESTAMP","TOTALORDER","TRANSLATE","TRIM","TRIM_ARRAY","TRUNC_TIMESTAMP","TRUNCATE","TRUNC","TYPE_ID","TYPE_NAME","TYPE_SCHEMA","UCASE","UNICODE_STR","UPPER","VALUE","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT","VARCHAR_FORMAT_BIT","VERIFY_GROUP_FOR_USER","VERIFY_ROLE_FOR_USER","VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER","WEEK","WEEK_ISO","WEEKS_BETWEEN","WIDTH_BUCKET","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLQUERY","XMLROW","XMLSERIALIZE","XMLTEXT","XMLVALIDATE","XMLXSROBJECTID","XSLTRANSFORM","YEAR","YEARS_BETWEEN","YMD_BETWEEN","BASE_TABLE","JSON_TABLE","UNNEST","XMLTABLE","RANK","DENSE_RANK","NTILE","LAG","LEAD","ROW_NUMBER","FIRST_VALUE","LAST_VALUE","NTH_VALUE","RATIO_TO_REPORT","CAST"],WO=["ACTIVATE","ADD","AFTER","ALIAS","ALL","ALLOCATE","ALLOW","ALTER","AND","ANY","AS","ASENSITIVE","ASSOCIATE","ASUTIME","AT","ATTRIBUTES","AUDIT","AUTHORIZATION","AUX","AUXILIARY","BEFORE","BEGIN","BETWEEN","BINARY","BUFFERPOOL","BY","CACHE","CALL","CALLED","CAPTURE","CARDINALITY","CASCADED","CASE","CAST","CHECK","CLONE","CLOSE","CLUSTER","COLLECTION","COLLID","COLUMN","COMMENT","COMMIT","CONCAT","CONDITION","CONNECT","CONNECTION","CONSTRAINT","CONTAINS","CONTINUE","COUNT","COUNT_BIG","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_LC_CTYPE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_SERVER","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DATAPARTITIONNAME","DATAPARTITIONNUM","DAY","DAYS","DB2GENERAL","DB2GENRL","DB2SQL","DBINFO","DBPARTITIONNAME","DBPARTITIONNUM","DEALLOCATE","DECLARE","DEFAULT","DEFAULTS","DEFINITION","DELETE","DENSERANK","DENSE_RANK","DESCRIBE","DESCRIPTOR","DETERMINISTIC","DIAGNOSTICS","DISABLE","DISALLOW","DISCONNECT","DISTINCT","DO","DOCUMENT","DROP","DSSIZE","DYNAMIC","EACH","EDITPROC","ELSE","ELSEIF","ENABLE","ENCODING","ENCRYPTION","END","END-EXEC","ENDING","ERASE","ESCAPE","EVERY","EXCEPT","EXCEPTION","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXPLAIN","EXTENDED","EXTERNAL","EXTRACT","FENCED","FETCH","FIELDPROC","FILE","FINAL","FIRST1","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GENERAL","GENERATED","GET","GLOBAL","GO","GOTO","GRANT","GRAPHIC","GROUP","HANDLER","HASH","HASHED_VALUE","HAVING","HINT","HOLD","HOUR","HOURS","IDENTITY","IF","IMMEDIATE","IMPORT","IN","INCLUDING","INCLUSIVE","INCREMENT","INDEX","INDICATOR","INDICATORS","INF","INFINITY","INHERIT","INNER","INOUT","INSENSITIVE","INSERT","INTEGRITY","INTERSECT","INTO","IS","ISNULL","ISOBID","ISOLATION","ITERATE","JAR","JAVA","JOIN","KEEP","KEY","LABEL","LANGUAGE","LAST3","LATERAL","LC_CTYPE","LEAVE","LEFT","LIKE","LIMIT","LINKTYPE","LOCAL","LOCALDATE","LOCALE","LOCALTIME","LOCALTIMESTAMP","LOCATOR","LOCATORS","LOCK","LOCKMAX","LOCKSIZE","LOOP","MAINTAINED","MATERIALIZED","MAXVALUE","MICROSECOND","MICROSECONDS","MINUTE","MINUTES","MINVALUE","MODE","MODIFIES","MONTH","MONTHS","NAN","NEW","NEW_TABLE","NEXTVAL","NO","NOCACHE","NOCYCLE","NODENAME","NODENUMBER","NOMAXVALUE","NOMINVALUE","NONE","NOORDER","NORMALIZED","NOT2","NOTNULL","NULL","NULLS","NUMPARTS","OBID","OF","OFF","OFFSET","OLD","OLD_TABLE","ON","OPEN","OPTIMIZATION","OPTIMIZE","OPTION","OR","ORDER","OUT","OUTER","OVER","OVERRIDING","PACKAGE","PADDED","PAGESIZE","PARAMETER","PART","PARTITION","PARTITIONED","PARTITIONING","PARTITIONS","PASSWORD","PATH","PERCENT","PIECESIZE","PLAN","POSITION","PRECISION","PREPARE","PREVVAL","PRIMARY","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PSID","PUBLIC","QUERY","QUERYNO","RANGE","RANK","READ","READS","RECOVERY","REFERENCES","REFERENCING","REFRESH","RELEASE","RENAME","REPEAT","RESET","RESIGNAL","RESTART","RESTRICT","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNS","REVOKE","RIGHT","ROLE","ROLLBACK","ROUND_CEILING","ROUND_DOWN","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_UP","ROUND_UP","ROUTINE","ROW","ROWNUMBER","ROWS","ROWSET","ROW_NUMBER","RRN","RUN","SAVEPOINT","SCHEMA","SCRATCHPAD","SCROLL","SEARCH","SECOND","SECONDS","SECQTY","SECURITY","SELECT","SENSITIVE","SEQUENCE","SESSION","SESSION_USER","SET","SIGNAL","SIMPLE","SNAN","SOME","SOURCE","SPECIFIC","SQL","SQLID","STACKED","STANDARD","START","STARTING","STATEMENT","STATIC","STATMENT","STAY","STOGROUP","STORES","STYLE","SUBSTRING","SUMMARY","SYNONYM","SYSFUN","SYSIBM","SYSPROC","SYSTEM","SYSTEM_USER","TABLE","TABLESPACE","THEN","TO","TRANSACTION","TRIGGER","TRIM","TRUNCATE","TYPE","UNDO","UNION","UNIQUE","UNTIL","UPDATE","USAGE","USER","USING","VALIDPROC","VALUE","VALUES","VARIABLE","VARIANT","VCAT","VERSION","VIEW","VOLATILE","VOLUMES","WHEN","WHENEVER","WHERE","WHILE","WITH","WITHOUT","WLM","WRITE","XMLELEMENT","XMLEXISTS","XMLNAMESPACES","YEAR","YEARS"],gO=["ARRAY","BIGINT","BINARY","BLOB","BOOLEAN","CCSID","CHAR","CHARACTER","CLOB","DATE","DATETIME","DBCLOB","DEC","DECIMAL","DOUBLE","DOUBLE PRECISION","FLOAT","FLOAT4","FLOAT8","GRAPHIC","INT","INT2","INT4","INT8","INTEGER","INTERVAL","LONG VARCHAR","LONG VARGRAPHIC","NCHAR","NCHR","NCLOB","NVARCHAR","NUMERIC","SMALLINT","REAL","TIME","TIMESTAMP","VARBINARY","VARCHAR","VARGRAPHIC"],XO=_(["SELECT [ALL | DISTINCT]"]),bO=_(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY [INPUT SEQUENCE]","LIMIT","OFFSET","FETCH NEXT","FOR UPDATE [OF]","FOR {READ | FETCH} ONLY","FOR {RR | CS | UR | RS} [USE AND KEEP {SHARE | UPDATE | EXCLUSIVE} LOCKS]","WAIT FOR OUTCOME","SKIP LOCKED DATA","INTO","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT"]),be=_(["CREATE [GLOBAL TEMPORARY | EXTERNAL] TABLE [IF NOT EXISTS]"]),BT=_(["CREATE [OR REPLACE] VIEW","UPDATE","WHERE CURRENT OF","WITH {RR | RS | CS | UR}","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME COLUMN","ALTER [COLUMN]","SET DATA TYPE","SET NOT NULL","DROP {DEFAULT | GENERATED | NOT NULL}","TRUNCATE [TABLE]","ALLOCATE","ALTER AUDIT POLICY","ALTER BUFFERPOOL","ALTER DATABASE PARTITION GROUP","ALTER DATABASE","ALTER EVENT MONITOR","ALTER FUNCTION","ALTER HISTOGRAM TEMPLATE","ALTER INDEX","ALTER MASK","ALTER METHOD","ALTER MODULE","ALTER NICKNAME","ALTER PACKAGE","ALTER PERMISSION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SECURITY LABEL COMPONENT","ALTER SECURITY POLICY","ALTER SEQUENCE","ALTER SERVER","ALTER SERVICE CLASS","ALTER STOGROUP","ALTER TABLESPACE","ALTER THRESHOLD","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER TYPE","ALTER USAGE LIST","ALTER USER MAPPING","ALTER VIEW","ALTER WORK ACTION SET","ALTER WORK CLASS SET","ALTER WORKLOAD","ALTER WRAPPER","ALTER XSROBJECT","ALTER STOGROUP","ALTER TABLESPACE","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER VIEW","ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}","AUDIT","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT ON","COMMIT [WORK]","CONNECT","CREATE [OR REPLACE] [PUBLIC] ALIAS","CREATE AUDIT POLICY","CREATE BUFFERPOOL","CREATE DATABASE PARTITION GROUP","CREATE EVENT MONITOR","CREATE [OR REPLACE] FUNCTION","CREATE FUNCTION MAPPING","CREATE HISTOGRAM TEMPLATE","CREATE [UNIQUE] INDEX","CREATE INDEX EXTENSION","CREATE [OR REPLACE] MASK","CREATE [SPECIFIC] METHOD","CREATE [OR REPLACE] MODULE","CREATE [OR REPLACE] NICKNAME","CREATE [OR REPLACE] PERMISSION","CREATE [OR REPLACE] PROCEDURE","CREATE ROLE","CREATE SCHEMA","CREATE SECURITY LABEL [COMPONENT]","CREATE SECURITY POLICY","CREATE [OR REPLACE] SEQUENCE","CREATE SERVICE CLASS","CREATE SERVER","CREATE STOGROUP","CREATE SYNONYM","CREATE [LARGE | REGULAR | {SYSTEM | USER} TEMPORARY] TABLESPACE","CREATE THRESHOLD","CREATE {TRANSFORM | TRANSFORMS} FOR","CREATE [OR REPLACE] TRIGGER","CREATE TRUSTED CONTEXT","CREATE [OR REPLACE] TYPE","CREATE TYPE MAPPING","CREATE USAGE LIST","CREATE USER MAPPING FOR","CREATE [OR REPLACE] VARIABLE","CREATE WORK ACTION SET","CREATE WORK CLASS SET","CREATE WORKLOAD","CREATE WRAPPER","DECLARE","DECLARE GLOBAL TEMPORARY TABLE","DESCRIBE [INPUT | OUTPUT]","DISCONNECT","DROP [PUBLIC] ALIAS","DROP AUDIT POLICY","DROP BUFFERPOOL","DROP DATABASE PARTITION GROUP","DROP EVENT MONITOR","DROP [SPECIFIC] FUNCTION","DROP FUNCTION MAPPING","DROP HISTOGRAM TEMPLATE","DROP INDEX [EXTENSION]","DROP MASK","DROP [SPECIFIC] METHOD","DROP MODULE","DROP NICKNAME","DROP PACKAGE","DROP PERMISSION","DROP [SPECIFIC] PROCEDURE","DROP ROLE","DROP SCHEMA","DROP SECURITY LABEL [COMPONENT]","DROP SECURITY POLICY","DROP SEQUENCE","DROP SERVER","DROP SERVICE CLASS","DROP STOGROUP","DROP TABLE HIERARCHY","DROP {TABLESPACE | TABLESPACES}","DROP {TRANSFORM | TRANSFORMS}","DROP THRESHOLD","DROP TRIGGER","DROP TRUSTED CONTEXT","DROP TYPE [MAPPING]","DROP USAGE LIST","DROP USER MAPPING FOR","DROP VARIABLE","DROP VIEW [HIERARCHY]","DROP WORK {ACTION | CLASS} SET","DROP WORKLOAD","DROP WRAPPER","DROP XSROBJECT","END DECLARE SECTION","EXECUTE [IMMEDIATE]","EXPLAIN {PLAN [SECTION] | ALL}","FETCH [FROM]","FLUSH {BUFFERPOOL | BUFFERPOOLS} ALL","FLUSH EVENT MONITOR","FLUSH FEDERATED CACHE","FLUSH OPTIMIZATION PROFILE CACHE","FLUSH PACKAGE CACHE [DYNAMIC]","FLUSH AUTHENTICATION CACHE [FOR ALL]","FREE LOCATOR","GET DIAGNOSTICS","GOTO","GRANT","INCLUDE","ITERATE","LEAVE","LOCK TABLE","LOOP","OPEN","PIPE","PREPARE","REFRESH TABLE","RELEASE","RELEASE [TO] SAVEPOINT","RENAME [TABLE | INDEX | STOGROUP | TABLESPACE]","REPEAT","RESIGNAL","RETURN","REVOKE","ROLLBACK [WORK] [TO SAVEPOINT]","SAVEPOINT","SET COMPILATION ENVIRONMENT","SET CONNECTION","SET CURRENT","SET ENCRYPTION PASSWORD","SET EVENT MONITOR STATE","SET INTEGRITY","SET PASSTHRU","SET PATH","SET ROLE","SET SCHEMA","SET SERVER OPTION","SET {SESSION AUTHORIZATION | SESSION_USER}","SET USAGE LIST","SIGNAL","TRANSFER OWNERSHIP OF","WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}","WHILE"]),KO=_(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),xO=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),wO=_(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]),JO={name:"db2",tokenizerOptions:{reservedSelect:XO,reservedClauses:[...bO,...be,...BT],reservedSetOperations:KO,reservedJoins:xO,reservedPhrases:wO,reservedKeywords:WO,reservedDataTypes:gO,reservedFunctionNames:yO,extraParens:["[]"],stringTypes:[{quote:"''-qq",prefixes:["G","N","U&"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],identChars:{first:"@#$",rest:"@#$"},paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","%","|","&","^","~","¬=","¬>","¬<","!>","!<","^=","^>","^<","||","->","=>"]},formatOptions:{onelineClauses:[...be,...BT],tabularOnelineClauses:BT}},$O=["ARRAY_AGG","AVG","CORR","CORRELATION","COUNT","COUNT_BIG","COVAR_POP","COVARIANCE","COVAR","COVAR_SAMP","COVARIANCE_SAMP","EVERY","GROUPING","JSON_ARRAYAGG","JSON_OBJECTAGG","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","SOME","STDDEV_POP","STDDEV","STDDEV_SAMP","SUM","VAR_POP","VARIANCE","VAR","VAR_SAMP","VARIANCE_SAMP","XMLAGG","XMLGROUP","ABS","ABSVAL","ACOS","ADD_DAYS","ADD_HOURS","ADD_MINUTES","ADD_MONTHS","ADD_SECONDS","ADD_YEARS","ANTILOG","ARRAY_MAX_CARDINALITY","ARRAY_TRIM","ASCII","ASIN","ATAN","ATAN2","ATANH","BASE64_DECODE","BASE64_ENCODE","BIT_LENGTH","BITAND","BITANDNOT","BITNOT","BITOR","BITXOR","BSON_TO_JSON","CARDINALITY","CEIL","CEILING","CHAR_LENGTH","CHARACTER_LENGTH","CHR","COALESCE","COMPARE_DECFLOAT","CONCAT","CONTAINS","COS","COSH","COT","CURDATE","CURTIME","DATABASE","DATAPARTITIONNAME","DATAPARTITIONNUM","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK_ISO","DAYOFWEEK","DAYOFYEAR","DAYS","DBPARTITIONNAME","DBPARTITIONNUM","DECFLOAT_FORMAT","DECFLOAT_SORTKEY","DECRYPT_BINARY","DECRYPT_BIT","DECRYPT_CHAR","DECRYPT_DB","DEGREES","DIFFERENCE","DIGITS","DLCOMMENT","DLLINKTYPE","DLURLCOMPLETE","DLURLPATH","DLURLPATHONLY","DLURLSCHEME","DLURLSERVER","DLVALUE","DOUBLE_PRECISION","DOUBLE","ENCRPYT","ENCRYPT_AES","ENCRYPT_AES256","ENCRYPT_RC2","ENCRYPT_TDES","EXP","EXTRACT","FIRST_DAY","FLOOR","GENERATE_UNIQUE","GET_BLOB_FROM_FILE","GET_CLOB_FROM_FILE","GET_DBCLOB_FROM_FILE","GET_XML_FILE","GETHINT","GREATEST","HASH_MD5","HASH_ROW","HASH_SHA1","HASH_SHA256","HASH_SHA512","HASH_VALUES","HASHED_VALUE","HEX","HEXTORAW","HOUR","HTML_ENTITY_DECODE","HTML_ENTITY_ENCODE","HTTP_DELETE_BLOB","HTTP_DELETE","HTTP_GET_BLOB","HTTP_GET","HTTP_PATCH_BLOB","HTTP_PATCH","HTTP_POST_BLOB","HTTP_POST","HTTP_PUT_BLOB","HTTP_PUT","IDENTITY_VAL_LOCAL","IFNULL","INSERT","INSTR","INTERPRET","ISFALSE","ISNOTFALSE","ISNOTTRUE","ISTRUE","JSON_ARRAY","JSON_OBJECT","JSON_QUERY","JSON_TO_BSON","JSON_UPDATE","JSON_VALUE","JULIAN_DAY","LAND","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LN","LNOT","LOCATE_IN_STRING","LOCATE","LOG10","LOR","LOWER","LPAD","LTRIM","MAX_CARDINALITY","MAX","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","MQREAD","MQREADCLOB","MQRECEIVE","MQRECEIVECLOB","MQSEND","MULTIPLY_ALT","NEXT_DAY","NORMALIZE_DECFLOAT","NOW","NULLIF","NVL","OCTET_LENGTH","OVERLAY","PI","POSITION","POSSTR","POW","POWER","QUANTIZE","QUARTER","RADIANS","RAISE_ERROR","RANDOM","RAND","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RIGHT","ROUND_TIMESTAMP","ROUND","RPAD","RRN","RTRIM","SCORE","SECOND","SIGN","SIN","SINH","SOUNDEX","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTRING","TABLE_NAME","TABLE_SCHEMA","TAN","TANH","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMPDIFF_BIG","TIMESTAMPDIFF","TO_CHAR","TO_CLOB","TO_DATE","TO_NUMBER","TO_TIMESTAMP","TOTALORDER","TRANSLATE","TRIM_ARRAY","TRIM","TRUNC_TIMESTAMP","TRUNC","TRUNCATE","UCASE","UPPER","URL_DECODE","URL_ENCODE","VALUE","VARBINARY_FORMAT","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT_BINARY","VARCHAR_FORMAT","VERIFY_GROUP_FOR_USER","WEEK_ISO","WEEK","WRAP","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROW","XMLSERIALIZE","XMLTEXT","XMLVALIDATE","XOR","XSLTRANSFORM","YEAR","ZONED","BASE_TABLE","HTTP_DELETE_BLOB_VERBOSE","HTTP_DELETE_VERBOSE","HTTP_GET_BLOB_VERBOSE","HTTP_GET_VERBOSE","HTTP_PATCH_BLOB_VERBOSE","HTTP_PATCH_VERBOSE","HTTP_POST_BLOB_VERBOSE","HTTP_POST_VERBOSE","HTTP_PUT_BLOB_VERBOSE","HTTP_PUT_VERBOSE","JSON_TABLE","MQREADALL","MQREADALLCLOB","MQRECEIVEALL","MQRECEIVEALLCLOB","XMLTABLE","UNPACK","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","RATIO_TO_REPORT","ROW_NUMBER","CAST"],kO=["ABSENT","ACCORDING","ACCTNG","ACTION","ACTIVATE","ADD","ALIAS","ALL","ALLOCATE","ALLOW","ALTER","AND","ANY","APPEND","APPLNAME","ARRAY","ARRAY_AGG","ARRAY_TRIM","AS","ASC","ASENSITIVE","ASSOCIATE","ATOMIC","ATTACH","ATTRIBUTES","AUTHORIZATION","AUTONOMOUS","BEFORE","BEGIN","BETWEEN","BIND","BSON","BUFFERPOOL","BY","CACHE","CALL","CALLED","CARDINALITY","CASE","CAST","CHECK","CL","CLOSE","CLUSTER","COLLECT","COLLECTION","COLUMN","COMMENT","COMMIT","COMPACT","COMPARISONS","COMPRESS","CONCAT","CONCURRENT","CONDITION","CONNECT","CONNECT_BY_ROOT","CONNECTION","CONSTANT","CONSTRAINT","CONTAINS","CONTENT","CONTINUE","COPY","COUNT","COUNT_BIG","CREATE","CREATEIN","CROSS","CUBE","CUME_DIST","CURRENT","CURRENT_DATE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_SERVER","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","CURSOR","CYCLE","DATABASE","DATAPARTITIONNAME","DATAPARTITIONNUM","DAY","DAYS","DB2GENERAL","DB2GENRL","DB2SQL","DBINFO","DBPARTITIONNAME","DBPARTITIONNUM","DEACTIVATE","DEALLOCATE","DECLARE","DEFAULT","DEFAULTS","DEFER","DEFINE","DEFINITION","DELETE","DELETING","DENSE_RANK","DENSERANK","DESC","DESCRIBE","DESCRIPTOR","DETACH","DETERMINISTIC","DIAGNOSTICS","DISABLE","DISALLOW","DISCONNECT","DISTINCT","DO","DOCUMENT","DROP","DYNAMIC","EACH","ELSE","ELSEIF","EMPTY","ENABLE","ENCODING","ENCRYPTION","END","END-EXEC","ENDING","ENFORCED","ERROR","ESCAPE","EVERY","EXCEPT","EXCEPTION","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTEND","EXTERNAL","EXTRACT","FALSE","FENCED","FETCH","FIELDPROC","FILE","FINAL","FIRST_VALUE","FOR","FOREIGN","FORMAT","FREE","FREEPAGE","FROM","FULL","FUNCTION","GBPCACHE","GENERAL","GENERATED","GET","GLOBAL","GO","GOTO","GRANT","GROUP","HANDLER","HASH","HASH_ROW","HASHED_VALUE","HAVING","HINT","HOLD","HOUR","HOURS","IDENTITY","IF","IGNORE","IMMEDIATE","IMPLICITLY","IN","INCLUDE","INCLUDING","INCLUSIVE","INCREMENT","INDEX","INDEXBP","INDICATOR","INF","INFINITY","INHERIT","INLINE","INNER","INOUT","INSENSITIVE","INSERT","INSERTING","INTEGRITY","INTERPRET","INTERSECT","INTO","IS","ISNULL","ISOLATION","ITERATE","JAVA","JOIN","JSON","JSON_ARRAY","JSON_ARRAYAGG","JSON_EXISTS","JSON_OBJECT","JSON_OBJECTAGG","JSON_QUERY","JSON_TABLE","JSON_VALUE","KEEP","KEY","KEYS","LABEL","LAG","LANGUAGE","LAST_VALUE","LATERAL","LEAD","LEAVE","LEFT","LEVEL2","LIKE","LIMIT","LINKTYPE","LISTAGG","LOCAL","LOCALDATE","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCATOR","LOCK","LOCKSIZE","LOG","LOGGED","LOOP","MAINTAINED","MASK","MATCHED","MATERIALIZED","MAXVALUE","MERGE","MICROSECOND","MICROSECONDS","MINPCTUSED","MINUTE","MINUTES","MINVALUE","MIRROR","MIXED","MODE","MODIFIES","MONTH","MONTHS","NAMESPACE","NAN","NATIONAL","NCHAR","NCLOB","NESTED","NEW","NEW_TABLE","NEXTVAL","NO","NOCACHE","NOCYCLE","NODENAME","NODENUMBER","NOMAXVALUE","NOMINVALUE","NONE","NOORDER","NORMALIZED","NOT","NOTNULL","NTH_VALUE","NTILE","NULL","NULLS","NVARCHAR","OBID","OBJECT","OF","OFF","OFFSET","OLD","OLD_TABLE","OMIT","ON","ONLY","OPEN","OPTIMIZE","OPTION","OR","ORDER","ORDINALITY","ORGANIZE","OUT","OUTER","OVER","OVERLAY","OVERRIDING","PACKAGE","PADDED","PAGE","PAGESIZE","PARAMETER","PART","PARTITION","PARTITIONED","PARTITIONING","PARTITIONS","PASSING","PASSWORD","PATH","PCTFREE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PERIOD","PERMISSION","PIECESIZE","PIPE","PLAN","POSITION","PREPARE","PREVVAL","PRIMARY","PRIOR","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PROGRAMID","QUERY","RANGE","RANK","RATIO_TO_REPORT","RCDFMT","READ","READS","RECOVERY","REFERENCES","REFERENCING","REFRESH","REGEXP_LIKE","RELEASE","RENAME","REPEAT","RESET","RESIGNAL","RESTART","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNING","RETURNS","REVOKE","RID","RIGHT","ROLLBACK","ROLLUP","ROUTINE","ROW","ROW_NUMBER","ROWNUMBER","ROWS","RRN","RUN","SAVEPOINT","SBCS","SCALAR","SCHEMA","SCRATCHPAD","SCROLL","SEARCH","SECOND","SECONDS","SECQTY","SECURED","SELECT","SENSITIVE","SEQUENCE","SESSION","SESSION_USER","SET","SIGNAL","SIMPLE","SKIP","SNAN","SOME","SOURCE","SPECIFIC","SQL","SQLID","SQLIND_DEFAULT","SQLIND_UNASSIGNED","STACKED","START","STARTING","STATEMENT","STATIC","STOGROUP","SUBSTRING","SUMMARY","SYNONYM","SYSTEM_TIME","SYSTEM_USER","TABLE","TABLESPACE","TABLESPACES","TAG","THEN","THREADSAFE","TO","TRANSACTION","TRANSFER","TRIGGER","TRIM","TRIM_ARRAY","TRUE","TRUNCATE","TRY_CAST","TYPE","UNDO","UNION","UNIQUE","UNIT","UNKNOWN","UNNEST","UNTIL","UPDATE","UPDATING","URI","USAGE","USE","USER","USERID","USING","VALUE","VALUES","VARIABLE","VARIANT","VCAT","VERSION","VERSIONING","VIEW","VOLATILE","WAIT","WHEN","WHENEVER","WHERE","WHILE","WITH","WITHIN","WITHOUT","WRAPPED","WRAPPER","WRITE","WRKSTNNAME","XMLAGG","XMLATTRIBUTES","XMLCAST","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLGROUP","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROW","XMLSERIALIZE","XMLTABLE","XMLTEXT","XMLVALIDATE","XSLTRANSFORM","XSROBJECT","YEAR","YEARS","YES","ZONE"],QO=["ARRAY","BIGINT","BINARY","BIT","BLOB","BOOLEAN","CCSID","CHAR","CHARACTER","CLOB","DATA","DATALINK","DATE","DBCLOB","DECFLOAT","DECIMAL","DEC","DOUBLE","DOUBLE PRECISION","FLOAT","GRAPHIC","INT","INTEGER","LONG","NUMERIC","REAL","ROWID","SMALLINT","TIME","TIMESTAMP","VARBINARY","VARCHAR","VARGRAPHIC","XML"],qO=_(["SELECT [ALL | DISTINCT]"]),ZO=_(["WITH [RECURSIVE]","INTO","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY [INPUT SEQUENCE]","LIMIT","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE [OF]","FOR READ ONLY","OPTIMIZE FOR","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","DELETE","INSERT","FOR SYSTEM NAME"]),Ke=_(["CREATE [OR REPLACE] TABLE"]),mT=_(["CREATE [OR REPLACE] [RECURSIVE] VIEW","UPDATE","WHERE CURRENT OF","WITH {NC | RR | RS | CS | UR}","DELETE FROM","DROP TABLE","ALTER TABLE","ADD [COLUMN]","ALTER [COLUMN]","DROP [COLUMN]","SET DATA TYPE","SET {GENERATED ALWAYS | GENERATED BY DEFAULT}","SET NOT NULL","SET {NOT HIDDEN | IMPLICITLY HIDDEN}","SET FIELDPROC","DROP {DEFAULT | NOT NULL | GENERATED | IDENTITY | ROW CHANGE TIMESTAMP | FIELDPROC}","TRUNCATE [TABLE]","SET [CURRENT] SCHEMA","SET CURRENT_SCHEMA","ALLOCATE CURSOR","ALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL] SQL","ALTER [SPECIFIC] {FUNCTION | PROCEDURE}","ALTER {MASK | PERMISSION | SEQUENCE | TRIGGER}","ASSOCIATE [RESULT SET] {LOCATOR | LOCATORS}","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PARAMETER | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}","COMMENT ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}","COMMENT ON PARAMETER SPECIFIC {FUNCTION | PROCEDURE | ROUTINE}","COMMENT ON [TABLE FUNCTION] RETURN COLUMN","COMMENT ON [TABLE FUNCTION] RETURN COLUMN SPECIFIC [PROCEDURE | ROUTINE]","COMMIT [WORK] [HOLD]","CONNECT [TO | RESET] USER","CREATE [OR REPLACE] {ALIAS | FUNCTION | MASK | PERMISSION | PROCEDURE | SEQUENCE | TRIGGER | VARIABLE}","CREATE [ENCODED VECTOR] INDEX","CREATE UNIQUE [WHERE NOT NULL] INDEX","CREATE SCHEMA","CREATE TYPE","DEALLOCATE [SQL] DESCRIPTOR [LOCAL | GLOBAL]","DECLARE CURSOR","DECLARE GLOBAL TEMPORARY TABLE","DECLARE","DESCRIBE CURSOR","DESCRIBE INPUT","DESCRIBE [OUTPUT]","DESCRIBE {PROCEDURE | ROUTINE}","DESCRIBE TABLE","DISCONNECT ALL [SQL]","DISCONNECT [CURRENT]","DROP {ALIAS | INDEX | MASK | PACKAGE | PERMISSION | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT} [IF EXISTS]","DROP [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE} [IF EXISTS]","END DECLARE SECTION","EXECUTE [IMMEDIATE]","FREE LOCATOR","GET [SQL] DESCRIPTOR [LOCAL | GLOBAL]","GET [CURRENT | STACKED] DIAGNOSTICS","GRANT {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}","HOLD LOCATOR","INCLUDE","LABEL ON {ALIAS | COLUMN | CONSTRAINT | INDEX | MASK | PACKAGE | PERMISSION | SEQUENCE | TABLE | TRIGGER | VARIABLE | XSROBJECT}","LABEL ON [SPECIFIC] {FUNCTION | PROCEDURE | ROUTINE}","LOCK TABLE","OPEN","PREPARE","REFRESH TABLE","RELEASE","RELEASE [TO] SAVEPOINT","RENAME [TABLE | INDEX] TO","REVOKE {ALL [PRIVILEGES] | ALTER | EXECUTE} ON {FUNCTION | PROCEDURE | ROUTINE | PACKAGE | SCHEMA | SEQUENCE | TABLE | TYPE | VARIABLE | XSROBJECT}","ROLLBACK [WORK] [HOLD | TO SAVEPOINT]","SAVEPOINT","SET CONNECTION","SET CURRENT {DEBUG MODE | DECFLOAT ROUNDING MODE | DEGREE | IMPLICIT XMLPARSE OPTION | TEMPORAL SYSTEM_TIME}","SET [SQL] DESCRIPTOR [LOCAL | GLOBAL]","SET ENCRYPTION PASSWORD","SET OPTION","SET {[CURRENT [FUNCTION]] PATH | CURRENT_PATH}","SET RESULT SETS [WITH RETURN [TO CALLER | TO CLIENT]]","SET SESSION AUTHORIZATION","SET SESSION_USER","SET TRANSACTION","SIGNAL SQLSTATE [VALUE]","TAG","TRANSFER OWNERSHIP OF","WHENEVER {NOT FOUND | SQLERROR | SQLWARNING}"]),jO=_(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),zO=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT | RIGHT] EXCEPTION JOIN","{INNER | CROSS} JOIN"]),EI=_(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]),TI={name:"db2i",tokenizerOptions:{reservedSelect:qO,reservedClauses:[...ZO,...Ke,...mT],reservedSetOperations:jO,reservedJoins:zO,reservedPhrases:EI,reservedKeywords:kO,reservedDataTypes:QO,reservedFunctionNames:$O,nestedBlockComments:!0,extraParens:["[]"],stringTypes:[{quote:"''-qq",prefixes:["G","N"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],identChars:{first:"@#$",rest:"@#$"},paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","¬=","¬>","¬<","!>","!<","||","=>"]},formatOptions:{onelineClauses:[...Ke,...mT],tabularOnelineClauses:mT}},eI=["ABS","ACOS","ASIN","ATAN","BIN","BROUND","CBRT","CEIL","CEILING","CONV","COS","DEGREES","EXP","FACTORIAL","FLOOR","GREATEST","HEX","LEAST","LN","LOG","LOG10","LOG2","NEGATIVE","PI","PMOD","POSITIVE","POW","POWER","RADIANS","RAND","ROUND","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIN","SQRT","TAN","UNHEX","WIDTH_BUCKET","ARRAY_CONTAINS","MAP_KEYS","MAP_VALUES","SIZE","SORT_ARRAY","BINARY","CAST","ADD_MONTHS","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","QUARTER","SECOND","TIMESTAMP","TO_DATE","TO_UTC_TIMESTAMP","TRUNC","UNIX_TIMESTAMP","WEEKOFYEAR","YEAR","ASSERT_TRUE","COALESCE","IF","ISNOTNULL","ISNULL","NULLIF","NVL","ASCII","BASE64","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONTEXT_NGRAMS","DECODE","ELT","ENCODE","FIELD","FIND_IN_SET","FORMAT_NUMBER","GET_JSON_OBJECT","IN_FILE","INITCAP","INSTR","LCASE","LENGTH","LEVENSHTEIN","LOCATE","LOWER","LPAD","LTRIM","NGRAMS","OCTET_LENGTH","PARSE_URL","PRINTF","QUOTE","REGEXP_EXTRACT","REGEXP_REPLACE","REPEAT","REVERSE","RPAD","RTRIM","SENTENCES","SOUNDEX","SPACE","SPLIT","STR_TO_MAP","SUBSTR","SUBSTRING","TRANSLATE","TRIM","UCASE","UNBASE64","UPPER","MASK","MASK_FIRST_N","MASK_HASH","MASK_LAST_N","MASK_SHOW_FIRST_N","MASK_SHOW_LAST_N","AES_DECRYPT","AES_ENCRYPT","CRC32","CURRENT_DATABASE","CURRENT_USER","HASH","JAVA_METHOD","LOGGED_IN_USER","MD5","REFLECT","SHA","SHA1","SHA2","SURROGATE_KEY","VERSION","AVG","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COVAR_POP","COVAR_SAMP","HISTOGRAM_NUMERIC","MAX","MIN","NTILE","PERCENTILE","PERCENTILE_APPROX","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE","EXPLODE","INLINE","JSON_TUPLE","PARSE_URL_TUPLE","POSEXPLODE","STACK","LEAD","LAG","FIRST_VALUE","LAST_VALUE","RANK","ROW_NUMBER","DENSE_RANK","CUME_DIST","PERCENT_RANK","NTILE"],RI=["ADD","ADMIN","AFTER","ANALYZE","ARCHIVE","ASC","BEFORE","BUCKET","BUCKETS","CASCADE","CHANGE","CLUSTER","CLUSTERED","CLUSTERSTATUS","COLLECTION","COLUMNS","COMMENT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONTINUE","DATA","DATABASES","DATETIME","DAY","DBPROPERTIES","DEFERRED","DEFINED","DELIMITED","DEPENDENCY","DESC","DIRECTORIES","DIRECTORY","DISABLE","DISTRIBUTE","ELEM_TYPE","ENABLE","ESCAPED","EXCLUSIVE","EXPLAIN","EXPORT","FIELDS","FILE","FILEFORMAT","FIRST","FORMAT","FORMATTED","FUNCTIONS","HOLD_DDLTIME","HOUR","IDXPROPERTIES","IGNORE","INDEX","INDEXES","INPATH","INPUTDRIVER","INPUTFORMAT","ITEMS","JAR","KEYS","KEY_TYPE","LIMIT","LINES","LOAD","LOCATION","LOCK","LOCKS","LOGICAL","LONG","MAPJOIN","MATERIALIZED","METADATA","MINUS","MINUTE","MONTH","MSCK","NOSCAN","NO_DROP","OFFLINE","OPTION","OUTPUTDRIVER","OUTPUTFORMAT","OVERWRITE","OWNER","PARTITIONED","PARTITIONS","PLUS","PRETTY","PRINCIPALS","PROTECTION","PURGE","READ","READONLY","REBUILD","RECORDREADER","RECORDWRITER","RELOAD","RENAME","REPAIR","REPLACE","REPLICATION","RESTRICT","REWRITE","ROLE","ROLES","SCHEMA","SCHEMAS","SECOND","SEMI","SERDE","SERDEPROPERTIES","SERVER","SETS","SHARED","SHOW","SHOW_DATABASE","SKEWED","SORT","SORTED","SSL","STATISTICS","STORED","STREAMTABLE","STRING","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","TINYINT","TOUCH","TRANSACTIONS","UNARCHIVE","UNDO","UNIONTYPE","UNLOCK","UNSET","UNSIGNED","URI","USE","UTC","UTCTIMESTAMP","VALUE_TYPE","VIEW","WHILE","YEAR","AUTOCOMMIT","ISOLATION","LEVEL","OFFSET","SNAPSHOT","TRANSACTION","WORK","WRITE","ABORT","KEY","LAST","NORELY","NOVALIDATE","NULLS","RELY","VALIDATE","DETAIL","DOW","EXPRESSION","OPERATOR","QUARTER","SUMMARY","VECTORIZATION","WEEK","YEARS","MONTHS","WEEKS","DAYS","HOURS","MINUTES","SECONDS","TIMESTAMPTZ","ZONE","ALL","ALTER","AND","AS","AUTHORIZATION","BETWEEN","BOTH","BY","CASE","CAST","COLUMN","CONF","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIMESTAMP","CURSOR","DATABASE","DELETE","DESCRIBE","DISTINCT","DROP","ELSE","END","EXCHANGE","EXISTS","EXTENDED","EXTERNAL","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","FUNCTION","GRANT","GROUP","GROUPING","HAVING","IF","IMPORT","IN","INNER","INSERT","INTERSECT","INTO","IS","JOIN","LATERAL","LEFT","LESS","LIKE","LOCAL","MACRO","MORE","NONE","NOT","NULL","OF","ON","OR","ORDER","OUT","OUTER","OVER","PARTIALSCAN","PARTITION","PERCENT","PRECEDING","PRESERVE","PROCEDURE","RANGE","READS","REDUCE","REVOKE","RIGHT","ROLLUP","ROW","ROWS","SELECT","SET","TABLE","TABLESAMPLE","THEN","TO","TRANSFORM","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNION","UNIQUEJOIN","UPDATE","USER","USING","UTC_TMESTAMP","VALUES","WHEN","WHERE","WINDOW","WITH","COMMIT","ONLY","REGEXP","RLIKE","ROLLBACK","START","CACHE","CONSTRAINT","FOREIGN","PRIMARY","REFERENCES","DAYOFWEEK","EXTRACT","FLOOR","VIEWS","TIME","SYNC","TEXTFILE","SEQUENCEFILE","ORC","CSV","TSV","PARQUET","AVRO","RCFILE","JSONFILE","INPUTFORMAT","OUTPUTFORMAT"],AI=["ARRAY","BIGINT","BINARY","BOOLEAN","CHAR","DATE","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","INTERVAL","MAP","NUMERIC","PRECISION","SMALLINT","STRUCT","TIMESTAMP","VARCHAR"],SI=_(["SELECT [ALL | DISTINCT]"]),OI=_(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT INTO [TABLE]","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT [VALUES]","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE"]),xe=_(["CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]"]),YT=_(["CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","RENAME TO","TRUNCATE [TABLE]","ALTER","CREATE","USE","DESCRIBE","DROP","FETCH","SHOW","STORED AS","STORED BY","ROW FORMAT"]),II=_(["UNION [ALL | DISTINCT]"]),tI=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","LEFT SEMI JOIN"]),NI=_(["{ROWS | RANGE} BETWEEN"]),sI={name:"hive",tokenizerOptions:{reservedSelect:SI,reservedClauses:[...OI,...xe,...YT],reservedSetOperations:II,reservedJoins:tI,reservedPhrases:NI,reservedKeywords:RI,reservedDataTypes:AI,reservedFunctionNames:eI,extraParens:["[]"],stringTypes:['""-bs',"''-bs"],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||"]},formatOptions:{onelineClauses:[...xe,...YT],tabularOnelineClauses:YT}};function MT(T){return T.map((E,e)=>{const R=T[e+1]||VE;if(UE.SET(E)&&R.text==="(")return eE(z({},E),{type:"RESERVED_FUNCTION_NAME"});const A=T[e-1]||VE;return UE.VALUES(E)&&A.text==="="?eE(z({},E),{type:"RESERVED_FUNCTION_NAME"}):E})}var rI=["ACCESSIBLE","ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DECLARE","DEFAULT","DELAYED","DELETE","DELETE_DOMAIN_ID","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DO_DOMAIN_IDS","DROP","DUAL","EACH","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FOR","FORCE","FOREIGN","FROM","FULLTEXT","GENERAL","GRANT","GROUP","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IGNORE_DOMAIN_IDS","IGNORE_SERVER_IDS","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","INTERSECT","INTERVAL","INTO","IS","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LOOP","LOW_PRIORITY","MASTER_HEARTBEAT_PERIOD","MASTER_SSL_VERIFY_SERVER_CERT","MATCH","MAXVALUE","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NULL","OFFSET","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PAGE_CHECKSUM","PARSE_VCOL_EXPR","PARTITION","POSITION","PRIMARY","PROCEDURE","PURGE","RANGE","READ","READS","READ_WRITE","RECURSIVE","REF_SYSTEM_ID","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESIGNAL","RESTRICT","RETURN","RETURNING","REVOKE","RIGHT","RLIKE","ROW_NUMBER","ROWS","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SLOW","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STRAIGHT_JOIN","TABLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"],_I=["BIGINT","BINARY","BIT","BLOB","CHAR BYTE","CHAR","CHARACTER","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","FLOAT","FLOAT4","FLOAT8","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONG","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","REAL","SMALLINT","TEXT","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","VARBINARY","VARCHAR","VARCHARACTER","VARYING","YEAR"],CI=["ADDDATE","ADD_MONTHS","BIT_AND","BIT_OR","BIT_XOR","CAST","COUNT","CUME_DIST","CURDATE","CURTIME","DATE_ADD","DATE_SUB","DATE_FORMAT","DECODE","DENSE_RANK","EXTRACT","FIRST_VALUE","GROUP_CONCAT","JSON_ARRAYAGG","JSON_OBJECTAGG","LAG","LEAD","MAX","MEDIAN","MID","MIN","NOW","NTH_VALUE","NTILE","POSITION","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","ROW_NUMBER","SESSION_USER","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUBDATE","SUBSTR","SUBSTRING","SUM","SYSTEM_USER","TRIM","TRIM_ORACLE","VARIANCE","VAR_POP","VAR_SAMP","ABS","ACOS","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ASIN","ATAN","ATAN2","BENCHMARK","BIN","BINLOG_GTID_POS","BIT_COUNT","BIT_LENGTH","CEIL","CEILING","CHARACTER_LENGTH","CHAR_LENGTH","CHR","COERCIBILITY","COLUMN_CHECK","COLUMN_EXISTS","COLUMN_LIST","COLUMN_JSON","COMPRESS","CONCAT","CONCAT_OPERATOR_ORACLE","CONCAT_WS","CONNECTION_ID","CONV","CONVERT_TZ","COS","COT","CRC32","DATEDIFF","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEGREES","DECODE_HISTOGRAM","DECODE_ORACLE","DES_DECRYPT","DES_ENCRYPT","ELT","ENCODE","ENCRYPT","EXP","EXPORT_SET","EXTRACTVALUE","FIELD","FIND_IN_SET","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GET_LOCK","GREATEST","HEX","IFNULL","INSTR","ISNULL","IS_FREE_LOCK","IS_USED_LOCK","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_COMPACT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_DETAILED","JSON_EXISTS","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_LOOSE","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_QUERY","JSON_QUOTE","JSON_OBJECT","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_SEARCH","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAST_DAY","LAST_INSERT_ID","LCASE","LEAST","LENGTH","LENGTHB","LN","LOAD_FILE","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LPAD_ORACLE","LTRIM","LTRIM_ORACLE","MAKEDATE","MAKETIME","MAKE_SET","MASTER_GTID_WAIT","MASTER_POS_WAIT","MD5","MONTHNAME","NAME_CONST","NVL","NVL2","OCT","OCTET_LENGTH","ORD","PERIOD_ADD","PERIOD_DIFF","PI","POW","POWER","QUOTE","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","RADIANS","RAND","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPLACE_ORACLE","REVERSE","ROUND","RPAD","RPAD_ORACLE","RTRIM","RTRIM_ORACLE","SEC_TO_TIME","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SPACE","SQRT","STRCMP","STR_TO_DATE","SUBSTR_ORACLE","SUBSTRING_INDEX","SUBTIME","SYS_GUID","TAN","TIMEDIFF","TIME_FORMAT","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_SECONDS","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UUID","UUID_SHORT","VERSION","WEEKDAY","WEEKOFYEAR","WSREP_LAST_WRITTEN_GTID","WSREP_LAST_SEEN_GTID","WSREP_SYNC_WAIT_UPTO_GTID","YEARWEEK","COALESCE","NULLIF"],aI=_(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),LI=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","ON DUPLICATE KEY UPDATE","SET","RETURNING"]),we=_(["CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]"]),FT=_(["CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]","ADD [COLUMN] [IF NOT EXISTS]","{CHANGE | MODIFY} [COLUMN] [IF EXISTS]","DROP [COLUMN] [IF EXISTS]","RENAME [TO]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","SET {VISIBLE | INVISIBLE}","TRUNCATE [TABLE]","ALTER DATABASE","ALTER DATABASE COMMENT","ALTER EVENT","ALTER FUNCTION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SCHEMA COMMENT","ALTER SEQUENCE","ALTER SERVER","ALTER USER","ALTER VIEW","ANALYZE","ANALYZE TABLE","BACKUP LOCK","BACKUP STAGE","BACKUP UNLOCK","BEGIN","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHECK TABLE","CHECK VIEW","CHECKSUM TABLE","COMMIT","CREATE AGGREGATE FUNCTION","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE INDEX","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE SERVER","CREATE SPATIAL INDEX","CREATE TRIGGER","CREATE UNIQUE INDEX","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP INDEX","DROP PREPARE","DROP PROCEDURE","DROP ROLE","DROP SEQUENCE","DROP SERVER","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GET DIAGNOSTICS","GET DIAGNOSTICS CONDITION","GRANT","HANDLER","HELP","INSTALL PLUGIN","INSTALL SONAME","KILL","LOAD DATA INFILE","LOAD INDEX INTO CACHE","LOAD XML INFILE","LOCK TABLE","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","PURGE MASTER LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","REPAIR VIEW","RESET MASTER","RESET QUERY CACHE","RESET REPLICA","RESET SLAVE","RESIGNAL","REVOKE","ROLLBACK","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET GLOBAL TRANSACTION","SET NAMES","SET PASSWORD","SET ROLE","SET STATEMENT","SET TRANSACTION","SHOW","SHOW ALL REPLICAS STATUS","SHOW ALL SLAVES STATUS","SHOW AUTHORS","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW BINLOG STATUS","SHOW CHARACTER SET","SHOW CLIENT_STATISTICS","SHOW COLLATION","SHOW COLUMNS","SHOW CONTRIBUTORS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PACKAGE","SHOW CREATE PACKAGE BODY","SHOW CREATE PROCEDURE","SHOW CREATE SEQUENCE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINE INNODB STATUS","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW EXPLAIN","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW INDEXES","SHOW INDEX_STATISTICS","SHOW KEYS","SHOW LOCALES","SHOW MASTER LOGS","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PACKAGE BODY CODE","SHOW PACKAGE BODY STATUS","SHOW PACKAGE STATUS","SHOW PLUGINS","SHOW PLUGINS SONAME","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW QUERY_RESPONSE_TIME","SHOW RELAYLOG EVENTS","SHOW REPLICA","SHOW REPLICA HOSTS","SHOW REPLICA STATUS","SHOW SCHEMAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW SLAVE STATUS","SHOW STATUS","SHOW STORAGE ENGINES","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW USER_STATISTICS","SHOW VARIABLES","SHOW WARNINGS","SHOW WSREP_MEMBERSHIP","SHOW WSREP_STATUS","SHUTDOWN","SIGNAL","START ALL REPLICAS","START ALL SLAVES","START REPLICA","START SLAVE","START TRANSACTION","STOP ALL REPLICAS","STOP ALL SLAVES","STOP REPLICA","STOP SLAVE","UNINSTALL PLUGIN","UNINSTALL SONAME","UNLOCK TABLE","USE","XA BEGIN","XA COMMIT","XA END","XA PREPARE","XA RECOVER","XA ROLLBACK","XA START"]),iI=_(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]","MINUS [ALL | DISTINCT]"]),nI=_(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),oI=_(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),DI={name:"mariadb",tokenizerOptions:{reservedSelect:aI,reservedClauses:[...LI,...we,...FT],reservedSetOperations:iI,reservedJoins:nI,reservedPhrases:oI,supportsXor:!0,reservedKeywords:rI,reservedDataTypes:_I,reservedFunctionNames:CI,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","&&","||","!","*.*"],postProcess:MT},formatOptions:{onelineClauses:[...we,...FT],tabularOnelineClauses:FT}},PI=["ACCESSIBLE","ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CUBE","CUME_DIST","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DECLARE","DEFAULT","DELAYED","DELETE","DENSE_RANK","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DROP","DUAL","EACH","ELSE","ELSEIF","EMPTY","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FIRST_VALUE","FOR","FORCE","FOREIGN","FROM","FULLTEXT","FUNCTION","GENERATED","GET","GRANT","GROUP","GROUPING","GROUPS","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","IN","INTERSECT","INTERVAL","INTO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IS","ITERATE","JOIN","JSON_TABLE","KEY","KEYS","KILL","LAG","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LONG","LOOP","LOW_PRIORITY","MASTER_BIND","MASTER_SSL_VERIFY_SERVER_CERT","MATCH","MAXVALUE","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","OF","ON","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PARTITION","PERCENT_RANK","PRIMARY","PROCEDURE","PURGE","RANGE","RANK","READ","READS","READ_WRITE","RECURSIVE","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESIGNAL","RESTRICT","RETURN","REVOKE","RIGHT","RLIKE","ROW","ROWS","ROW_NUMBER","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STORED","STRAIGHT_JOIN","SYSTEM","TABLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","VIRTUAL","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"],lI=["BIGINT","BINARY","BIT","BLOB","BOOL","BOOLEAN","CHAR","CHARACTER","DATE","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","FLOAT","FLOAT4","FLOAT8","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","REAL","SMALLINT","TEXT","TIME","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","VARBINARY","VARCHAR","VARCHARACTER","VARYING","YEAR"],MI=["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BINARY","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","CAN_ACCESS_COLUMN","CAN_ACCESS_DATABASE","CAN_ACCESS_TABLE","CAN_ACCESS_USER","CAN_ACCESS_VIEW","CAST","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEFAULT","DEGREES","DENSE_RANK","DIV","ELT","EXP","EXPORT_SET","EXTRACT","EXTRACTVALUE","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_PICO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOMCOLLECTION","GEOMETRYCOLLECTION","GET_DD_COLUMN_PRIVILEGES","GET_DD_CREATE_OPTIONS","GET_DD_INDEX_SUB_PART_LENGTH","GET_FORMAT","GET_LOCK","GREATEST","GROUP_CONCAT","GROUPING","GTID_SUBSET","GTID_SUBTRACT","HEX","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INSERT","INSTR","INTERNAL_AUTO_INCREMENT","INTERNAL_AVG_ROW_LENGTH","INTERNAL_CHECK_TIME","INTERNAL_CHECKSUM","INTERNAL_DATA_FREE","INTERNAL_DATA_LENGTH","INTERNAL_DD_CHAR_LENGTH","INTERNAL_GET_COMMENT_OR_ERROR","INTERNAL_GET_ENABLED_ROLE_JSON","INTERNAL_GET_HOSTNAME","INTERNAL_GET_USERNAME","INTERNAL_GET_VIEW_WARNING_OR_ERROR","INTERNAL_INDEX_COLUMN_CARDINALITY","INTERNAL_INDEX_LENGTH","INTERNAL_IS_ENABLED_ROLE","INTERNAL_IS_MANDATORY_ROLE","INTERNAL_KEYS_DISABLED","INTERNAL_MAX_DATA_LENGTH","INTERNAL_TABLE_ROWS","INTERNAL_UPDATE_TIME","INTERVAL","IS","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS NOT","IS NOT NULL","IS NULL","IS_USED_LOCK","IS_UUID","ISNULL","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_ARRAYAGG","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SCHEMA_VALID","JSON_SCHEMA_VALIDATION_REPORT","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TABLE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LINESTRING","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MATCH","MAX","MBRCONTAINS","MBRCOVEREDBY","MBRCOVERS","MBRDISJOINT","MBREQUALS","MBRINTERSECTS","MBROVERLAPS","MBRTOUCHES","MBRWITHIN","MD5","MEMBER OF","MICROSECOND","MID","MIN","MINUTE","MOD","MONTH","MONTHNAME","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","NAME_CONST","NOT","NOT IN","NOT LIKE","NOT REGEXP","NOW","NTH_VALUE","NTILE","NULLIF","OCT","OCTET_LENGTH","ORD","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","POINT","POLYGON","POSITION","POW","POWER","PS_CURRENT_THREAD_ID","PS_THREAD_ID","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROLES_GRAPHML","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_BUFFER","ST_BUFFER_STRATEGY","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_CONVEXHULL","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DISTANCE_SPHERE","ST_ENDPOINT","ST_ENVELOPE","ST_EQUALS","ST_EXTERIORRING","ST_FRECHETDISTANCE","ST_GEOHASH","ST_GEOMCOLLFROMTEXT","ST_GEOMCOLLFROMWKB","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMGEOJSON","ST_GEOMFROMTEXT","ST_GEOMFROMWKB","ST_HAUSDORFFDISTANCE","ST_INTERIORRINGN","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISSIMPLE","ST_ISVALID","ST_LATFROMGEOHASH","ST_LATITUDE","ST_LENGTH","ST_LINEFROMTEXT","ST_LINEFROMWKB","ST_LINEINTERPOLATEPOINT","ST_LINEINTERPOLATEPOINTS","ST_LONGFROMGEOHASH","ST_LONGITUDE","ST_MAKEENVELOPE","ST_MLINEFROMTEXT","ST_MLINEFROMWKB","ST_MPOINTFROMTEXT","ST_MPOINTFROMWKB","ST_MPOLYFROMTEXT","ST_MPOLYFROMWKB","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINTATDISTANCE","ST_POINTFROMGEOHASH","ST_POINTFROMTEXT","ST_POINTFROMWKB","ST_POINTN","ST_POLYFROMTEXT","ST_POLYFROMWKB","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SWAPXY","ST_SYMDIFFERENCE","ST_TOUCHES","ST_TRANSFORM","ST_UNION","ST_VALIDATE","ST_WITHIN","ST_X","ST_Y","STATEMENT_DIGEST","STATEMENT_DIGEST_TEXT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRIM","TRUNCATE","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VALUES","VAR_POP","VAR_SAMP","VARIANCE","VERSION","WAIT_FOR_EXECUTED_GTID_SET","WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK"],UI=_(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),uI=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","ON DUPLICATE KEY UPDATE","SET"]),Je=_(["CREATE [TEMPORARY] TABLE [IF NOT EXISTS]"]),hT=_(["CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","TRUNCATE [TABLE]","ALTER DATABASE","ALTER EVENT","ALTER FUNCTION","ALTER INSTANCE","ALTER LOGFILE GROUP","ALTER PROCEDURE","ALTER RESOURCE GROUP","ALTER SERVER","ALTER TABLESPACE","ALTER USER","ALTER VIEW","ANALYZE TABLE","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK TABLE","CHECKSUM TABLE","CLONE","COMMIT","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE FUNCTION","CREATE INDEX","CREATE LOGFILE GROUP","CREATE PROCEDURE","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SERVER","CREATE SPATIAL REFERENCE SYSTEM","CREATE TABLESPACE","CREATE TRIGGER","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP FUNCTION","DROP INDEX","DROP LOGFILE GROUP","DROP PROCEDURE","DROP RESOURCE GROUP","DROP ROLE","DROP SERVER","DROP SPATIAL REFERENCE SYSTEM","DROP TABLESPACE","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GRANT","HANDLER","HELP","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SOURCE_POS_WAIT","START GROUP_REPLICATION","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP REPLICA","STOP SLAVE","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),cI=_(["UNION [ALL | DISTINCT]"]),dI=_(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),GI=_(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),pI={name:"mysql",tokenizerOptions:{reservedSelect:UI,reservedClauses:[...uI,...Je,...hT],reservedSetOperations:cI,reservedJoins:dI,reservedPhrases:GI,supportsXor:!0,reservedKeywords:PI,reservedDataTypes:lI,reservedFunctionNames:MI,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!","*.*"],postProcess:MT},formatOptions:{onelineClauses:[...Je,...hT],tabularOnelineClauses:hT}},HI=["ADD","ALL","ALTER","ANALYZE","AND","ARRAY","AS","ASC","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEFAULT","DELAYED","DELETE","DESC","DESCRIBE","DISTINCT","DISTINCTROW","DIV","DOUBLE","DROP","DUAL","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FOR","FORCE","FOREIGN","FROM","FULLTEXT","GENERATED","GRANT","GROUP","GROUPS","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","ILIKE","IN","INDEX","INFILE","INNER","INOUT","INSERT","INTERSECT","INTERVAL","INTO","IS","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LONG","LOW_PRIORITY","MATCH","MAXVALUE","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","NATURAL","NOT","NO_WRITE_TO_BINLOG","NULL","OF","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PARTITION","PRIMARY","PROCEDURE","RANGE","READ","RECURSIVE","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESTRICT","REVOKE","RIGHT","RLIKE","ROW","ROWS","SECOND_MICROSECOND","SELECT","SET","SHOW","SPATIAL","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STATS_EXTENDED","STORED","STRAIGHT_JOIN","TABLE","TABLESAMPLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","TiDB_CURRENT_TSO","UNION","UNIQUE","UNLOCK","UNSIGNED","UNTIL","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","VIRTUAL","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"],BI=["BIGINT","BINARY","BIT","BLOB","BOOL","BOOLEAN","CHAR","CHARACTER","DATE","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","SMALLINT","TEXT","TIME","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","VARBINARY","VARCHAR","VARCHARACTER","VARYING","YEAR"],mI=["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","BITAND","BITNEG","BITOR","BITXOR","CASE","CAST","CEIL","CEILING","CHAR_FUNC","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_RESOURCE_GROUP","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT_FUNC","DEGREES","DENSE_RANK","DES_DECRYPT","DES_ENCRYPT","DIV","ELT","ENCODE","ENCRYPT","EQ","EXP","EXPORT_SET","EXTRACT","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_NANO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GE","GET_FORMAT","GET_LOCK","GETPARAM","GREATEST","GROUP_CONCAT","GROUPING","GT","HEX","HOUR","IF","IFNULL","ILIKE","INET6_ATON","INET6_NTOA","INET_ATON","INET_NTOA","INSERT_FUNC","INSTR","INTDIV","INTERVAL","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS_USED_LOCK","IS_UUID","ISFALSE","ISNULL","ISTRUE","JSON_ARRAY","JSON_ARRAYAGG","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MEMBEROF","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LASTVAL","LCASE","LE","LEAD","LEAST","LEFT","LEFTSHIFT","LENGTH","LIKE","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LT","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MAX","MD5","MICROSECOND","MID","MIN","MINUS","MINUTE","MOD","MONTH","MONTHNAME","MUL","NAME_CONST","NE","NEXTVAL","NOT","NOW","NTH_VALUE","NTILE","NULLEQ","OCT","OCTET_LENGTH","OLD_PASSWORD","ORD","PASSWORD_FUNC","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","PLUS","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RIGHTSHIFT","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SETVAL","SETVAR","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SM3","SPACE","SQRT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIDB_BOUNDED_STALENESS","TIDB_CURRENT_TSO","TIDB_DECODE_BINARY_PLAN","TIDB_DECODE_KEY","TIDB_DECODE_PLAN","TIDB_DECODE_SQL_DIGESTS","TIDB_ENCODE_SQL_DIGEST","TIDB_IS_DDL_OWNER","TIDB_PARSE_TSO","TIDB_PARSE_TSO_LOGICAL","TIDB_ROW_CHECKSUM","TIDB_SHARD","TIDB_VERSION","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRANSLATE","TRIM","TRUNCATE","UCASE","UNARYMINUS","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPPER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VAR_POP","VAR_SAMP","VARIANCE","VERSION","VITESS_HASH","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK"],YI=_(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),FI=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","ON DUPLICATE KEY UPDATE","SET"]),$e=_(["CREATE [TEMPORARY] TABLE [IF NOT EXISTS]"]),fT=_(["CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","TRUNCATE [TABLE]","ALTER DATABASE","ALTER INSTANCE","ALTER RESOURCE GROUP","ALTER SEQUENCE","ALTER USER","ALTER VIEW","ANALYZE TABLE","CHECK TABLE","CHECKSUM TABLE","COMMIT","CREATE DATABASE","CREATE INDEX","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SEQUENCE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP INDEX","DROP RESOURCE GROUP","DROP ROLE","DROP TABLESPACE","DROP USER","DROP VIEW","EXPLAIN","FLUSH","GRANT","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOCK INSTANCE FOR BACKUP","LOCK TABLES","OPTIMIZE TABLE","PREPARE","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE"]),hI=_(["UNION [ALL | DISTINCT]"]),fI=_(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),VI=_(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),vI={name:"tidb",tokenizerOptions:{reservedSelect:YI,reservedClauses:[...FI,...$e,...fT],reservedSetOperations:hI,reservedJoins:fI,reservedPhrases:VI,supportsXor:!0,reservedKeywords:HI,reservedDataTypes:BI,reservedFunctionNames:mI,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!","*.*"],postProcess:MT},formatOptions:{onelineClauses:[...$e,...fT],tabularOnelineClauses:fT}},yI=["ABORT","ABS","ACOS","ADVISOR","ARRAY_AGG","ARRAY_AGG","ARRAY_APPEND","ARRAY_AVG","ARRAY_BINARY_SEARCH","ARRAY_CONCAT","ARRAY_CONTAINS","ARRAY_COUNT","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_FLATTEN","ARRAY_IFNULL","ARRAY_INSERT","ARRAY_INTERSECT","ARRAY_LENGTH","ARRAY_MAX","ARRAY_MIN","ARRAY_MOVE","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_PUT","ARRAY_RANGE","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_REPLACE","ARRAY_REVERSE","ARRAY_SORT","ARRAY_STAR","ARRAY_SUM","ARRAY_SYMDIFF","ARRAY_SYMDIFF1","ARRAY_SYMDIFFN","ARRAY_UNION","ASIN","ATAN","ATAN2","AVG","BASE64","BASE64_DECODE","BASE64_ENCODE","BITAND ","BITCLEAR ","BITNOT ","BITOR ","BITSET ","BITSHIFT ","BITTEST ","BITXOR ","CEIL","CLOCK_LOCAL","CLOCK_MILLIS","CLOCK_STR","CLOCK_TZ","CLOCK_UTC","COALESCE","CONCAT","CONCAT2","CONTAINS","CONTAINS_TOKEN","CONTAINS_TOKEN_LIKE","CONTAINS_TOKEN_REGEXP","COS","COUNT","COUNT","COUNTN","CUME_DIST","CURL","DATE_ADD_MILLIS","DATE_ADD_STR","DATE_DIFF_MILLIS","DATE_DIFF_STR","DATE_FORMAT_STR","DATE_PART_MILLIS","DATE_PART_STR","DATE_RANGE_MILLIS","DATE_RANGE_STR","DATE_TRUNC_MILLIS","DATE_TRUNC_STR","DECODE","DECODE_JSON","DEGREES","DENSE_RANK","DURATION_TO_STR","ENCODED_SIZE","ENCODE_JSON","EXP","FIRST_VALUE","FLOOR","GREATEST","HAS_TOKEN","IFINF","IFMISSING","IFMISSINGORNULL","IFNAN","IFNANORINF","IFNULL","INITCAP","ISARRAY","ISATOM","ISBITSET","ISBOOLEAN","ISNUMBER","ISOBJECT","ISSTRING","LAG","LAST_VALUE","LEAD","LEAST","LENGTH","LN","LOG","LOWER","LTRIM","MAX","MEAN","MEDIAN","META","MILLIS","MILLIS_TO_LOCAL","MILLIS_TO_STR","MILLIS_TO_TZ","MILLIS_TO_UTC","MILLIS_TO_ZONE_NAME","MIN","MISSINGIF","NANIF","NEGINFIF","NOW_LOCAL","NOW_MILLIS","NOW_STR","NOW_TZ","NOW_UTC","NTH_VALUE","NTILE","NULLIF","NVL","NVL2","OBJECT_ADD","OBJECT_CONCAT","OBJECT_INNER_PAIRS","OBJECT_INNER_VALUES","OBJECT_LENGTH","OBJECT_NAMES","OBJECT_PAIRS","OBJECT_PUT","OBJECT_REMOVE","OBJECT_RENAME","OBJECT_REPLACE","OBJECT_UNWRAP","OBJECT_VALUES","PAIRS","PERCENT_RANK","PI","POLY_LENGTH","POSINFIF","POSITION","POWER","RADIANS","RANDOM","RANK","RATIO_TO_REPORT","REGEXP_CONTAINS","REGEXP_LIKE","REGEXP_MATCHES","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGEX_CONTAINS","REGEX_LIKE","REGEX_MATCHES","REGEX_POSITION","REGEX_REPLACE","REGEX_SPLIT","REPEAT","REPLACE","REVERSE","ROUND","ROW_NUMBER","RTRIM","SEARCH","SEARCH_META","SEARCH_SCORE","SIGN","SIN","SPLIT","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DURATION","STR_TO_MILLIS","STR_TO_TZ","STR_TO_UTC","STR_TO_ZONE_NAME","SUBSTR","SUFFIXES","SUM","TAN","TITLE","TOARRAY","TOATOM","TOBOOLEAN","TOKENS","TOKENS","TONUMBER","TOOBJECT","TOSTRING","TRIM","TRUNC","UPPER","UUID","VARIANCE","VARIANCE_POP","VARIANCE_SAMP","VAR_POP","VAR_SAMP","WEEKDAY_MILLIS","WEEKDAY_STR","CAST"],WI=["ADVISE","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","BEGIN","BETWEEN","BINARY","BOOLEAN","BREAK","BUCKET","BUILD","BY","CALL","CASE","CAST","CLUSTER","COLLATE","COLLECTION","COMMIT","COMMITTED","CONNECT","CONTINUE","CORRELATED","COVER","CREATE","CURRENT","DATABASE","DATASET","DATASTORE","DECLARE","DECREMENT","DELETE","DERIVED","DESC","DESCRIBE","DISTINCT","DO","DROP","EACH","ELEMENT","ELSE","END","EVERY","EXCEPT","EXCLUDE","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FILTER","FIRST","FLATTEN","FLUSH","FOLLOWING","FOR","FORCE","FROM","FTS","FUNCTION","GOLANG","GRANT","GROUP","GROUPS","GSI","HASH","HAVING","IF","IGNORE","ILIKE","IN","INCLUDE","INCREMENT","INDEX","INFER","INLINE","INNER","INSERT","INTERSECT","INTO","IS","ISOLATION","JAVASCRIPT","JOIN","KEY","KEYS","KEYSPACE","KNOWN","LANGUAGE","LAST","LEFT","LET","LETTING","LEVEL","LIKE","LIMIT","LSM","MAP","MAPPING","MATCHED","MATERIALIZED","MERGE","MINUS","MISSING","NAMESPACE","NEST","NL","NO","NOT","NTH_VALUE","NULL","NULLS","NUMBER","OBJECT","OFFSET","ON","OPTION","OPTIONS","OR","ORDER","OTHERS","OUTER","OVER","PARSE","PARTITION","PASSWORD","PATH","POOL","PRECEDING","PREPARE","PRIMARY","PRIVATE","PRIVILEGE","PROBE","PROCEDURE","PUBLIC","RANGE","RAW","REALM","REDUCE","RENAME","RESPECT","RETURN","RETURNING","REVOKE","RIGHT","ROLE","ROLLBACK","ROW","ROWS","SATISFIES","SAVEPOINT","SCHEMA","SCOPE","SELECT","SELF","SEMI","SET","SHOW","SOME","START","STATISTICS","STRING","SYSTEM","THEN","TIES","TO","TRAN","TRANSACTION","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNDER","UNION","UNIQUE","UNKNOWN","UNNEST","UNSET","UPDATE","UPSERT","USE","USER","USING","VALIDATE","VALUE","VALUED","VALUES","VIA","VIEW","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WORK","XOR"],gI=[],XI=_(["SELECT [ALL | DISTINCT]"]),bI=_(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED THEN","UPDATE SET","INSERT","NEST","UNNEST","RETURNING"]),ke=_(["UPDATE","DELETE FROM","SET SCHEMA","ADVISE","ALTER INDEX","BEGIN TRANSACTION","BUILD INDEX","COMMIT TRANSACTION","CREATE COLLECTION","CREATE FUNCTION","CREATE INDEX","CREATE PRIMARY INDEX","CREATE SCOPE","DROP COLLECTION","DROP FUNCTION","DROP INDEX","DROP PRIMARY INDEX","DROP SCOPE","EXECUTE","EXECUTE FUNCTION","EXPLAIN","GRANT","INFER","PREPARE","REVOKE","ROLLBACK TRANSACTION","SAVEPOINT","SET TRANSACTION","UPDATE STATISTICS","UPSERT","LET","SET CURRENT SCHEMA","SHOW","USE [PRIMARY] KEYS"]),KI=_(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),xI=_(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","INNER JOIN"]),wI=_(["{ROWS | RANGE | GROUPS} BETWEEN"]),JI={name:"n1ql",tokenizerOptions:{reservedSelect:XI,reservedClauses:[...bI,...ke],reservedSetOperations:KI,reservedJoins:xI,reservedPhrases:wI,supportsXor:!0,reservedKeywords:WI,reservedDataTypes:gI,reservedFunctionNames:yI,stringTypes:['""-bs',"''-bs"],identTypes:["``"],extraParens:["[]","{}"],paramTypes:{positional:!0,numbered:["$"],named:["$"]},lineCommentTypes:["#","--"],operators:["%","==",":","||"]},formatOptions:{onelineClauses:ke}},$I=["ADD","AGENT","AGGREGATE","ALL","ALTER","AND","ANY","ARROW","AS","ASC","AT","ATTRIBUTE","AUTHID","AVG","BEGIN","BETWEEN","BLOCK","BODY","BOTH","BOUND","BULK","BY","BYTE","CALL","CALLING","CASCADE","CASE","CHARSET","CHARSETFORM","CHARSETID","CHECK","CLOSE","CLUSTER","CLUSTERS","COLAUTH","COLLECT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPILED","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTEXT","CONVERT","COUNT","CRASH","CREATE","CURRENT","CURSOR","CUSTOMDATUM","DANGLING","DATA","DAY","DECLARE","DEFAULT","DEFINE","DELETE","DESC","DETERMINISTIC","DISTINCT","DROP","DURATION","ELEMENT","ELSE","ELSIF","EMPTY","END","ESCAPE","EXCEPT","EXCEPTION","EXCEPTIONS","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FINAL","FIXED","FOR","FORALL","FORCE","FORM","FROM","FUNCTION","GENERAL","GOTO","GRANT","GROUP","HASH","HAVING","HEAP","HIDDEN","HOUR","IDENTIFIED","IF","IMMEDIATE","IN","INCLUDING","INDEX","INDEXES","INDICATOR","INDICES","INFINITE","INSERT","INSTANTIABLE","INTERFACE","INTERSECT","INTERVAL","INTO","INVALIDATE","IS","ISOLATION","JAVA","LANGUAGE","LARGE","LEADING","LENGTH","LEVEL","LIBRARY","LIKE","LIKE2","LIKE4","LIKEC","LIMIT","LIMITED","LOCAL","LOCK","LOOP","MAP","MAX","MAXLEN","MEMBER","MERGE","MIN","MINUS","MINUTE","MOD","MODE","MODIFY","MONTH","MULTISET","NAME","NAN","NATIONAL","NATIVE","NEW","NOCOMPRESS","NOCOPY","NOT","NOWAIT","NULL","OBJECT","OCICOLL","OCIDATE","OCIDATETIME","OCIDURATION","OCIINTERVAL","OCILOBLOCATOR","OCINUMBER","OCIRAW","OCIREF","OCIREFCURSOR","OCIROWID","OCISTRING","OCITYPE","OF","ON","ONLY","OPAQUE","OPEN","OPERATOR","OPTION","OR","ORACLE","ORADATA","ORDER","OVERLAPS","ORGANIZATION","ORLANY","ORLVARY","OTHERS","OUT","OVERRIDING","PACKAGE","PARALLEL_ENABLE","PARAMETER","PARAMETERS","PARTITION","PASCAL","PIPE","PIPELINED","PRAGMA","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","READ","RECORD","REF","REFERENCE","REM","REMAINDER","RENAME","RESOURCE","RESULT","RETURN","RETURNING","REVERSE","REVOKE","ROLLBACK","ROW","SAMPLE","SAVE","SAVEPOINT","SB1","SB2","SB4","SECOND","SEGMENT","SELECT","SELF","SEPARATE","SEQUENCE","SERIALIZABLE","SET","SHARE","SHORT","SIZE","SIZE_T","SOME","SPARSE","SQL","SQLCODE","SQLDATA","SQLNAME","SQLSTATE","STANDARD","START","STATIC","STDDEV","STORED","STRING","STRUCT","STYLE","SUBMULTISET","SUBPARTITION","SUBSTITUTABLE","SUBTYPE","SUM","SYNONYM","TABAUTH","TABLE","TDO","THE","THEN","TIME","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TO","TRAILING","TRANSAC","TRANSACTIONAL","TRUSTED","TYPE","UB1","UB2","UB4","UNDER","UNION","UNIQUE","UNSIGNED","UNTRUSTED","UPDATE","USE","USING","VALIST","VALUE","VALUES","VARIABLE","VARIANCE","VARRAY","VIEW","VIEWS","VOID","WHEN","WHERE","WHILE","WITH","WORK","WRAPPED","WRITE","YEAR","ZONE"],kI=["ARRAY","BFILE_BASE","BINARY","BLOB_BASE","CHAR VARYING","CHAR_BASE","CHAR","CHARACTER VARYING","CHARACTER","CLOB_BASE","DATE_BASE","DATE","DECIMAL","DOUBLE","FLOAT","INT","INTERVAL DAY","INTERVAL YEAR","LONG","NATIONAL CHAR VARYING","NATIONAL CHAR","NATIONAL CHARACTER VARYING","NATIONAL CHARACTER","NCHAR VARYING","NCHAR","NCHAR","NUMBER_BASE","NUMBER","NUMBERIC","NVARCHAR","PRECISION","RAW","TIMESTAMP","UROWID","VARCHAR","VARCHAR2"],QI=["ABS","ACOS","ASIN","ATAN","ATAN2","BITAND","CEIL","COS","COSH","EXP","FLOOR","LN","LOG","MOD","NANVL","POWER","REMAINDER","ROUND","SIGN","SIN","SINH","SQRT","TAN","TANH","TRUNC","WIDTH_BUCKET","CHR","CONCAT","INITCAP","LOWER","LPAD","LTRIM","NLS_INITCAP","NLS_LOWER","NLSSORT","NLS_UPPER","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","RPAD","RTRIM","SOUNDEX","SUBSTR","TRANSLATE","TREAT","TRIM","UPPER","NLS_CHARSET_DECL_LEN","NLS_CHARSET_ID","NLS_CHARSET_NAME","ASCII","INSTR","LENGTH","REGEXP_INSTR","ADD_MONTHS","CURRENT_DATE","CURRENT_TIMESTAMP","DBTIMEZONE","EXTRACT","FROM_TZ","LAST_DAY","LOCALTIMESTAMP","MONTHS_BETWEEN","NEW_TIME","NEXT_DAY","NUMTODSINTERVAL","NUMTOYMINTERVAL","ROUND","SESSIONTIMEZONE","SYS_EXTRACT_UTC","SYSDATE","SYSTIMESTAMP","TO_CHAR","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_DSINTERVAL","TO_YMINTERVAL","TRUNC","TZ_OFFSET","GREATEST","LEAST","ASCIISTR","BIN_TO_NUM","CAST","CHARTOROWID","COMPOSE","CONVERT","DECOMPOSE","HEXTORAW","NUMTODSINTERVAL","NUMTOYMINTERVAL","RAWTOHEX","RAWTONHEX","ROWIDTOCHAR","ROWIDTONCHAR","SCN_TO_TIMESTAMP","TIMESTAMP_TO_SCN","TO_BINARY_DOUBLE","TO_BINARY_FLOAT","TO_CHAR","TO_CLOB","TO_DATE","TO_DSINTERVAL","TO_LOB","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_DSINTERVAL","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_YMINTERVAL","TO_YMINTERVAL","TRANSLATE","UNISTR","BFILENAME","EMPTY_BLOB,","EMPTY_CLOB","CARDINALITY","COLLECT","POWERMULTISET","POWERMULTISET_BY_CARDINALITY","SET","SYS_CONNECT_BY_PATH","CLUSTER_ID","CLUSTER_PROBABILITY","CLUSTER_SET","FEATURE_ID","FEATURE_SET","FEATURE_VALUE","PREDICTION","PREDICTION_COST","PREDICTION_DETAILS","PREDICTION_PROBABILITY","PREDICTION_SET","APPENDCHILDXML","DELETEXML","DEPTH","EXTRACT","EXISTSNODE","EXTRACTVALUE","INSERTCHILDXML","INSERTXMLBEFORE","PATH","SYS_DBURIGEN","SYS_XMLAGG","SYS_XMLGEN","UPDATEXML","XMLAGG","XMLCDATA","XMLCOLATTVAL","XMLCOMMENT","XMLCONCAT","XMLFOREST","XMLPARSE","XMLPI","XMLQUERY","XMLROOT","XMLSEQUENCE","XMLSERIALIZE","XMLTABLE","XMLTRANSFORM","DECODE","DUMP","ORA_HASH","VSIZE","COALESCE","LNNVL","NULLIF","NVL","NVL2","SYS_CONTEXT","SYS_GUID","SYS_TYPEID","UID","USER","USERENV","AVG","COLLECT","CORR","CORR_S","CORR_K","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","FIRST","GROUP_ID","GROUPING","GROUPING_ID","LAST","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANK","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","STATS_BINOMIAL_TEST","STATS_CROSSTAB","STATS_F_TEST","STATS_KS_TEST","STATS_MODE","STATS_MW_TEST","STATS_ONE_WAY_ANOVA","STATS_T_TEST_ONE","STATS_T_TEST_PAIRED","STATS_T_TEST_INDEP","STATS_T_TEST_INDEPU","STATS_WSR_TEST","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTILE","RATIO_TO_REPORT","ROW_NUMBER","DEREF","MAKE_REF","REF","REFTOHEX","VALUE","CV","ITERATION_NUMBER","PRESENTNNV","PRESENTV","PREVIOUS"],qI=_(["SELECT [ALL | DISTINCT | UNIQUE]"]),ZI=_(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE [OF]","INSERT [INTO | ALL INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [THEN]","UPDATE SET","RETURNING"]),Qe=_(["CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE"]),VT=_(["CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW","CREATE MATERIALIZED VIEW","UPDATE [ONLY]","DELETE FROM [ONLY]","DROP TABLE","ALTER TABLE","ADD","DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}","MODIFY","RENAME TO","RENAME COLUMN","TRUNCATE TABLE","SET SCHEMA","BEGIN","CONNECT BY","DECLARE","EXCEPT","EXCEPTION","LOOP","START WITH"]),jI=_(["UNION [ALL]","EXCEPT","INTERSECT"]),zI=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | OUTER} APPLY"]),Et=_(["ON {UPDATE | DELETE} [SET NULL]","ON COMMIT","{ROWS | RANGE} BETWEEN"]),Tt={name:"plsql",tokenizerOptions:{reservedSelect:qI,reservedClauses:[...ZI,...Qe,...VT],reservedSetOperations:jI,reservedJoins:zI,reservedPhrases:Et,supportsXor:!0,reservedKeywords:$I,reservedDataTypes:kI,reservedFunctionNames:QI,stringTypes:[{quote:"''-qq",prefixes:["N"]},{quote:"q''",prefixes:["N"]}],identTypes:['""-qq'],identChars:{rest:"$#"},variableTypes:[{regex:"&{1,2}[A-Za-z][A-Za-z0-9_$#]*"}],paramTypes:{numbered:[":"],named:[":"]},paramChars:{},operators:["**",":=","%","~=","^=",">>","<<","=>","@","||"],postProcess:et},formatOptions:{alwaysDenseOperators:["@"],onelineClauses:[...Qe,...VT],tabularOnelineClauses:VT}};function et(T){let E=VE;return T.map(e=>UE.SET(e)&&UE.BY(E)?eE(z({},e),{type:"RESERVED_KEYWORD"}):(RA(e.type)&&(E=e),e))}var Rt=["ABS","ACOS","ACOSD","ACOSH","ASIN","ASIND","ASINH","ATAN","ATAN2","ATAN2D","ATAND","ATANH","CBRT","CEIL","CEILING","COS","COSD","COSH","COT","COTD","DEGREES","DIV","EXP","FACTORIAL","FLOOR","GCD","LCM","LN","LOG","LOG10","MIN_SCALE","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SCALE","SETSEED","SIGN","SIN","SIND","SINH","SQRT","TAN","TAND","TANH","TRIM_SCALE","TRUNC","WIDTH_BUCKET","ABS","ASCII","BIT_LENGTH","BTRIM","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CONCAT","CONCAT_WS","FORMAT","INITCAP","LEFT","LENGTH","LOWER","LPAD","LTRIM","MD5","NORMALIZE","OCTET_LENGTH","OVERLAY","PARSE_IDENT","PG_CLIENT_ENCODING","POSITION","QUOTE_IDENT","QUOTE_LITERAL","QUOTE_NULLABLE","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","REPEAT","REPLACE","REVERSE","RIGHT","RPAD","RTRIM","SPLIT_PART","SPRINTF","STARTS_WITH","STRING_AGG","STRING_TO_ARRAY","STRING_TO_TABLE","STRPOS","SUBSTR","SUBSTRING","TO_ASCII","TO_HEX","TRANSLATE","TRIM","UNISTR","UPPER","BIT_COUNT","BIT_LENGTH","BTRIM","CONVERT","CONVERT_FROM","CONVERT_TO","DECODE","ENCODE","GET_BIT","GET_BYTE","LENGTH","LTRIM","MD5","OCTET_LENGTH","OVERLAY","POSITION","RTRIM","SET_BIT","SET_BYTE","SHA224","SHA256","SHA384","SHA512","STRING_AGG","SUBSTR","SUBSTRING","TRIM","BIT_COUNT","BIT_LENGTH","GET_BIT","LENGTH","OCTET_LENGTH","OVERLAY","POSITION","SET_BIT","SUBSTRING","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","TO_CHAR","TO_DATE","TO_NUMBER","TO_TIMESTAMP","CLOCK_TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_BIN","DATE_PART","DATE_TRUNC","EXTRACT","ISFINITE","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","LOCALTIME","LOCALTIMESTAMP","MAKE_DATE","MAKE_INTERVAL","MAKE_TIME","MAKE_TIMESTAMP","MAKE_TIMESTAMPTZ","NOW","PG_SLEEP","PG_SLEEP_FOR","PG_SLEEP_UNTIL","STATEMENT_TIMESTAMP","TIMEOFDAY","TO_TIMESTAMP","TRANSACTION_TIMESTAMP","ENUM_FIRST","ENUM_LAST","ENUM_RANGE","AREA","BOUND_BOX","BOX","CENTER","CIRCLE","DIAGONAL","DIAMETER","HEIGHT","ISCLOSED","ISOPEN","LENGTH","LINE","LSEG","NPOINTS","PATH","PCLOSE","POINT","POLYGON","POPEN","RADIUS","SLOPE","WIDTH","ABBREV","BROADCAST","FAMILY","HOST","HOSTMASK","INET_MERGE","INET_SAME_FAMILY","MACADDR8_SET7BIT","MASKLEN","NETMASK","NETWORK","SET_MASKLEN","TRUNC","ARRAY_TO_TSVECTOR","GET_CURRENT_TS_CONFIG","JSONB_TO_TSVECTOR","JSON_TO_TSVECTOR","LENGTH","NUMNODE","PHRASETO_TSQUERY","PLAINTO_TSQUERY","QUERYTREE","SETWEIGHT","STRIP","TO_TSQUERY","TO_TSVECTOR","TSQUERY_PHRASE","TSVECTOR_TO_ARRAY","TS_DEBUG","TS_DELETE","TS_FILTER","TS_HEADLINE","TS_LEXIZE","TS_PARSE","TS_RANK","TS_RANK_CD","TS_REWRITE","TS_STAT","TS_TOKEN_TYPE","WEBSEARCH_TO_TSQUERY","UUID","CURSOR_TO_XML","CURSOR_TO_XMLSCHEMA","DATABASE_TO_XML","DATABASE_TO_XMLSCHEMA","DATABASE_TO_XML_AND_XMLSCHEMA","NEXTVAL","QUERY_TO_XML","QUERY_TO_XMLSCHEMA","QUERY_TO_XML_AND_XMLSCHEMA","SCHEMA_TO_XML","SCHEMA_TO_XMLSCHEMA","SCHEMA_TO_XML_AND_XMLSCHEMA","STRING","TABLE_TO_XML","TABLE_TO_XMLSCHEMA","TABLE_TO_XML_AND_XMLSCHEMA","XMLAGG","XMLCOMMENT","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","XML_IS_WELL_FORMED","XML_IS_WELL_FORMED_CONTENT","XML_IS_WELL_FORMED_DOCUMENT","XPATH","XPATH_EXISTS","ARRAY_TO_JSON","JSONB_AGG","JSONB_ARRAY_ELEMENTS","JSONB_ARRAY_ELEMENTS_TEXT","JSONB_ARRAY_LENGTH","JSONB_BUILD_ARRAY","JSONB_BUILD_OBJECT","JSONB_EACH","JSONB_EACH_TEXT","JSONB_EXTRACT_PATH","JSONB_EXTRACT_PATH_TEXT","JSONB_INSERT","JSONB_OBJECT","JSONB_OBJECT_AGG","JSONB_OBJECT_KEYS","JSONB_PATH_EXISTS","JSONB_PATH_EXISTS_TZ","JSONB_PATH_MATCH","JSONB_PATH_MATCH_TZ","JSONB_PATH_QUERY","JSONB_PATH_QUERY_ARRAY","JSONB_PATH_QUERY_ARRAY_TZ","JSONB_PATH_QUERY_FIRST","JSONB_PATH_QUERY_FIRST_TZ","JSONB_PATH_QUERY_TZ","JSONB_POPULATE_RECORD","JSONB_POPULATE_RECORDSET","JSONB_PRETTY","JSONB_SET","JSONB_SET_LAX","JSONB_STRIP_NULLS","JSONB_TO_RECORD","JSONB_TO_RECORDSET","JSONB_TYPEOF","JSON_AGG","JSON_ARRAY_ELEMENTS","JSON_ARRAY_ELEMENTS_TEXT","JSON_ARRAY_LENGTH","JSON_BUILD_ARRAY","JSON_BUILD_OBJECT","JSON_EACH","JSON_EACH_TEXT","JSON_EXTRACT_PATH","JSON_EXTRACT_PATH_TEXT","JSON_OBJECT","JSON_OBJECT_AGG","JSON_OBJECT_KEYS","JSON_POPULATE_RECORD","JSON_POPULATE_RECORDSET","JSON_STRIP_NULLS","JSON_TO_RECORD","JSON_TO_RECORDSET","JSON_TYPEOF","ROW_TO_JSON","TO_JSON","TO_JSONB","TO_TIMESTAMP","CURRVAL","LASTVAL","NEXTVAL","SETVAL","COALESCE","GREATEST","LEAST","NULLIF","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_DIMS","ARRAY_FILL","ARRAY_LENGTH","ARRAY_LOWER","ARRAY_NDIMS","ARRAY_POSITION","ARRAY_POSITIONS","ARRAY_PREPEND","ARRAY_REMOVE","ARRAY_REPLACE","ARRAY_TO_STRING","ARRAY_UPPER","CARDINALITY","STRING_TO_ARRAY","TRIM_ARRAY","UNNEST","ISEMPTY","LOWER","LOWER_INC","LOWER_INF","MULTIRANGE","RANGE_MERGE","UPPER","UPPER_INC","UPPER_INF","ARRAY_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COALESCE","CORR","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","EVERY","GROUPING","JSONB_AGG","JSONB_OBJECT_AGG","JSON_AGG","JSON_OBJECT_AGG","MAX","MIN","MODE","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANGE_AGG","RANGE_INTERSECT_AGG","RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","TO_JSON","TO_JSONB","VARIANCE","VAR_POP","VAR_SAMP","XMLAGG","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER","GENERATE_SERIES","GENERATE_SUBSCRIPTS","ACLDEFAULT","ACLEXPLODE","COL_DESCRIPTION","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_QUERY","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","FORMAT_TYPE","HAS_ANY_COLUMN_PRIVILEGE","HAS_COLUMN_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE","HAS_FUNCTION_PRIVILEGE","HAS_LANGUAGE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_SEQUENCE_PRIVILEGE","HAS_SERVER_PRIVILEGE","HAS_TABLESPACE_PRIVILEGE","HAS_TABLE_PRIVILEGE","HAS_TYPE_PRIVILEGE","INET_CLIENT_ADDR","INET_CLIENT_PORT","INET_SERVER_ADDR","INET_SERVER_PORT","MAKEACLITEM","OBJ_DESCRIPTION","PG_BACKEND_PID","PG_BLOCKING_PIDS","PG_COLLATION_IS_VISIBLE","PG_CONF_LOAD_TIME","PG_CONTROL_CHECKPOINT","PG_CONTROL_INIT","PG_CONTROL_SYSTEM","PG_CONVERSION_IS_VISIBLE","PG_CURRENT_LOGFILE","PG_CURRENT_SNAPSHOT","PG_CURRENT_XACT_ID","PG_CURRENT_XACT_ID_IF_ASSIGNED","PG_DESCRIBE_OBJECT","PG_FUNCTION_IS_VISIBLE","PG_GET_CATALOG_FOREIGN_KEYS","PG_GET_CONSTRAINTDEF","PG_GET_EXPR","PG_GET_FUNCTIONDEF","PG_GET_FUNCTION_ARGUMENTS","PG_GET_FUNCTION_IDENTITY_ARGUMENTS","PG_GET_FUNCTION_RESULT","PG_GET_INDEXDEF","PG_GET_KEYWORDS","PG_GET_OBJECT_ADDRESS","PG_GET_OWNED_SEQUENCE","PG_GET_RULEDEF","PG_GET_SERIAL_SEQUENCE","PG_GET_STATISTICSOBJDEF","PG_GET_TRIGGERDEF","PG_GET_USERBYID","PG_GET_VIEWDEF","PG_HAS_ROLE","PG_IDENTIFY_OBJECT","PG_IDENTIFY_OBJECT_AS_ADDRESS","PG_INDEXAM_HAS_PROPERTY","PG_INDEX_COLUMN_HAS_PROPERTY","PG_INDEX_HAS_PROPERTY","PG_IS_OTHER_TEMP_SCHEMA","PG_JIT_AVAILABLE","PG_LAST_COMMITTED_XACT","PG_LISTENING_CHANNELS","PG_MY_TEMP_SCHEMA","PG_NOTIFICATION_QUEUE_USAGE","PG_OPCLASS_IS_VISIBLE","PG_OPERATOR_IS_VISIBLE","PG_OPFAMILY_IS_VISIBLE","PG_OPTIONS_TO_TABLE","PG_POSTMASTER_START_TIME","PG_SAFE_SNAPSHOT_BLOCKING_PIDS","PG_SNAPSHOT_XIP","PG_SNAPSHOT_XMAX","PG_SNAPSHOT_XMIN","PG_STATISTICS_OBJ_IS_VISIBLE","PG_TABLESPACE_DATABASES","PG_TABLESPACE_LOCATION","PG_TABLE_IS_VISIBLE","PG_TRIGGER_DEPTH","PG_TS_CONFIG_IS_VISIBLE","PG_TS_DICT_IS_VISIBLE","PG_TS_PARSER_IS_VISIBLE","PG_TS_TEMPLATE_IS_VISIBLE","PG_TYPEOF","PG_TYPE_IS_VISIBLE","PG_VISIBLE_IN_SNAPSHOT","PG_XACT_COMMIT_TIMESTAMP","PG_XACT_COMMIT_TIMESTAMP_ORIGIN","PG_XACT_STATUS","PQSERVERVERSION","ROW_SECURITY_ACTIVE","SESSION_USER","SHOBJ_DESCRIPTION","TO_REGCLASS","TO_REGCOLLATION","TO_REGNAMESPACE","TO_REGOPER","TO_REGOPERATOR","TO_REGPROC","TO_REGPROCEDURE","TO_REGROLE","TO_REGTYPE","TXID_CURRENT","TXID_CURRENT_IF_ASSIGNED","TXID_CURRENT_SNAPSHOT","TXID_SNAPSHOT_XIP","TXID_SNAPSHOT_XMAX","TXID_SNAPSHOT_XMIN","TXID_STATUS","TXID_VISIBLE_IN_SNAPSHOT","USER","VERSION","BRIN_DESUMMARIZE_RANGE","BRIN_SUMMARIZE_NEW_VALUES","BRIN_SUMMARIZE_RANGE","CONVERT_FROM","CURRENT_SETTING","GIN_CLEAN_PENDING_LIST","PG_ADVISORY_LOCK","PG_ADVISORY_LOCK_SHARED","PG_ADVISORY_UNLOCK","PG_ADVISORY_UNLOCK_ALL","PG_ADVISORY_UNLOCK_SHARED","PG_ADVISORY_XACT_LOCK","PG_ADVISORY_XACT_LOCK_SHARED","PG_BACKUP_START_TIME","PG_CANCEL_BACKEND","PG_COLLATION_ACTUAL_VERSION","PG_COLUMN_COMPRESSION","PG_COLUMN_SIZE","PG_COPY_LOGICAL_REPLICATION_SLOT","PG_COPY_PHYSICAL_REPLICATION_SLOT","PG_CREATE_LOGICAL_REPLICATION_SLOT","PG_CREATE_PHYSICAL_REPLICATION_SLOT","PG_CREATE_RESTORE_POINT","PG_CURRENT_WAL_FLUSH_LSN","PG_CURRENT_WAL_INSERT_LSN","PG_CURRENT_WAL_LSN","PG_DATABASE_SIZE","PG_DROP_REPLICATION_SLOT","PG_EXPORT_SNAPSHOT","PG_FILENODE_RELATION","PG_GET_WAL_REPLAY_PAUSE_STATE","PG_IMPORT_SYSTEM_COLLATIONS","PG_INDEXES_SIZE","PG_IS_IN_BACKUP","PG_IS_IN_RECOVERY","PG_IS_WAL_REPLAY_PAUSED","PG_LAST_WAL_RECEIVE_LSN","PG_LAST_WAL_REPLAY_LSN","PG_LAST_XACT_REPLAY_TIMESTAMP","PG_LOGICAL_EMIT_MESSAGE","PG_LOGICAL_SLOT_GET_BINARY_CHANGES","PG_LOGICAL_SLOT_GET_CHANGES","PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES","PG_LOGICAL_SLOT_PEEK_CHANGES","PG_LOG_BACKEND_MEMORY_CONTEXTS","PG_LS_ARCHIVE_STATUSDIR","PG_LS_DIR","PG_LS_LOGDIR","PG_LS_TMPDIR","PG_LS_WALDIR","PG_PARTITION_ANCESTORS","PG_PARTITION_ROOT","PG_PARTITION_TREE","PG_PROMOTE","PG_READ_BINARY_FILE","PG_READ_FILE","PG_RELATION_FILENODE","PG_RELATION_FILEPATH","PG_RELATION_SIZE","PG_RELOAD_CONF","PG_REPLICATION_ORIGIN_ADVANCE","PG_REPLICATION_ORIGIN_CREATE","PG_REPLICATION_ORIGIN_DROP","PG_REPLICATION_ORIGIN_OID","PG_REPLICATION_ORIGIN_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_IS_SETUP","PG_REPLICATION_ORIGIN_SESSION_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_RESET","PG_REPLICATION_ORIGIN_SESSION_SETUP","PG_REPLICATION_ORIGIN_XACT_RESET","PG_REPLICATION_ORIGIN_XACT_SETUP","PG_REPLICATION_SLOT_ADVANCE","PG_ROTATE_LOGFILE","PG_SIZE_BYTES","PG_SIZE_PRETTY","PG_START_BACKUP","PG_STAT_FILE","PG_STOP_BACKUP","PG_SWITCH_WAL","PG_TABLESPACE_SIZE","PG_TABLE_SIZE","PG_TERMINATE_BACKEND","PG_TOTAL_RELATION_SIZE","PG_TRY_ADVISORY_LOCK","PG_TRY_ADVISORY_LOCK_SHARED","PG_TRY_ADVISORY_XACT_LOCK","PG_TRY_ADVISORY_XACT_LOCK_SHARED","PG_WALFILE_NAME","PG_WALFILE_NAME_OFFSET","PG_WAL_LSN_DIFF","PG_WAL_REPLAY_PAUSE","PG_WAL_REPLAY_RESUME","SET_CONFIG","SUPPRESS_REDUNDANT_UPDATES_TRIGGER","TSVECTOR_UPDATE_TRIGGER","TSVECTOR_UPDATE_TRIGGER_COLUMN","PG_EVENT_TRIGGER_DDL_COMMANDS","PG_EVENT_TRIGGER_DROPPED_OBJECTS","PG_EVENT_TRIGGER_TABLE_REWRITE_OID","PG_EVENT_TRIGGER_TABLE_REWRITE_REASON","PG_GET_OBJECT_ADDRESS","PG_MCV_LIST_ITEMS","CAST"],At=["ALL","ANALYSE","ANALYZE","AND","ANY","AS","ASC","ASYMMETRIC","AUTHORIZATION","BETWEEN","BINARY","BOTH","CASE","CAST","CHECK","COLLATE","COLLATION","COLUMN","CONCURRENTLY","CONSTRAINT","CREATE","CROSS","CURRENT_CATALOG","CURRENT_DATE","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DAY","DEFAULT","DEFERRABLE","DESC","DISTINCT","DO","ELSE","END","EXCEPT","EXISTS","FALSE","FETCH","FILTER","FOR","FOREIGN","FREEZE","FROM","FULL","GRANT","GROUP","HAVING","HOUR","ILIKE","IN","INITIALLY","INNER","INOUT","INTERSECT","INTO","IS","ISNULL","JOIN","LATERAL","LEADING","LEFT","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","MINUTE","MONTH","NATURAL","NOT","NOTNULL","NULL","NULLIF","OFFSET","ON","ONLY","OR","ORDER","OUT","OUTER","OVER","OVERLAPS","PLACING","PRIMARY","REFERENCES","RETURNING","RIGHT","ROW","SECOND","SELECT","SESSION_USER","SIMILAR","SOME","SYMMETRIC","TABLE","TABLESAMPLE","THEN","TO","TRAILING","TRUE","UNION","UNIQUE","USER","USING","VALUES","VARIADIC","VERBOSE","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","YEAR"],St=["ARRAY","BIGINT","BIT","BIT VARYING","BOOL","BOOLEAN","CHAR","CHARACTER","CHARACTER VARYING","DECIMAL","DEC","DOUBLE","ENUM","FLOAT","INT","INTEGER","INTERVAL","NCHAR","NUMERIC","PRECISION","REAL","SMALLINT","TEXT","TIME","TIMESTAMP","TIMESTAMPTZ","VARCHAR","XML","ZONE"],Ot=_(["SELECT [ALL | DISTINCT]"]),It=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","FOR {UPDATE | NO KEY UPDATE | SHARE | KEY SHARE} [OF]","INSERT INTO","VALUES","DEFAULT VALUES","SET","RETURNING"]),qe=_(["CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]"]),vT=_(["CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW","CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","UPDATE [ONLY]","WHERE CURRENT OF","ON CONFLICT","DELETE FROM [ONLY]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS] [ONLY]","ALTER TABLE ALL IN TABLESPACE","RENAME [COLUMN]","RENAME TO","ADD [COLUMN] [IF NOT EXISTS]","DROP [COLUMN] [IF EXISTS]","ALTER [COLUMN]","SET DATA TYPE","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","TRUNCATE [TABLE] [ONLY]","SET SCHEMA","AFTER","ABORT","ALTER AGGREGATE","ALTER COLLATION","ALTER CONVERSION","ALTER DATABASE","ALTER DEFAULT PRIVILEGES","ALTER DOMAIN","ALTER EVENT TRIGGER","ALTER EXTENSION","ALTER FOREIGN DATA WRAPPER","ALTER FOREIGN TABLE","ALTER FUNCTION","ALTER GROUP","ALTER INDEX","ALTER LANGUAGE","ALTER LARGE OBJECT","ALTER MATERIALIZED VIEW","ALTER OPERATOR","ALTER OPERATOR CLASS","ALTER OPERATOR FAMILY","ALTER POLICY","ALTER PROCEDURE","ALTER PUBLICATION","ALTER ROLE","ALTER ROUTINE","ALTER RULE","ALTER SCHEMA","ALTER SEQUENCE","ALTER SERVER","ALTER STATISTICS","ALTER SUBSCRIPTION","ALTER SYSTEM","ALTER TABLESPACE","ALTER TEXT SEARCH CONFIGURATION","ALTER TEXT SEARCH DICTIONARY","ALTER TEXT SEARCH PARSER","ALTER TEXT SEARCH TEMPLATE","ALTER TRIGGER","ALTER TYPE","ALTER USER","ALTER USER MAPPING","ALTER VIEW","ANALYZE","BEGIN","CALL","CHECKPOINT","CLOSE","CLUSTER","COMMIT","COMMIT PREPARED","COPY","CREATE ACCESS METHOD","CREATE AGGREGATE","CREATE CAST","CREATE COLLATION","CREATE CONVERSION","CREATE DATABASE","CREATE DOMAIN","CREATE EVENT TRIGGER","CREATE EXTENSION","CREATE FOREIGN DATA WRAPPER","CREATE FOREIGN TABLE","CREATE FUNCTION","CREATE GROUP","CREATE INDEX","CREATE LANGUAGE","CREATE OPERATOR","CREATE OPERATOR CLASS","CREATE OPERATOR FAMILY","CREATE POLICY","CREATE PROCEDURE","CREATE PUBLICATION","CREATE ROLE","CREATE RULE","CREATE SCHEMA","CREATE SEQUENCE","CREATE SERVER","CREATE STATISTICS","CREATE SUBSCRIPTION","CREATE TABLESPACE","CREATE TEXT SEARCH CONFIGURATION","CREATE TEXT SEARCH DICTIONARY","CREATE TEXT SEARCH PARSER","CREATE TEXT SEARCH TEMPLATE","CREATE TRANSFORM","CREATE TRIGGER","CREATE TYPE","CREATE USER","CREATE USER MAPPING","DEALLOCATE","DECLARE","DISCARD","DROP ACCESS METHOD","DROP AGGREGATE","DROP CAST","DROP COLLATION","DROP CONVERSION","DROP DATABASE","DROP DOMAIN","DROP EVENT TRIGGER","DROP EXTENSION","DROP FOREIGN DATA WRAPPER","DROP FOREIGN TABLE","DROP FUNCTION","DROP GROUP","DROP INDEX","DROP LANGUAGE","DROP MATERIALIZED VIEW","DROP OPERATOR","DROP OPERATOR CLASS","DROP OPERATOR FAMILY","DROP OWNED","DROP POLICY","DROP PROCEDURE","DROP PUBLICATION","DROP ROLE","DROP ROUTINE","DROP RULE","DROP SCHEMA","DROP SEQUENCE","DROP SERVER","DROP STATISTICS","DROP SUBSCRIPTION","DROP TABLESPACE","DROP TEXT SEARCH CONFIGURATION","DROP TEXT SEARCH DICTIONARY","DROP TEXT SEARCH PARSER","DROP TEXT SEARCH TEMPLATE","DROP TRANSFORM","DROP TRIGGER","DROP TYPE","DROP USER","DROP USER MAPPING","DROP VIEW","EXECUTE","EXPLAIN","FETCH","GRANT","IMPORT FOREIGN SCHEMA","LISTEN","LOAD","LOCK","MOVE","NOTIFY","PREPARE","PREPARE TRANSACTION","REASSIGN OWNED","REFRESH MATERIALIZED VIEW","REINDEX","RELEASE SAVEPOINT","RESET","REVOKE","ROLLBACK","ROLLBACK PREPARED","ROLLBACK TO SAVEPOINT","SAVEPOINT","SECURITY LABEL","SELECT INTO","SET CONSTRAINTS","SET ROLE","SET SESSION AUTHORIZATION","SET TRANSACTION","SHOW","START TRANSACTION","UNLISTEN","VACUUM"]),tt=_(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),Nt=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),st=_(["PRIMARY KEY","GENERATED {ALWAYS | BY DEFAULT} AS IDENTITY","ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN","[TIMESTAMP | TIME] {WITH | WITHOUT} TIME ZONE","IS [NOT] DISTINCT FROM"]),rt={name:"postgresql",tokenizerOptions:{reservedSelect:Ot,reservedClauses:[...It,...qe,...vT],reservedSetOperations:tt,reservedJoins:Nt,reservedPhrases:st,reservedKeywords:At,reservedDataTypes:St,reservedFunctionNames:Rt,nestedBlockComments:!0,extraParens:["[]"],stringTypes:["$$",{quote:"''-qq",prefixes:["U&"]},{quote:"''-qq-bs",prefixes:["E"],requirePrefix:!0},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:[{quote:'""-qq',prefixes:["U&"]}],identChars:{rest:"$"},paramTypes:{numbered:["$"]},operators:["%","^","|/","||/","@",":=","&","|","#","~","<<",">>","~>~","~<~","~>=~","~<=~","@-@","@@","##","<->","&&","&<","&>","<<|","&<|","|>>","|&>","<^","^>","?#","?-","?|","?-|","?||","@>","<@","~=","?","@?","?&","->","->>","#>","#>>","#-","=>",">>=","<<=","~~","~~*","!~~","!~~*","~","~*","!~","!~*","-|-","||","@@@","!!","^@","<%","%>","<<%","%>>","<<->","<->>","<<<->","<->>>","::",":"]},formatOptions:{alwaysDenseOperators:["::",":"],onelineClauses:[...qe,...vT],tabularOnelineClauses:vT}},_t=["ANY_VALUE","APPROXIMATE PERCENTILE_DISC","AVG","COUNT","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP","array","array_concat","array_flatten","get_array_length","split_to_array","subarray","BIT_AND","BIT_OR","BOOL_AND","BOOL_OR","COALESCE","DECODE","GREATEST","LEAST","NVL","NVL2","NULLIF","ADD_MONTHS","AT TIME ZONE","CONVERT_TIMEZONE","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_CMP","DATE_CMP_TIMESTAMP","DATE_CMP_TIMESTAMPTZ","DATE_PART_YEAR","DATEADD","DATEDIFF","DATE_PART","DATE_TRUNC","EXTRACT","GETDATE","INTERVAL_CMP","LAST_DAY","MONTHS_BETWEEN","NEXT_DAY","SYSDATE","TIMEOFDAY","TIMESTAMP_CMP","TIMESTAMP_CMP_DATE","TIMESTAMP_CMP_TIMESTAMPTZ","TIMESTAMPTZ_CMP","TIMESTAMPTZ_CMP_DATE","TIMESTAMPTZ_CMP_TIMESTAMP","TIMEZONE","TO_TIMESTAMP","TRUNC","AddBBox","DropBBox","GeometryType","ST_AddPoint","ST_Angle","ST_Area","ST_AsBinary","ST_AsEWKB","ST_AsEWKT","ST_AsGeoJSON","ST_AsText","ST_Azimuth","ST_Boundary","ST_Collect","ST_Contains","ST_ContainsProperly","ST_ConvexHull","ST_CoveredBy","ST_Covers","ST_Crosses","ST_Dimension","ST_Disjoint","ST_Distance","ST_DistanceSphere","ST_DWithin","ST_EndPoint","ST_Envelope","ST_Equals","ST_ExteriorRing","ST_Force2D","ST_Force3D","ST_Force3DM","ST_Force3DZ","ST_Force4D","ST_GeometryN","ST_GeometryType","ST_GeomFromEWKB","ST_GeomFromEWKT","ST_GeomFromText","ST_GeomFromWKB","ST_InteriorRingN","ST_Intersects","ST_IsPolygonCCW","ST_IsPolygonCW","ST_IsClosed","ST_IsCollection","ST_IsEmpty","ST_IsSimple","ST_IsValid","ST_Length","ST_LengthSphere","ST_Length2D","ST_LineFromMultiPoint","ST_LineInterpolatePoint","ST_M","ST_MakeEnvelope","ST_MakeLine","ST_MakePoint","ST_MakePolygon","ST_MemSize","ST_MMax","ST_MMin","ST_Multi","ST_NDims","ST_NPoints","ST_NRings","ST_NumGeometries","ST_NumInteriorRings","ST_NumPoints","ST_Perimeter","ST_Perimeter2D","ST_Point","ST_PointN","ST_Points","ST_Polygon","ST_RemovePoint","ST_Reverse","ST_SetPoint","ST_SetSRID","ST_Simplify","ST_SRID","ST_StartPoint","ST_Touches","ST_Within","ST_X","ST_XMax","ST_XMin","ST_Y","ST_YMax","ST_YMin","ST_Z","ST_ZMax","ST_ZMin","SupportsBBox","CHECKSUM","FUNC_SHA1","FNV_HASH","MD5","SHA","SHA1","SHA2","HLL","HLL_CREATE_SKETCH","HLL_CARDINALITY","HLL_COMBINE","IS_VALID_JSON","IS_VALID_JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_EXTRACT_ARRAY_ELEMENT_TEXT","JSON_EXTRACT_PATH_TEXT","JSON_PARSE","JSON_SERIALIZE","ABS","ACOS","ASIN","ATAN","ATAN2","CBRT","CEILING","CEIL","COS","COT","DEGREES","DEXP","DLOG1","DLOG10","EXP","FLOOR","LN","LOG","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SIN","SIGN","SQRT","TAN","TO_HEX","TRUNC","EXPLAIN_MODEL","ASCII","BPCHARCMP","BTRIM","BTTEXT_PATTERN_CMP","CHAR_LENGTH","CHARACTER_LENGTH","CHARINDEX","CHR","COLLATE","CONCAT","CRC32","DIFFERENCE","INITCAP","LEFT","RIGHT","LEN","LENGTH","LOWER","LPAD","RPAD","LTRIM","OCTETINDEX","OCTET_LENGTH","POSITION","QUOTE_IDENT","QUOTE_LITERAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","REPLICATE","REVERSE","RTRIM","SOUNDEX","SPLIT_PART","STRPOS","STRTOL","SUBSTRING","TEXTLEN","TRANSLATE","TRIM","UPPER","decimal_precision","decimal_scale","is_array","is_bigint","is_boolean","is_char","is_decimal","is_float","is_integer","is_object","is_scalar","is_smallint","is_varchar","json_typeof","AVG","COUNT","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAST_VALUE","LAG","LEAD","LISTAGG","MAX","MEDIAN","MIN","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP","CAST","CONVERT","TO_CHAR","TO_DATE","TO_NUMBER","TEXT_TO_INT_ALT","TEXT_TO_NUMERIC_ALT","CHANGE_QUERY_PRIORITY","CHANGE_SESSION_PRIORITY","CHANGE_USER_PRIORITY","CURRENT_SETTING","PG_CANCEL_BACKEND","PG_TERMINATE_BACKEND","REBOOT_CLUSTER","SET_CONFIG","CURRENT_AWS_ACCOUNT","CURRENT_DATABASE","CURRENT_NAMESPACE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","CURRENT_USER_ID","HAS_ASSUMEROLE_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_TABLE_PRIVILEGE","PG_BACKEND_PID","PG_GET_COLS","PG_GET_GRANTEE_BY_IAM_ROLE","PG_GET_IAM_ROLE_BY_USER","PG_GET_LATE_BINDING_VIEW_COLS","PG_LAST_COPY_COUNT","PG_LAST_COPY_ID","PG_LAST_UNLOAD_ID","PG_LAST_QUERY_ID","PG_LAST_UNLOAD_COUNT","SESSION_USER","SLICE_NUM","USER","VERSION"],Ct=["AES128","AES256","ALL","ALLOWOVERWRITE","ANY","AS","ASC","AUTHORIZATION","BACKUP","BETWEEN","BINARY","BOTH","CHECK","COLUMN","CONSTRAINT","CREATE","CROSS","DEFAULT","DEFERRABLE","DEFLATE","DEFRAG","DESC","DISABLE","DISTINCT","DO","ENABLE","ENCODE","ENCRYPT","ENCRYPTION","EXPLICIT","FALSE","FOR","FOREIGN","FREEZE","FROM","FULL","GLOBALDICT256","GLOBALDICT64K","GROUP","IDENTITY","IGNORE","ILIKE","IN","INITIALLY","INNER","INTO","IS","ISNULL","LANGUAGE","LEADING","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","LUN","LUNS","MINUS","NATURAL","NEW","NOT","NOTNULL","NULL","NULLS","OFF","OFFLINE","OFFSET","OID","OLD","ON","ONLY","OPEN","ORDER","OUTER","OVERLAPS","PARALLEL","PARTITION","PERCENT","PERMISSIONS","PLACING","PRIMARY","RECOVER","REFERENCES","REJECTLOG","RESORT","RESPECT","RESTORE","SIMILAR","SNAPSHOT","SOME","SYSTEM","TABLE","TAG","TDES","THEN","TIMESTAMP","TO","TOP","TRAILING","TRUE","UNIQUE","USING","VERBOSE","WALLET","WITHOUT","ACCEPTANYDATE","ACCEPTINVCHARS","BLANKSASNULL","DATEFORMAT","EMPTYASNULL","ENCODING","ESCAPE","EXPLICIT_IDS","FILLRECORD","IGNOREBLANKLINES","IGNOREHEADER","REMOVEQUOTES","ROUNDEC","TIMEFORMAT","TRIMBLANKS","TRUNCATECOLUMNS","COMPROWS","COMPUPDATE","MAXERROR","NOLOAD","STATUPDATE","FORMAT","CSV","DELIMITER","FIXEDWIDTH","SHAPEFILE","AVRO","JSON","PARQUET","ORC","ACCESS_KEY_ID","CREDENTIALS","ENCRYPTED","IAM_ROLE","MASTER_SYMMETRIC_KEY","SECRET_ACCESS_KEY","SESSION_TOKEN","BZIP2","GZIP","LZOP","ZSTD","MANIFEST","READRATIO","REGION","SSH","RAW","AZ64","BYTEDICT","DELTA","DELTA32K","LZO","MOSTLY8","MOSTLY16","MOSTLY32","RUNLENGTH","TEXT255","TEXT32K","CATALOG_ROLE","SECRET_ARN","EXTERNAL","AUTO","EVEN","KEY","PREDICATE","COMPRESSION"],at=["ARRAY","BIGINT","BPCHAR","CHAR","CHARACTER VARYING","CHARACTER","DECIMAL","INT","INT2","INT4","INT8","INTEGER","NCHAR","NUMERIC","NVARCHAR","SMALLINT","TEXT","VARBYTE","VARCHAR"],Lt=_(["SELECT [ALL | DISTINCT]"]),it=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET"]),Ze=_(["CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]"]),yT=_(["CREATE [OR REPLACE | MATERIALIZED] VIEW","UPDATE","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ALTER TABLE APPEND","ADD [COLUMN]","DROP [COLUMN]","RENAME TO","RENAME COLUMN","ALTER COLUMN","TYPE","ENCODE","TRUNCATE [TABLE]","ABORT","ALTER DATABASE","ALTER DATASHARE","ALTER DEFAULT PRIVILEGES","ALTER GROUP","ALTER MATERIALIZED VIEW","ALTER PROCEDURE","ALTER SCHEMA","ALTER USER","ANALYSE","ANALYZE","ANALYSE COMPRESSION","ANALYZE COMPRESSION","BEGIN","CALL","CANCEL","CLOSE","COMMIT","COPY","CREATE DATABASE","CREATE DATASHARE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL SCHEMA","CREATE EXTERNAL TABLE","CREATE FUNCTION","CREATE GROUP","CREATE LIBRARY","CREATE MODEL","CREATE PROCEDURE","CREATE SCHEMA","CREATE USER","DEALLOCATE","DECLARE","DESC DATASHARE","DROP DATABASE","DROP DATASHARE","DROP FUNCTION","DROP GROUP","DROP LIBRARY","DROP MODEL","DROP MATERIALIZED VIEW","DROP PROCEDURE","DROP SCHEMA","DROP USER","DROP VIEW","DROP","EXECUTE","EXPLAIN","FETCH","GRANT","LOCK","PREPARE","REFRESH MATERIALIZED VIEW","RESET","REVOKE","ROLLBACK","SELECT INTO","SET SESSION AUTHORIZATION","SET SESSION CHARACTERISTICS","SHOW","SHOW EXTERNAL TABLE","SHOW MODEL","SHOW DATASHARES","SHOW PROCEDURE","SHOW TABLE","SHOW VIEW","START TRANSACTION","UNLOAD","VACUUM"]),nt=_(["UNION [ALL]","EXCEPT","INTERSECT","MINUS"]),ot=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),Dt=_(["NULL AS","DATA CATALOG","HIVE METASTORE","{ROWS | RANGE} BETWEEN"]),Pt={name:"redshift",tokenizerOptions:{reservedSelect:Lt,reservedClauses:[...it,...Ze,...yT],reservedSetOperations:nt,reservedJoins:ot,reservedPhrases:Dt,reservedKeywords:Ct,reservedDataTypes:at,reservedFunctionNames:_t,stringTypes:["''-qq"],identTypes:['""-qq'],identChars:{first:"#"},paramTypes:{numbered:["$"]},operators:["^","%","@","|/","||/","&","|","~","<<",">>","||","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:[...Ze,...yT],tabularOnelineClauses:yT}},lt=["ADD","AFTER","ALL","ALTER","ANALYZE","AND","ANTI","ANY","ARCHIVE","AS","ASC","AT","AUTHORIZATION","BETWEEN","BOTH","BUCKET","BUCKETS","BY","CACHE","CASCADE","CAST","CHANGE","CHECK","CLEAR","CLUSTER","CLUSTERED","CODEGEN","COLLATE","COLLECTION","COLUMN","COLUMNS","COMMENT","COMMIT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONSTRAINT","COST","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATA","DATABASE","DATABASES","DAY","DBPROPERTIES","DEFINED","DELETE","DELIMITED","DESC","DESCRIBE","DFS","DIRECTORIES","DIRECTORY","DISTINCT","DISTRIBUTE","DIV","DROP","ESCAPE","ESCAPED","EXCEPT","EXCHANGE","EXISTS","EXPORT","EXTENDED","EXTERNAL","EXTRACT","FALSE","FETCH","FIELDS","FILTER","FILEFORMAT","FIRST","FIRST_VALUE","FOLLOWING","FOR","FOREIGN","FORMAT","FORMATTED","FULL","FUNCTION","FUNCTIONS","GLOBAL","GRANT","GROUP","GROUPING","HOUR","IF","IGNORE","IMPORT","IN","INDEX","INDEXES","INNER","INPATH","INPUTFORMAT","INTERSECT","INTO","IS","ITEMS","KEYS","LAST","LAST_VALUE","LATERAL","LAZY","LEADING","LEFT","LIKE","LINES","LIST","LOCAL","LOCATION","LOCK","LOCKS","LOGICAL","MACRO","MATCHED","MERGE","MINUTE","MONTH","MSCK","NAMESPACE","NAMESPACES","NATURAL","NO","NOT","NULL","NULLS","OF","ONLY","OPTION","OPTIONS","OR","ORDER","OUT","OUTER","OUTPUTFORMAT","OVER","OVERLAPS","OVERLAY","OVERWRITE","OWNER","PARTITION","PARTITIONED","PARTITIONS","PERCENT","PLACING","POSITION","PRECEDING","PRIMARY","PRINCIPALS","PROPERTIES","PURGE","QUERY","RANGE","RECORDREADER","RECORDWRITER","RECOVER","REDUCE","REFERENCES","RENAME","REPAIR","REPLACE","RESPECT","RESTRICT","REVOKE","RIGHT","RLIKE","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","SCHEMA","SECOND","SELECT","SEMI","SEPARATED","SERDE","SERDEPROPERTIES","SESSION_USER","SETS","SHOW","SKEWED","SOME","SORT","SORTED","START","STATISTICS","STORED","STRATIFY","SUBSTR","SUBSTRING","TABLE","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","THEN","TO","TOUCH","TRAILING","TRANSACTION","TRANSACTIONS","TRIM","TRUE","TRUNCATE","UNARCHIVE","UNBOUNDED","UNCACHE","UNIQUE","UNKNOWN","UNLOCK","UNSET","USE","USER","USING","VIEW","WINDOW","YEAR","ANALYSE","ARRAY_ZIP","COALESCE","CONTAINS","CONVERT","DAYS","DAY_HOUR","DAY_MINUTE","DAY_SECOND","DECODE","DEFAULT","DISTINCTROW","ENCODE","EXPLODE","EXPLODE_OUTER","FIXED","GREATEST","GROUP_CONCAT","HOURS","HOUR_MINUTE","HOUR_SECOND","IFNULL","LEAST","LEVEL","MINUTE_SECOND","NULLIF","OFFSET","ON","OPTIMIZE","REGEXP","SEPARATOR","SIZE","TYPE","TYPES","UNSIGNED","VARIABLES","YEAR_MONTH"],Mt=["ARRAY","BIGINT","BINARY","BOOLEAN","BYTE","CHAR","DATE","DEC","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","INTERVAL","LONG","MAP","NUMERIC","REAL","SHORT","SMALLINT","STRING","STRUCT","TIMESTAMP_LTZ","TIMESTAMP_NTZ","TIMESTAMP","TINYINT","VARCHAR"],Ut=["APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COUNT","COUNT","COUNT_IF","COUNT_MIN_SKETCH","COVAR_POP","COVAR_SAMP","EVERY","FIRST","FIRST_VALUE","GROUPING","GROUPING_ID","KURTOSIS","LAST","LAST_VALUE","MAX","MAX_BY","MEAN","MIN","MIN_BY","PERCENTILE","PERCENTILE","PERCENTILE_APPROX","SKEWNESS","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE","CUME_DIST","DENSE_RANK","LAG","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER","ARRAY","ARRAY_CONTAINS","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_UNION","ARRAYS_OVERLAP","ARRAYS_ZIP","FLATTEN","SEQUENCE","SHUFFLE","SLICE","SORT_ARRAY","ELEMENT_AT","ELEMENT_AT","MAP_CONCAT","MAP_ENTRIES","MAP_FROM_ARRAYS","MAP_FROM_ENTRIES","MAP_KEYS","MAP_VALUES","STR_TO_MAP","ADD_MONTHS","CURRENT_DATE","CURRENT_DATE","CURRENT_TIMESTAMP","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","DATE_ADD","DATE_FORMAT","DATE_FROM_UNIX_DATE","DATE_PART","DATE_SUB","DATE_TRUNC","DATEDIFF","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MAKE_DATE","MAKE_DT_INTERVAL","MAKE_INTERVAL","MAKE_TIMESTAMP","MAKE_YM_INTERVAL","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","NOW","QUARTER","SECOND","SESSION_WINDOW","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_SECONDS","TO_DATE","TO_TIMESTAMP","TO_UNIX_TIMESTAMP","TO_UTC_TIMESTAMP","TRUNC","UNIX_DATE","UNIX_MICROS","UNIX_MILLIS","UNIX_SECONDS","UNIX_TIMESTAMP","WEEKDAY","WEEKOFYEAR","WINDOW","YEAR","FROM_JSON","GET_JSON_OBJECT","JSON_ARRAY_LENGTH","JSON_OBJECT_KEYS","JSON_TUPLE","SCHEMA_OF_JSON","TO_JSON","ABS","ACOS","ACOSH","AGGREGATE","ARRAY_SORT","ASCII","ASIN","ASINH","ASSERT_TRUE","ATAN","ATAN2","ATANH","BASE64","BIN","BIT_COUNT","BIT_GET","BIT_LENGTH","BROUND","BTRIM","CARDINALITY","CBRT","CEIL","CEILING","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONV","COS","COSH","COT","CRC32","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_USER","DEGREES","ELT","EXP","EXPM1","FACTORIAL","FIND_IN_SET","FLOOR","FORALL","FORMAT_NUMBER","FORMAT_STRING","FROM_CSV","GETBIT","HASH","HEX","HYPOT","INITCAP","INLINE","INLINE_OUTER","INPUT_FILE_BLOCK_LENGTH","INPUT_FILE_BLOCK_START","INPUT_FILE_NAME","INSTR","ISNAN","ISNOTNULL","ISNULL","JAVA_METHOD","LCASE","LEFT","LENGTH","LEVENSHTEIN","LN","LOCATE","LOG","LOG10","LOG1P","LOG2","LOWER","LPAD","LTRIM","MAP_FILTER","MAP_ZIP_WITH","MD5","MOD","MONOTONICALLY_INCREASING_ID","NAMED_STRUCT","NANVL","NEGATIVE","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARSE_URL","PI","PMOD","POSEXPLODE","POSEXPLODE_OUTER","POSITION","POSITIVE","POW","POWER","PRINTF","RADIANS","RAISE_ERROR","RAND","RANDN","RANDOM","REFLECT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_REPLACE","REPEAT","REPLACE","REVERSE","RIGHT","RINT","ROUND","RPAD","RTRIM","SCHEMA_OF_CSV","SENTENCES","SHA","SHA1","SHA2","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIGNUM","SIN","SINH","SOUNDEX","SPACE","SPARK_PARTITION_ID","SPLIT","SQRT","STACK","SUBSTR","SUBSTRING","SUBSTRING_INDEX","TAN","TANH","TO_CSV","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRY_ADD","TRY_DIVIDE","TYPEOF","UCASE","UNBASE64","UNHEX","UPPER","UUID","VERSION","WIDTH_BUCKET","XPATH","XPATH_BOOLEAN","XPATH_DOUBLE","XPATH_FLOAT","XPATH_INT","XPATH_LONG","XPATH_NUMBER","XPATH_SHORT","XPATH_STRING","XXHASH64","ZIP_WITH","CAST","COALESCE","NULLIF"],ut=_(["SELECT [ALL | DISTINCT]"]),ct=_(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT [INTO | OVERWRITE] [TABLE]","VALUES","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE"]),je=_(["CREATE [EXTERNAL] TABLE [IF NOT EXISTS]"]),WT=_(["CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD COLUMNS","DROP {COLUMN | COLUMNS}","RENAME TO","RENAME COLUMN","ALTER COLUMN","TRUNCATE TABLE","LATERAL VIEW","ALTER DATABASE","ALTER VIEW","CREATE DATABASE","CREATE FUNCTION","DROP DATABASE","DROP FUNCTION","DROP VIEW","REPAIR TABLE","USE DATABASE","TABLESAMPLE","PIVOT","TRANSFORM","EXPLAIN","ADD FILE","ADD JAR","ANALYZE TABLE","CACHE TABLE","CLEAR CACHE","DESCRIBE DATABASE","DESCRIBE FUNCTION","DESCRIBE QUERY","DESCRIBE TABLE","LIST FILE","LIST JAR","REFRESH","REFRESH TABLE","REFRESH FUNCTION","RESET","SHOW COLUMNS","SHOW CREATE TABLE","SHOW DATABASES","SHOW FUNCTIONS","SHOW PARTITIONS","SHOW TABLE EXTENDED","SHOW TABLES","SHOW TBLPROPERTIES","SHOW VIEWS","UNCACHE TABLE"]),dt=_(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),Gt=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT] {ANTI | SEMI} JOIN","NATURAL [LEFT] {ANTI | SEMI} JOIN"]),pt=_(["ON DELETE","ON UPDATE","CURRENT ROW","{ROWS | RANGE} BETWEEN"]),Ht={name:"spark",tokenizerOptions:{reservedSelect:ut,reservedClauses:[...ct,...je,...WT],reservedSetOperations:dt,reservedJoins:Gt,reservedPhrases:pt,supportsXor:!0,reservedKeywords:lt,reservedDataTypes:Mt,reservedFunctionNames:Ut,extraParens:["[]"],stringTypes:["''-bs",'""-bs',{quote:"''-raw",prefixes:["R","X"],requirePrefix:!0},{quote:'""-raw',prefixes:["R","X"],requirePrefix:!0}],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||","->"],postProcess:Bt},formatOptions:{onelineClauses:[...je,...WT],tabularOnelineClauses:WT}};function Bt(T){return T.map((E,e)=>{const R=T[e-1]||VE,A=T[e+1]||VE;return UE.WINDOW(E)&&A.type==="OPEN_PAREN"?eE(z({},E),{type:"RESERVED_FUNCTION_NAME"}):E.text==="ITEMS"&&E.type==="RESERVED_KEYWORD"&&!(R.text==="COLLECTION"&&A.text==="TERMINATED")?eE(z({},E),{type:"IDENTIFIER",text:E.raw}):E})}var mt=["ABS","CHANGES","CHAR","COALESCE","FORMAT","GLOB","HEX","IFNULL","IIF","INSTR","LAST_INSERT_ROWID","LENGTH","LIKE","LIKELIHOOD","LIKELY","LOAD_EXTENSION","LOWER","LTRIM","NULLIF","PRINTF","QUOTE","RANDOM","RANDOMBLOB","REPLACE","ROUND","RTRIM","SIGN","SOUNDEX","SQLITE_COMPILEOPTION_GET","SQLITE_COMPILEOPTION_USED","SQLITE_OFFSET","SQLITE_SOURCE_ID","SQLITE_VERSION","SUBSTR","SUBSTRING","TOTAL_CHANGES","TRIM","TYPEOF","UNICODE","UNLIKELY","UPPER","ZEROBLOB","AVG","COUNT","GROUP_CONCAT","MAX","MIN","SUM","TOTAL","DATE","TIME","DATETIME","JULIANDAY","UNIXEPOCH","STRFTIME","row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value","ACOS","ACOSH","ASIN","ASINH","ATAN","ATAN2","ATANH","CEIL","CEILING","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG","LOG10","LOG2","MOD","PI","POW","POWER","RADIANS","SIN","SINH","SQRT","TAN","TANH","TRUNC","JSON","JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_ARRAY_LENGTH","JSON_EXTRACT","JSON_INSERT","JSON_OBJECT","JSON_PATCH","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_TYPE","JSON_TYPE","JSON_VALID","JSON_QUOTE","JSON_GROUP_ARRAY","JSON_GROUP_OBJECT","JSON_EACH","JSON_TREE","CAST"],Yt=["ABORT","ACTION","ADD","AFTER","ALL","ALTER","AND","ARE","ALWAYS","ANALYZE","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DETACH","DISTINCT","DO","DROP","EACH","ELSE","END","ESCAPE","EXCEPT","EXCLUDE","EXCLUSIVE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","GROUPS","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","ONLY","OPEN","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT"],Ft=["ANY","ARRAY","BLOB","CHARACTER","DECIMAL","INT","INTEGER","NATIVE CHARACTER","NCHAR","NUMERIC","NVARCHAR","REAL","TEXT","VARCHAR","VARYING CHARACTER"],ht=_(["SELECT [ALL | DISTINCT]"]),ft=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO","REPLACE INTO","VALUES","SET"]),ze=_(["CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]"]),gT=_(["CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]","UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]","ON CONFLICT","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","RENAME TO","SET SCHEMA"]),Vt=_(["UNION [ALL]","EXCEPT","INTERSECT"]),vt=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),yt=_(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN"]),Wt={name:"sqlite",tokenizerOptions:{reservedSelect:ht,reservedClauses:[...ft,...ze,...gT],reservedSetOperations:Vt,reservedJoins:vt,reservedPhrases:yt,reservedKeywords:Yt,reservedDataTypes:Ft,reservedFunctionNames:mt,stringTypes:["''-qq",{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``","[]"],paramTypes:{positional:!0,numbered:["?"],named:[":","@","$"]},operators:["%","~","&","|","<<",">>","==","->","->>","||"]},formatOptions:{onelineClauses:[...ze,...gT],tabularOnelineClauses:gT}},gt=["GROUPING","RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","ROW_NUMBER","POSITION","OCCURRENCES_REGEX","POSITION_REGEX","EXTRACT","CHAR_LENGTH","CHARACTER_LENGTH","OCTET_LENGTH","CARDINALITY","ABS","MOD","LN","EXP","POWER","SQRT","FLOOR","CEIL","CEILING","WIDTH_BUCKET","SUBSTRING","SUBSTRING_REGEX","UPPER","LOWER","CONVERT","TRANSLATE","TRANSLATE_REGEX","TRIM","OVERLAY","NORMALIZE","SPECIFICTYPE","CURRENT_DATE","CURRENT_TIME","LOCALTIME","CURRENT_TIMESTAMP","LOCALTIMESTAMP","COUNT","AVG","MAX","MIN","SUM","STDDEV_POP","STDDEV_SAMP","VAR_SAMP","VAR_POP","COLLECT","FUSION","INTERSECTION","COVAR_POP","COVAR_SAMP","CORR","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","PERCENTILE_CONT","PERCENTILE_DISC","CAST","COALESCE","NULLIF","ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN"],Xt=["ALL","ALLOCATE","ALTER","ANY","ARE","AS","ASC","ASENSITIVE","ASYMMETRIC","AT","ATOMIC","AUTHORIZATION","BEGIN","BETWEEN","BOTH","BY","CALL","CALLED","CASCADED","CAST","CHECK","CLOSE","COALESCE","COLLATE","COLUMN","COMMIT","CONDITION","CONNECT","CONSTRAINT","CORRESPONDING","CREATE","CROSS","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_PATH","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_USER","CURSOR","CYCLE","DEALLOCATE","DAY","DECLARE","DEFAULT","DELETE","DEREF","DESC","DESCRIBE","DETERMINISTIC","DISCONNECT","DISTINCT","DROP","DYNAMIC","EACH","ELEMENT","END-EXEC","ESCAPE","EVERY","EXCEPT","EXEC","EXECUTE","EXISTS","EXTERNAL","FALSE","FETCH","FILTER","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GET","GLOBAL","GRANT","GROUP","HAVING","HOLD","HOUR","IDENTITY","IN","INDICATOR","INNER","INOUT","INSENSITIVE","INSERT","INTERSECT","INTO","IS","LANGUAGE","LARGE","LATERAL","LEADING","LEFT","LIKE","LIKE_REGEX","LOCAL","MATCH","MEMBER","MERGE","METHOD","MINUTE","MODIFIES","MODULE","MONTH","NATURAL","NEW","NO","NONE","NOT","NULL","NULLIF","OF","OLD","ON","ONLY","OPEN","ORDER","OUT","OUTER","OVER","OVERLAPS","PARAMETER","PARTITION","PRECISION","PREPARE","PRIMARY","PROCEDURE","RANGE","READS","REAL","RECURSIVE","REF","REFERENCES","REFERENCING","RELEASE","RESULT","RETURN","RETURNS","REVOKE","RIGHT","ROLLBACK","ROLLUP","ROW","ROWS","SAVEPOINT","SCOPE","SCROLL","SEARCH","SECOND","SELECT","SENSITIVE","SESSION_USER","SET","SIMILAR","SOME","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","START","STATIC","SUBMULTISET","SYMMETRIC","SYSTEM","SYSTEM_USER","TABLE","TABLESAMPLE","THEN","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSLATION","TREAT","TRIGGER","TRUE","UESCAPE","UNION","UNIQUE","UNKNOWN","UNNEST","UPDATE","USER","USING","VALUE","VALUES","WHENEVER","WINDOW","WITHIN","WITHOUT","YEAR"],bt=["ARRAY","BIGINT","BINARY LARGE OBJECT","BINARY VARYING","BINARY","BLOB","BOOLEAN","CHAR LARGE OBJECT","CHAR VARYING","CHAR","CHARACTER LARGE OBJECT","CHARACTER VARYING","CHARACTER","CLOB","DATE","DEC","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","INTERVAL","MULTISET","NATIONAL CHAR VARYING","NATIONAL CHAR","NATIONAL CHARACTER LARGE OBJECT","NATIONAL CHARACTER VARYING","NATIONAL CHARACTER","NCHAR LARGE OBJECT","NCHAR VARYING","NCHAR","NCLOB","NUMERIC","SMALLINT","TIME","TIMESTAMP","VARBINARY","VARCHAR"],Kt=_(["SELECT [ALL | DISTINCT]"]),xt=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET"]),ER=_(["CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE"]),XT=_(["CREATE [RECURSIVE] VIEW","UPDATE","WHERE CURRENT OF","DELETE FROM","DROP TABLE","ALTER TABLE","ADD COLUMN","DROP [COLUMN]","RENAME COLUMN","RENAME TO","ALTER [COLUMN]","{SET | DROP} DEFAULT","ADD SCOPE","DROP SCOPE {CASCADE | RESTRICT}","RESTART WITH","TRUNCATE TABLE","SET SCHEMA"]),wt=_(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),Jt=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),$t=_(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),kt={name:"sql",tokenizerOptions:{reservedSelect:Kt,reservedClauses:[...xt,...ER,...XT],reservedSetOperations:wt,reservedJoins:Jt,reservedPhrases:$t,reservedKeywords:Xt,reservedDataTypes:bt,reservedFunctionNames:gt,stringTypes:[{quote:"''-qq-bs",prefixes:["N","U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``"],paramTypes:{positional:!0},operators:["||"]},formatOptions:{onelineClauses:[...ER,...XT],tabularOnelineClauses:XT}},Qt=["ABS","ACOS","ALL_MATCH","ANY_MATCH","APPROX_DISTINCT","APPROX_MOST_FREQUENT","APPROX_PERCENTILE","APPROX_SET","ARBITRARY","ARRAYS_OVERLAP","ARRAY_AGG","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_SORT","ARRAY_UNION","ASIN","ATAN","ATAN2","AT_TIMEZONE","AVG","BAR","BETA_CDF","BING_TILE","BING_TILES_AROUND","BING_TILE_AT","BING_TILE_COORDINATES","BING_TILE_POLYGON","BING_TILE_QUADKEY","BING_TILE_ZOOM_LEVEL","BITWISE_AND","BITWISE_AND_AGG","BITWISE_LEFT_SHIFT","BITWISE_NOT","BITWISE_OR","BITWISE_OR_AGG","BITWISE_RIGHT_SHIFT","BITWISE_RIGHT_SHIFT_ARITHMETIC","BITWISE_XOR","BIT_COUNT","BOOL_AND","BOOL_OR","CARDINALITY","CAST","CBRT","CEIL","CEILING","CHAR2HEXINT","CHECKSUM","CHR","CLASSIFY","COALESCE","CODEPOINT","COLOR","COMBINATIONS","CONCAT","CONCAT_WS","CONTAINS","CONTAINS_SEQUENCE","CONVEX_HULL_AGG","CORR","COS","COSH","COSINE_SIMILARITY","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CRC32","CUME_DIST","CURRENT_CATALOG","CURRENT_DATE","CURRENT_GROUPS","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","DATE","DATE_ADD","DATE_DIFF","DATE_FORMAT","DATE_PARSE","DATE_TRUNC","DAY","DAY_OF_MONTH","DAY_OF_WEEK","DAY_OF_YEAR","DEGREES","DENSE_RANK","DOW","DOY","E","ELEMENT_AT","EMPTY_APPROX_SET","EVALUATE_CLASSIFIER_PREDICTIONS","EVERY","EXP","EXTRACT","FEATURES","FILTER","FIRST_VALUE","FLATTEN","FLOOR","FORMAT","FORMAT_DATETIME","FORMAT_NUMBER","FROM_BASE","FROM_BASE32","FROM_BASE64","FROM_BASE64URL","FROM_BIG_ENDIAN_32","FROM_BIG_ENDIAN_64","FROM_ENCODED_POLYLINE","FROM_GEOJSON_GEOMETRY","FROM_HEX","FROM_IEEE754_32","FROM_IEEE754_64","FROM_ISO8601_DATE","FROM_ISO8601_TIMESTAMP","FROM_ISO8601_TIMESTAMP_NANOS","FROM_UNIXTIME","FROM_UNIXTIME_NANOS","FROM_UTF8","GEOMETRIC_MEAN","GEOMETRY_FROM_HADOOP_SHAPE","GEOMETRY_INVALID_REASON","GEOMETRY_NEAREST_POINTS","GEOMETRY_TO_BING_TILES","GEOMETRY_UNION","GEOMETRY_UNION_AGG","GREATEST","GREAT_CIRCLE_DISTANCE","HAMMING_DISTANCE","HASH_COUNTS","HISTOGRAM","HMAC_MD5","HMAC_SHA1","HMAC_SHA256","HMAC_SHA512","HOUR","HUMAN_READABLE_SECONDS","IF","INDEX","INFINITY","INTERSECTION_CARDINALITY","INVERSE_BETA_CDF","INVERSE_NORMAL_CDF","IS_FINITE","IS_INFINITE","IS_JSON_SCALAR","IS_NAN","JACCARD_INDEX","JSON_ARRAY_CONTAINS","JSON_ARRAY_GET","JSON_ARRAY_LENGTH","JSON_EXISTS","JSON_EXTRACT","JSON_EXTRACT_SCALAR","JSON_FORMAT","JSON_PARSE","JSON_QUERY","JSON_SIZE","JSON_VALUE","KURTOSIS","LAG","LAST_DAY_OF_MONTH","LAST_VALUE","LEAD","LEARN_CLASSIFIER","LEARN_LIBSVM_CLASSIFIER","LEARN_LIBSVM_REGRESSOR","LEARN_REGRESSOR","LEAST","LENGTH","LEVENSHTEIN_DISTANCE","LINE_INTERPOLATE_POINT","LINE_INTERPOLATE_POINTS","LINE_LOCATE_POINT","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","LUHN_CHECK","MAKE_SET_DIGEST","MAP","MAP_AGG","MAP_CONCAT","MAP_ENTRIES","MAP_FILTER","MAP_FROM_ENTRIES","MAP_KEYS","MAP_UNION","MAP_VALUES","MAP_ZIP_WITH","MAX","MAX_BY","MD5","MERGE","MERGE_SET_DIGEST","MILLISECOND","MIN","MINUTE","MIN_BY","MOD","MONTH","MULTIMAP_AGG","MULTIMAP_FROM_ENTRIES","MURMUR3","NAN","NGRAMS","NONE_MATCH","NORMALIZE","NORMAL_CDF","NOW","NTH_VALUE","NTILE","NULLIF","NUMERIC_HISTOGRAM","OBJECTID","OBJECTID_TIMESTAMP","PARSE_DATA_SIZE","PARSE_DATETIME","PARSE_DURATION","PERCENT_RANK","PI","POSITION","POW","POWER","QDIGEST_AGG","QUARTER","RADIANS","RAND","RANDOM","RANK","REDUCE","REDUCE_AGG","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGRESS","REGR_INTERCEPT","REGR_SLOPE","RENDER","REPEAT","REPLACE","REVERSE","RGB","ROUND","ROW_NUMBER","RPAD","RTRIM","SECOND","SEQUENCE","SHA1","SHA256","SHA512","SHUFFLE","SIGN","SIMPLIFY_GEOMETRY","SIN","SKEWNESS","SLICE","SOUNDEX","SPATIAL_PARTITIONING","SPATIAL_PARTITIONS","SPLIT","SPLIT_PART","SPLIT_TO_MAP","SPLIT_TO_MULTIMAP","SPOOKY_HASH_V2_32","SPOOKY_HASH_V2_64","SQRT","STARTS_WITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRPOS","ST_AREA","ST_ASBINARY","ST_ASTEXT","ST_BOUNDARY","ST_BUFFER","ST_CENTROID","ST_CONTAINS","ST_CONVEXHULL","ST_COORDDIM","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_ENDPOINT","ST_ENVELOPE","ST_ENVELOPEASPTS","ST_EQUALS","ST_EXTERIORRING","ST_GEOMETRIES","ST_GEOMETRYFROMTEXT","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMBINARY","ST_INTERIORRINGN","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISRING","ST_ISSIMPLE","ST_ISVALID","ST_LENGTH","ST_LINEFROMTEXT","ST_LINESTRING","ST_MULTIPOINT","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINT","ST_POINTN","ST_POINTS","ST_POLYGON","ST_RELATE","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_TOUCHES","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","SUBSTR","SUBSTRING","SUM","TAN","TANH","TDIGEST_AGG","TIMESTAMP_OBJECTID","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO_BASE","TO_BASE32","TO_BASE64","TO_BASE64URL","TO_BIG_ENDIAN_32","TO_BIG_ENDIAN_64","TO_CHAR","TO_DATE","TO_ENCODED_POLYLINE","TO_GEOJSON_GEOMETRY","TO_GEOMETRY","TO_HEX","TO_IEEE754_32","TO_IEEE754_64","TO_ISO8601","TO_MILLISECONDS","TO_SPHERICAL_GEOGRAPHY","TO_TIMESTAMP","TO_UNIXTIME","TO_UTF8","TRANSFORM","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRY","TRY_CAST","TYPEOF","UPPER","URL_DECODE","URL_ENCODE","URL_EXTRACT_FRAGMENT","URL_EXTRACT_HOST","URL_EXTRACT_PARAMETER","URL_EXTRACT_PATH","URL_EXTRACT_PORT","URL_EXTRACT_PROTOCOL","URL_EXTRACT_QUERY","UUID","VALUES_AT_QUANTILES","VALUE_AT_QUANTILE","VARIANCE","VAR_POP","VAR_SAMP","VERSION","WEEK","WEEK_OF_YEAR","WIDTH_BUCKET","WILSON_INTERVAL_LOWER","WILSON_INTERVAL_UPPER","WITH_TIMEZONE","WORD_STEM","XXHASH64","YEAR","YEAR_OF_WEEK","YOW","ZIP","ZIP_WITH","CLASSIFIER","FIRST","LAST","MATCH_NUMBER","NEXT","PERMUTE","PREV"],qt=["ABSENT","ADD","ADMIN","AFTER","ALL","ALTER","ANALYZE","AND","ANY","AS","ASC","AT","AUTHORIZATION","BERNOULLI","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CATALOGS","COLUMN","COLUMNS","COMMENT","COMMIT","COMMITTED","CONDITIONAL","CONSTRAINT","COPARTITION","CREATE","CROSS","CUBE","CURRENT","CURRENT_PATH","CURRENT_ROLE","DATA","DEALLOCATE","DEFAULT","DEFINE","DEFINER","DELETE","DENY","DESC","DESCRIBE","DESCRIPTOR","DISTINCT","DISTRIBUTED","DOUBLE","DROP","ELSE","EMPTY","ENCODING","END","ERROR","ESCAPE","EXCEPT","EXCLUDING","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FINAL","FIRST","FOLLOWING","FOR","FROM","FULL","FUNCTIONS","GRANT","GRANTED","GRANTS","GRAPHVIZ","GROUP","GROUPING","GROUPS","HAVING","IGNORE","IN","INCLUDING","INITIAL","INNER","INPUT","INSERT","INTERSECT","INTERVAL","INTO","INVOKER","IO","IS","ISOLATION","JOIN","JSON","JSON_ARRAY","JSON_OBJECT","KEEP","KEY","KEYS","LAST","LATERAL","LEADING","LEFT","LEVEL","LIKE","LIMIT","LOCAL","LOGICAL","MATCH","MATCHED","MATCHES","MATCH_RECOGNIZE","MATERIALIZED","MEASURES","NATURAL","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NOT","NULL","NULLS","OBJECT","OF","OFFSET","OMIT","ON","ONE","ONLY","OPTION","OR","ORDER","ORDINALITY","OUTER","OUTPUT","OVER","OVERFLOW","PARTITION","PARTITIONS","PASSING","PAST","PATH","PATTERN","PER","PERMUTE","PRECEDING","PRECISION","PREPARE","PRIVILEGES","PROPERTIES","PRUNE","QUOTES","RANGE","READ","RECURSIVE","REFRESH","RENAME","REPEATABLE","RESET","RESPECT","RESTRICT","RETURNING","REVOKE","RIGHT","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","RUNNING","SCALAR","SCHEMA","SCHEMAS","SECURITY","SEEK","SELECT","SERIALIZABLE","SESSION","SET","SETS","SHOW","SKIP","SOME","START","STATS","STRING","SUBSET","SYSTEM","TABLE","TABLES","TABLESAMPLE","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRUE","TYPE","UESCAPE","UNBOUNDED","UNCOMMITTED","UNCONDITIONAL","UNION","UNIQUE","UNKNOWN","UNMATCHED","UNNEST","UPDATE","USE","USER","USING","UTF16","UTF32","UTF8","VALIDATE","VALUE","VALUES","VERBOSE","VIEW","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","ZONE"],Zt=["BIGINT","INT","INTEGER","SMALLINT","TINYINT","BOOLEAN","DATE","DECIMAL","REAL","DOUBLE","HYPERLOGLOG","QDIGEST","TDIGEST","P4HYPERLOGLOG","INTERVAL","TIMESTAMP","TIME","VARBINARY","VARCHAR","CHAR","ROW","ARRAY","MAP","JSON","JSON2016","IPADDRESS","GEOMETRY","UUID","SETDIGEST","JONIREGEXP","RE2JREGEXP","LIKEPATTERN","COLOR","CODEPOINTS","FUNCTION","JSONPATH"],jt=_(["SELECT [ALL | DISTINCT]"]),zt=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET","MATCH_RECOGNIZE","MEASURES","ONE ROW PER MATCH","ALL ROWS PER MATCH","AFTER MATCH","PATTERN","SUBSET","DEFINE"]),TR=_(["CREATE TABLE [IF NOT EXISTS]"]),bT=_(["CREATE [OR REPLACE] [MATERIALIZED] VIEW","UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME COLUMN [IF EXISTS]","RENAME TO","SET AUTHORIZATION [USER | ROLE]","SET PROPERTIES","EXECUTE","TRUNCATE TABLE","ALTER SCHEMA","ALTER MATERIALIZED VIEW","ALTER VIEW","CREATE SCHEMA","CREATE ROLE","DROP SCHEMA","DROP MATERIALIZED VIEW","DROP VIEW","DROP ROLE","EXPLAIN","ANALYZE","EXPLAIN ANALYZE","EXPLAIN ANALYZE VERBOSE","USE","DESCRIBE INPUT","DESCRIBE OUTPUT","REFRESH MATERIALIZED VIEW","RESET SESSION","SET SESSION","SET PATH","SET TIME ZONE","SHOW GRANTS","SHOW CREATE TABLE","SHOW CREATE SCHEMA","SHOW CREATE VIEW","SHOW CREATE MATERIALIZED VIEW","SHOW TABLES","SHOW SCHEMAS","SHOW CATALOGS","SHOW COLUMNS","SHOW STATS FOR","SHOW ROLES","SHOW CURRENT ROLES","SHOW ROLE GRANTS","SHOW FUNCTIONS","SHOW SESSION"]),EN=_(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),TN=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),eN=_(["{ROWS | RANGE | GROUPS} BETWEEN","IS [NOT] DISTINCT FROM"]),RN={name:"trino",tokenizerOptions:{reservedSelect:jt,reservedClauses:[...zt,...TR,...bT],reservedSetOperations:EN,reservedJoins:TN,reservedPhrases:eN,reservedKeywords:qt,reservedDataTypes:Zt,reservedFunctionNames:Qt,extraParens:["[]","{}"],stringTypes:[{quote:"''-qq",prefixes:["U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0},operators:["%","->","=>",":","||","|","^","$"]},formatOptions:{onelineClauses:[...TR,...bT],tabularOnelineClauses:bT}},AN=["APPROX_COUNT_DISTINCT","AVG","CHECKSUM_AGG","COUNT","COUNT_BIG","GROUPING","GROUPING_ID","MAX","MIN","STDEV","STDEVP","SUM","VAR","VARP","CUME_DIST","FIRST_VALUE","LAG","LAST_VALUE","LEAD","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","Collation - COLLATIONPROPERTY","Collation - TERTIARY_WEIGHTS","@@DBTS","@@LANGID","@@LANGUAGE","@@LOCK_TIMEOUT","@@MAX_CONNECTIONS","@@MAX_PRECISION","@@NESTLEVEL","@@OPTIONS","@@REMSERVER","@@SERVERNAME","@@SERVICENAME","@@SPID","@@TEXTSIZE","@@VERSION","CAST","CONVERT","PARSE","TRY_CAST","TRY_CONVERT","TRY_PARSE","ASYMKEY_ID","ASYMKEYPROPERTY","CERTPROPERTY","CERT_ID","CRYPT_GEN_RANDOM","DECRYPTBYASYMKEY","DECRYPTBYCERT","DECRYPTBYKEY","DECRYPTBYKEYAUTOASYMKEY","DECRYPTBYKEYAUTOCERT","DECRYPTBYPASSPHRASE","ENCRYPTBYASYMKEY","ENCRYPTBYCERT","ENCRYPTBYKEY","ENCRYPTBYPASSPHRASE","HASHBYTES","IS_OBJECTSIGNED","KEY_GUID","KEY_ID","KEY_NAME","SIGNBYASYMKEY","SIGNBYCERT","SYMKEYPROPERTY","VERIFYSIGNEDBYCERT","VERIFYSIGNEDBYASYMKEY","@@CURSOR_ROWS","@@FETCH_STATUS","CURSOR_STATUS","DATALENGTH","IDENT_CURRENT","IDENT_INCR","IDENT_SEED","IDENTITY","SQL_VARIANT_PROPERTY","@@DATEFIRST","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_TIMEZONE_ID","DATEADD","DATEDIFF","DATEDIFF_BIG","DATEFROMPARTS","DATENAME","DATEPART","DATETIME2FROMPARTS","DATETIMEFROMPARTS","DATETIMEOFFSETFROMPARTS","DAY","EOMONTH","GETDATE","GETUTCDATE","ISDATE","MONTH","SMALLDATETIMEFROMPARTS","SWITCHOFFSET","SYSDATETIME","SYSDATETIMEOFFSET","SYSUTCDATETIME","TIMEFROMPARTS","TODATETIMEOFFSET","YEAR","JSON","ISJSON","JSON_VALUE","JSON_QUERY","JSON_MODIFY","ABS","ACOS","ASIN","ATAN","ATN2","CEILING","COS","COT","DEGREES","EXP","FLOOR","LOG","LOG10","PI","POWER","RADIANS","RAND","ROUND","SIGN","SIN","SQRT","SQUARE","TAN","CHOOSE","GREATEST","IIF","LEAST","@@PROCID","APP_NAME","APPLOCK_MODE","APPLOCK_TEST","ASSEMBLYPROPERTY","COL_LENGTH","COL_NAME","COLUMNPROPERTY","DATABASEPROPERTYEX","DB_ID","DB_NAME","FILE_ID","FILE_IDEX","FILE_NAME","FILEGROUP_ID","FILEGROUP_NAME","FILEGROUPPROPERTY","FILEPROPERTY","FILEPROPERTYEX","FULLTEXTCATALOGPROPERTY","FULLTEXTSERVICEPROPERTY","INDEX_COL","INDEXKEY_PROPERTY","INDEXPROPERTY","NEXT VALUE FOR","OBJECT_DEFINITION","OBJECT_ID","OBJECT_NAME","OBJECT_SCHEMA_NAME","OBJECTPROPERTY","OBJECTPROPERTYEX","ORIGINAL_DB_NAME","PARSENAME","SCHEMA_ID","SCHEMA_NAME","SCOPE_IDENTITY","SERVERPROPERTY","STATS_DATE","TYPE_ID","TYPE_NAME","TYPEPROPERTY","DENSE_RANK","NTILE","RANK","ROW_NUMBER","PUBLISHINGSERVERNAME","CERTENCODED","CERTPRIVATEKEY","CURRENT_USER","DATABASE_PRINCIPAL_ID","HAS_DBACCESS","HAS_PERMS_BY_NAME","IS_MEMBER","IS_ROLEMEMBER","IS_SRVROLEMEMBER","LOGINPROPERTY","ORIGINAL_LOGIN","PERMISSIONS","PWDENCRYPT","PWDCOMPARE","SESSION_USER","SESSIONPROPERTY","SUSER_ID","SUSER_NAME","SUSER_SID","SUSER_SNAME","SYSTEM_USER","USER","USER_ID","USER_NAME","ASCII","CHAR","CHARINDEX","CONCAT","CONCAT_WS","DIFFERENCE","FORMAT","LEFT","LEN","LOWER","LTRIM","NCHAR","PATINDEX","QUOTENAME","REPLACE","REPLICATE","REVERSE","RIGHT","RTRIM","SOUNDEX","SPACE","STR","STRING_AGG","STRING_ESCAPE","STUFF","SUBSTRING","TRANSLATE","TRIM","UNICODE","UPPER","$PARTITION","@@ERROR","@@IDENTITY","@@PACK_RECEIVED","@@ROWCOUNT","@@TRANCOUNT","BINARY_CHECKSUM","CHECKSUM","COMPRESS","CONNECTIONPROPERTY","CONTEXT_INFO","CURRENT_REQUEST_ID","CURRENT_TRANSACTION_ID","DECOMPRESS","ERROR_LINE","ERROR_MESSAGE","ERROR_NUMBER","ERROR_PROCEDURE","ERROR_SEVERITY","ERROR_STATE","FORMATMESSAGE","GET_FILESTREAM_TRANSACTION_CONTEXT","GETANSINULL","HOST_ID","HOST_NAME","ISNULL","ISNUMERIC","MIN_ACTIVE_ROWVERSION","NEWID","NEWSEQUENTIALID","ROWCOUNT_BIG","SESSION_CONTEXT","XACT_STATE","@@CONNECTIONS","@@CPU_BUSY","@@IDLE","@@IO_BUSY","@@PACK_SENT","@@PACKET_ERRORS","@@TIMETICKS","@@TOTAL_ERRORS","@@TOTAL_READ","@@TOTAL_WRITE","TEXTPTR","TEXTVALID","COLUMNS_UPDATED","EVENTDATA","TRIGGER_NESTLEVEL","UPDATE","COALESCE","NULLIF"],SN=["ADD","ALL","ALTER","AND","ANY","AS","ASC","AUTHORIZATION","BACKUP","BEGIN","BETWEEN","BREAK","BROWSE","BULK","BY","CASCADE","CHECK","CHECKPOINT","CLOSE","CLUSTERED","COALESCE","COLLATE","COLUMN","COMMIT","COMPUTE","CONSTRAINT","CONTAINS","CONTAINSTABLE","CONTINUE","CONVERT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DBCC","DEALLOCATE","DECLARE","DEFAULT","DELETE","DENY","DESC","DISK","DISTINCT","DISTRIBUTED","DROP","DUMP","ERRLVL","ESCAPE","EXEC","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FILE","FILLFACTOR","FOR","FOREIGN","FREETEXT","FREETEXTTABLE","FROM","FULL","FUNCTION","GOTO","GRANT","GROUP","HAVING","HOLDLOCK","IDENTITY","IDENTITYCOL","IDENTITY_INSERT","IF","IN","INDEX","INNER","INSERT","INTERSECT","INTO","IS","JOIN","KEY","KILL","LEFT","LIKE","LINENO","LOAD","MERGE","NOCHECK","NONCLUSTERED","NOT","NULL","NULLIF","OF","OFF","OFFSETS","ON","OPEN","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","OPTION","OR","ORDER","OUTER","OVER","PERCENT","PIVOT","PLAN","PRIMARY","PRINT","PROC","PROCEDURE","PUBLIC","RAISERROR","READ","READTEXT","RECONFIGURE","REFERENCES","REPLICATION","RESTORE","RESTRICT","RETURN","REVERT","REVOKE","RIGHT","ROLLBACK","ROWCOUNT","ROWGUIDCOL","RULE","SAVE","SCHEMA","SECURITYAUDIT","SELECT","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","SESSION_USER","SET","SETUSER","SHUTDOWN","SOME","STATISTICS","SYSTEM_USER","TABLE","TABLESAMPLE","TEXTSIZE","THEN","TO","TOP","TRAN","TRANSACTION","TRIGGER","TRUNCATE","TRY_CONVERT","TSEQUAL","UNION","UNIQUE","UNPIVOT","UPDATE","UPDATETEXT","USE","USER","VALUES","VIEW","WAITFOR","WHERE","WHILE","WITH","WITHIN GROUP","WRITETEXT","ABSOLUTE","ACTION","ADA","ALLOCATE","ARE","ASSERTION","AT","AVG","BIT_LENGTH","BOTH","CASCADED","CAST","CATALOG","CHARACTER_LENGTH","CHAR_LENGTH","COLLATION","CONNECT","CONNECTION","CONSTRAINTS","CORRESPONDING","COUNT","DAY","DEFERRABLE","DEFERRED","DESCRIBE","DESCRIPTOR","DIAGNOSTICS","DISCONNECT","DOMAIN","END-EXEC","EXCEPTION","EXTRACT","FALSE","FIRST","FORTRAN","FOUND","GET","GLOBAL","GO","HOUR","IMMEDIATE","INCLUDE","INDICATOR","INITIALLY","INPUT","INSENSITIVE","INTERVAL","ISOLATION","LANGUAGE","LAST","LEADING","LEVEL","LOCAL","LOWER","MATCH","MAX","MIN","MINUTE","MODULE","MONTH","NAMES","NATURAL","NEXT","NO","NONE","OCTET_LENGTH","ONLY","OUTPUT","OVERLAPS","PAD","PARTIAL","PASCAL","POSITION","PREPARE","PRESERVE","PRIOR","PRIVILEGES","RELATIVE","ROWS","SCROLL","SECOND","SECTION","SESSION","SIZE","SPACE","SQL","SQLCA","SQLCODE","SQLERROR","SQLSTATE","SQLWARNING","SUBSTRING","SUM","TEMPORARY","TIMEZONE_HOUR","TIMEZONE_MINUTE","TRAILING","TRANSLATE","TRANSLATION","TRIM","TRUE","UNKNOWN","UPPER","USAGE","VALUE","WHENEVER","WORK","WRITE","YEAR","ZONE"],ON=["BINARY","BIT","CHAR","CHAR","CHARACTER","DATE","DATETIME2","DATETIMEOFFSET","DEC","DECIMAL","DOUBLE","FLOAT","INT","INTEGER","NATIONAL","NCHAR","NUMERIC","NVARCHAR","PRECISION","REAL","SMALLINT","TIME","TIMESTAMP","VARBINARY","VARCHAR"],IN=_(["SELECT [ALL | DISTINCT]"]),tN=_(["WITH","INTO","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","OFFSET","FETCH {FIRST | NEXT}","FOR {BROWSE | XML | JSON}","OPTION","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]","UPDATE SET","CREATE [OR ALTER] {PROC | PROCEDURE}"]),eR=_(["CREATE TABLE"]),KT=_(["CREATE [OR ALTER] [MATERIALIZED] VIEW","UPDATE","WHERE CURRENT OF","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD","DROP COLUMN [IF EXISTS]","ALTER COLUMN","TRUNCATE TABLE","ADD SENSITIVITY CLASSIFICATION","ADD SIGNATURE","AGGREGATE","ANSI_DEFAULTS","ANSI_NULLS","ANSI_NULL_DFLT_OFF","ANSI_NULL_DFLT_ON","ANSI_PADDING","ANSI_WARNINGS","APPLICATION ROLE","ARITHABORT","ARITHIGNORE","ASSEMBLY","ASYMMETRIC KEY","AUTHORIZATION","AVAILABILITY GROUP","BACKUP","BACKUP CERTIFICATE","BACKUP MASTER KEY","BACKUP SERVICE MASTER KEY","BEGIN CONVERSATION TIMER","BEGIN DIALOG CONVERSATION","BROKER PRIORITY","BULK INSERT","CERTIFICATE","CLOSE MASTER KEY","CLOSE SYMMETRIC KEY","COLLATE","COLUMN ENCRYPTION KEY","COLUMN MASTER KEY","COLUMNSTORE INDEX","CONCAT_NULL_YIELDS_NULL","CONTEXT_INFO","CONTRACT","CREDENTIAL","CRYPTOGRAPHIC PROVIDER","CURSOR_CLOSE_ON_COMMIT","DATABASE","DATABASE AUDIT SPECIFICATION","DATABASE ENCRYPTION KEY","DATABASE HADR","DATABASE SCOPED CONFIGURATION","DATABASE SCOPED CREDENTIAL","DATABASE SET","DATEFIRST","DATEFORMAT","DEADLOCK_PRIORITY","DENY","DENY XML","DISABLE TRIGGER","ENABLE TRIGGER","END CONVERSATION","ENDPOINT","EVENT NOTIFICATION","EVENT SESSION","EXECUTE AS","EXTERNAL DATA SOURCE","EXTERNAL FILE FORMAT","EXTERNAL LANGUAGE","EXTERNAL LIBRARY","EXTERNAL RESOURCE POOL","EXTERNAL TABLE","FIPS_FLAGGER","FMTONLY","FORCEPLAN","FULLTEXT CATALOG","FULLTEXT INDEX","FULLTEXT STOPLIST","FUNCTION","GET CONVERSATION GROUP","GET_TRANSMISSION_STATUS","GRANT","GRANT XML","IDENTITY_INSERT","IMPLICIT_TRANSACTIONS","INDEX","LANGUAGE","LOCK_TIMEOUT","LOGIN","MASTER KEY","MESSAGE TYPE","MOVE CONVERSATION","NOCOUNT","NOEXEC","NUMERIC_ROUNDABORT","OFFSETS","OPEN MASTER KEY","OPEN SYMMETRIC KEY","PARSEONLY","PARTITION FUNCTION","PARTITION SCHEME","PROCEDURE","QUERY_GOVERNOR_COST_LIMIT","QUEUE","QUOTED_IDENTIFIER","RECEIVE","REMOTE SERVICE BINDING","REMOTE_PROC_TRANSACTIONS","RESOURCE GOVERNOR","RESOURCE POOL","RESTORE","RESTORE FILELISTONLY","RESTORE HEADERONLY","RESTORE LABELONLY","RESTORE MASTER KEY","RESTORE REWINDONLY","RESTORE SERVICE MASTER KEY","RESTORE VERIFYONLY","REVERT","REVOKE","REVOKE XML","ROLE","ROUTE","ROWCOUNT","RULE","SCHEMA","SEARCH PROPERTY LIST","SECURITY POLICY","SELECTIVE XML INDEX","SEND","SENSITIVITY CLASSIFICATION","SEQUENCE","SERVER AUDIT","SERVER AUDIT SPECIFICATION","SERVER CONFIGURATION","SERVER ROLE","SERVICE","SERVICE MASTER KEY","SETUSER","SHOWPLAN_ALL","SHOWPLAN_TEXT","SHOWPLAN_XML","SIGNATURE","SPATIAL INDEX","STATISTICS","STATISTICS IO","STATISTICS PROFILE","STATISTICS TIME","STATISTICS XML","SYMMETRIC KEY","SYNONYM","TABLE","TABLE IDENTITY","TEXTSIZE","TRANSACTION ISOLATION LEVEL","TRIGGER","TYPE","UPDATE STATISTICS","USER","WORKLOAD GROUP","XACT_ABORT","XML INDEX","XML SCHEMA COLLECTION"]),NN=_(["UNION [ALL]","EXCEPT","INTERSECT"]),sN=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","{CROSS | OUTER} APPLY"]),rN=_(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),_N={name:"transactsql",tokenizerOptions:{reservedSelect:IN,reservedClauses:[...tN,...eR,...KT],reservedSetOperations:NN,reservedJoins:sN,reservedPhrases:rN,reservedKeywords:SN,reservedDataTypes:ON,reservedFunctionNames:AN,nestedBlockComments:!0,stringTypes:[{quote:"''-qq",prefixes:["N"]}],identTypes:['""-qq',"[]"],identChars:{first:"#@",rest:"#@$"},paramTypes:{named:["@"],quoted:["@"]},operators:["%","&","|","^","~","!<","!>","+=","-=","*=","/=","%=","|=","&=","^=","::",":"],propertyAccessOperators:[".."]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:[...eR,...KT],tabularOnelineClauses:KT}},CN=["ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","_BINARY","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DECLARE","DEFAULT","DELAYED","DELETE","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DROP","DUAL","EACH","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","EXTRA_JOIN","FALSE","FETCH","FOR","FORCE","FORCE_COMPILED_MODE","FORCE_INTERPRETER_MODE","FOREIGN","FROM","FULL","FULLTEXT","GRANT","GROUP","HAVING","HEARTBEAT_NO_LOGGING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","IN","_INTERNAL_DYNAMIC_TYPECAST","INTERSECT","INTERVAL","INTO","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LOOP","LOW_PRIORITY","MATCH","MAXVALUE","MINUS","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NO_QUERY_REWRITE","NOT","NO_WRITE_TO_BINLOG","NO_QUERY_REWRITE","NULL","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PRIMARY","PROCEDURE","PURGE","RANGE","READ","READS","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESTRICT","RETURN","REVOKE","RIGHT","RIGHT_ANTI_JOIN","RIGHT_SEMI_JOIN","RIGHT_STRAIGHT_JOIN","RLIKE","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SEMI_JOIN","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SPATIAL","SPECIFIC","SQL","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQLEXCEPTION","SQL_NO_CACHE","SQL_NO_LOGGING","SQL_SMALL_RESULT","SQLSTATE","SQLWARNING","STRAIGHT_JOIN","TABLE","TERMINATED","THEN","TO","TRAILING","TRIGGER","TRUE","UNBOUNDED","UNDO","UNION","UNIQUE","UNLOCK","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","_UTF8","VALUES","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WRITE","XOR","YEAR_MONTH","ZEROFILL"],aN=["BIGINT","BINARY","BIT","BLOB","CHAR","CHARACTER","DATETIME","DEC","DECIMAL","DOUBLE PRECISION","DOUBLE","ENUM","FIXED","FLOAT","FLOAT4","FLOAT8","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","LONG","LONGBLOB","LONGTEXT","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","NATIONAL CHAR","NATIONAL VARCHAR","NUMERIC","PRECISION","REAL","SMALLINT","TEXT","TIME","TIMESTAMP","TINYBLOB","TINYINT","TINYTEXT","UNSIGNED","VARBINARY","VARCHAR","VARCHARACTER","YEAR"],LN=["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_ACCUMULATE","APPROX_COUNT_DISTINCT_COMBINE","APPROX_COUNT_DISTINCT_ESTIMATE","APPROX_GEOGRAPHY_INTERSECTS","APPROX_PERCENTILE","ASCII","ASIN","ATAN","ATAN2","AVG","BIN","BINARY","BIT_AND","BIT_COUNT","BIT_OR","BIT_XOR","CAST","CEIL","CEILING","CHAR","CHARACTER_LENGTH","CHAR_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COLLECT","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATEDIFF","DATE_FORMAT","DATE_SUB","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT","DEGREES","DENSE_RANK","DIV","DOT_PRODUCT","ELT","EUCLIDEAN_DISTANCE","EXP","EXTRACT","FIELD","FIRST","FIRST_VALUE","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOGRAPHY_AREA","GEOGRAPHY_CONTAINS","GEOGRAPHY_DISTANCE","GEOGRAPHY_INTERSECTS","GEOGRAPHY_LATITUDE","GEOGRAPHY_LENGTH","GEOGRAPHY_LONGITUDE","GEOGRAPHY_POINT","GEOGRAPHY_WITHIN_DISTANCE","GEOMETRY_AREA","GEOMETRY_CONTAINS","GEOMETRY_DISTANCE","GEOMETRY_FILTER","GEOMETRY_INTERSECTS","GEOMETRY_LENGTH","GEOMETRY_POINT","GEOMETRY_WITHIN_DISTANCE","GEOMETRY_X","GEOMETRY_Y","GREATEST","GROUPING","GROUP_CONCAT","HEX","HIGHLIGHT","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INITCAP","INSERT","INSTR","INTERVAL","IS","IS NULL","JSON_AGG","JSON_ARRAY_CONTAINS_DOUBLE","JSON_ARRAY_CONTAINS_JSON","JSON_ARRAY_CONTAINS_STRING","JSON_ARRAY_PUSH_DOUBLE","JSON_ARRAY_PUSH_JSON","JSON_ARRAY_PUSH_STRING","JSON_DELETE_KEY","JSON_EXTRACT_DOUBLE","JSON_EXTRACT_JSON","JSON_EXTRACT_STRING","JSON_EXTRACT_BIGINT","JSON_GET_TYPE","JSON_LENGTH","JSON_SET_DOUBLE","JSON_SET_JSON","JSON_SET_STRING","JSON_SPLICE_DOUBLE","JSON_SPLICE_JSON","JSON_SPLICE_STRING","LAG","LAST_DAY","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LN","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LPAD","LTRIM","MATCH","MAX","MD5","MEDIAN","MICROSECOND","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","NOT","NOW","NTH_VALUE","NTILE","NULLIF","OCTET_LENGTH","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIVOT","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANK","REGEXP","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCALAR","SCHEMA","SEC_TO_TIME","SHA1","SHA2","SIGMOID","SIGN","SIN","SLEEP","SPLIT","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUM","SYS_GUID","TAN","TIME","TIMEDIFF","TIME_BUCKET","TIME_FORMAT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_JSON","TO_NUMBER","TO_SECONDS","TO_TIMESTAMP","TRIM","TRUNC","TRUNCATE","UCASE","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","VALUES","VARIANCE","VAR_POP","VAR_SAMP","VECTOR_SUB","VERSION","WEEK","WEEKDAY","WEEKOFYEAR","YEAR"],iN=_(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),nN=_(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [IGNORE] [INTO]","VALUES","REPLACE [INTO]","ON DUPLICATE KEY UPDATE","SET","CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] [EXTERNAL] FUNCTION"]),RR=_(["CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]"]),xT=_(["CREATE VIEW","UPDATE","DELETE [FROM]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] TABLE","ADD [COLUMN]","ADD [UNIQUE] {INDEX | KEY}","DROP [COLUMN]","MODIFY [COLUMN]","CHANGE","RENAME [TO | AS]","TRUNCATE [TABLE]","ADD AGGREGATOR","ADD LEAF","AGGREGATOR SET AS MASTER","ALTER DATABASE","ALTER PIPELINE","ALTER RESOURCE POOL","ALTER USER","ALTER VIEW","ANALYZE TABLE","ATTACH DATABASE","ATTACH LEAF","ATTACH LEAF ALL","BACKUP DATABASE","BINLOG","BOOTSTRAP AGGREGATOR","CACHE INDEX","CALL","CHANGE","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK BLOB CHECKSUM","CHECK TABLE","CHECKSUM TABLE","CLEAR ORPHAN DATABASES","CLONE","COMMIT","CREATE DATABASE","CREATE GROUP","CREATE INDEX","CREATE LINK","CREATE MILESTONE","CREATE PIPELINE","CREATE RESOURCE POOL","CREATE ROLE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DETACH DATABASE","DETACH PIPELINE","DROP DATABASE","DROP FUNCTION","DROP INDEX","DROP LINK","DROP PIPELINE","DROP PROCEDURE","DROP RESOURCE POOL","DROP ROLE","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","FORCE","GRANT","HANDLER","HELP","KILL CONNECTION","KILLALL QUERIES","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","REBALANCE PARTITIONS","RELEASE SAVEPOINT","REMOVE AGGREGATOR","REMOVE LEAF","REPAIR TABLE","REPLACE","REPLICATE DATABASE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","RESTORE DATABASE","RESTORE REDUNDANCY","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE FUNCTION","SHOW CREATE PIPELINE","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SNAPSHOT DATABASE","SOURCE_POS_WAIT","START GROUP_REPLICATION","START PIPELINE","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP PIPELINE","STOP REPLICA","STOP REPLICATING","STOP SLAVE","TEST PIPELINE","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),oN=_(["UNION [ALL | DISTINCT]","EXCEPT","INTERSECT","MINUS"]),DN=_(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),PN=_(["ON DELETE","ON UPDATE","CHARACTER SET","{ROWS | RANGE} BETWEEN","IDENTIFIED BY"]),lN={name:"singlestoredb",tokenizerOptions:{reservedSelect:iN,reservedClauses:[...nN,...RR,...xT],reservedSetOperations:oN,reservedJoins:DN,reservedPhrases:PN,reservedKeywords:CN,reservedDataTypes:aN,reservedFunctionNames:LN,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_$]+"},{quote:"``",prefixes:["@"],requirePrefix:!0}],lineCommentTypes:["--","#"],operators:[":=","&","|","^","~","<<",">>","<=>","&&","||","::","::$","::%",":>","!:>","*.*"],postProcess:MT},formatOptions:{alwaysDenseOperators:["::","::$","::%"],onelineClauses:[...RR,...xT],tabularOnelineClauses:xT}},MN=["ABS","ACOS","ACOSH","ADD_MONTHS","ALL_USER_NAMES","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","APPROX_PERCENTILE_ACCUMULATE","APPROX_PERCENTILE_COMBINE","APPROX_PERCENTILE_ESTIMATE","APPROX_TOP_K","APPROX_TOP_K_ACCUMULATE","APPROX_TOP_K_COMBINE","APPROX_TOP_K_ESTIMATE","APPROXIMATE_JACCARD_INDEX","APPROXIMATE_SIMILARITY","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_COMPACT","ARRAY_CONSTRUCT","ARRAY_CONSTRUCT_COMPACT","ARRAY_CONTAINS","ARRAY_INSERT","ARRAY_INTERSECTION","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_SIZE","ARRAY_SLICE","ARRAY_TO_STRING","ARRAY_UNION_AGG","ARRAY_UNIQUE_AGG","ARRAYS_OVERLAP","AS_ARRAY","AS_BINARY","AS_BOOLEAN","AS_CHAR","AS_VARCHAR","AS_DATE","AS_DECIMAL","AS_NUMBER","AS_DOUBLE","AS_REAL","AS_INTEGER","AS_OBJECT","AS_TIME","AS_TIMESTAMP_LTZ","AS_TIMESTAMP_NTZ","AS_TIMESTAMP_TZ","ASCII","ASIN","ASINH","ATAN","ATAN2","ATANH","AUTO_REFRESH_REGISTRATION_HISTORY","AUTOMATIC_CLUSTERING_HISTORY","AVG","BASE64_DECODE_BINARY","BASE64_DECODE_STRING","BASE64_ENCODE","BIT_LENGTH","BITAND","BITAND_AGG","BITMAP_BIT_POSITION","BITMAP_BUCKET_NUMBER","BITMAP_CONSTRUCT_AGG","BITMAP_COUNT","BITMAP_OR_AGG","BITNOT","BITOR","BITOR_AGG","BITSHIFTLEFT","BITSHIFTRIGHT","BITXOR","BITXOR_AGG","BOOLAND","BOOLAND_AGG","BOOLNOT","BOOLOR","BOOLOR_AGG","BOOLXOR","BOOLXOR_AGG","BUILD_SCOPED_FILE_URL","BUILD_STAGE_FILE_URL","CASE","CAST","CBRT","CEIL","CHARINDEX","CHECK_JSON","CHECK_XML","CHR","CHAR","COALESCE","COLLATE","COLLATION","COMPLETE_TASK_GRAPHS","COMPRESS","CONCAT","CONCAT_WS","CONDITIONAL_CHANGE_EVENT","CONDITIONAL_TRUE_EVENT","CONTAINS","CONVERT_TIMEZONE","COPY_HISTORY","CORR","COS","COSH","COT","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CUME_DIST","CURRENT_ACCOUNT","CURRENT_AVAILABLE_ROLES","CURRENT_CLIENT","CURRENT_DATABASE","CURRENT_DATE","CURRENT_IP_ADDRESS","CURRENT_REGION","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_SECONDARY_ROLES","CURRENT_SESSION","CURRENT_STATEMENT","CURRENT_TASK_GRAPHS","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TRANSACTION","CURRENT_USER","CURRENT_VERSION","CURRENT_WAREHOUSE","DATA_TRANSFER_HISTORY","DATABASE_REFRESH_HISTORY","DATABASE_REFRESH_PROGRESS","DATABASE_REFRESH_PROGRESS_BY_JOB","DATABASE_STORAGE_USAGE_HISTORY","DATE_FROM_PARTS","DATE_PART","DATE_TRUNC","DATEADD","DATEDIFF","DAYNAME","DECODE","DECOMPRESS_BINARY","DECOMPRESS_STRING","DECRYPT","DECRYPT_RAW","DEGREES","DENSE_RANK","DIV0","EDITDISTANCE","ENCRYPT","ENCRYPT_RAW","ENDSWITH","EQUAL_NULL","EXP","EXPLAIN_JSON","EXTERNAL_FUNCTIONS_HISTORY","EXTERNAL_TABLE_FILES","EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY","EXTRACT","EXTRACT_SEMANTIC_CATEGORIES","FACTORIAL","FIRST_VALUE","FLATTEN","FLOOR","GENERATE_COLUMN_DESCRIPTION","GENERATOR","GET","GET_ABSOLUTE_PATH","GET_DDL","GET_IGNORE_CASE","GET_OBJECT_REFERENCES","GET_PATH","GET_PRESIGNED_URL","GET_RELATIVE_PATH","GET_STAGE_LOCATION","GETBIT","GREATEST","GREATEST_IGNORE_NULLS","GROUPING","GROUPING_ID","HASH","HASH_AGG","HAVERSINE","HEX_DECODE_BINARY","HEX_DECODE_STRING","HEX_ENCODE","HLL","HLL_ACCUMULATE","HLL_COMBINE","HLL_ESTIMATE","HLL_EXPORT","HLL_IMPORT","HOUR","MINUTE","SECOND","IFF","IFNULL","ILIKE","ILIKE ANY","INFER_SCHEMA","INITCAP","INSERT","INVOKER_ROLE","INVOKER_SHARE","IS_ARRAY","IS_BINARY","IS_BOOLEAN","IS_CHAR","IS_VARCHAR","IS_DATE","IS_DATE_VALUE","IS_DECIMAL","IS_DOUBLE","IS_REAL","IS_GRANTED_TO_INVOKER_ROLE","IS_INTEGER","IS_NULL_VALUE","IS_OBJECT","IS_ROLE_IN_SESSION","IS_TIME","IS_TIMESTAMP_LTZ","IS_TIMESTAMP_NTZ","IS_TIMESTAMP_TZ","JAROWINKLER_SIMILARITY","JSON_EXTRACT_PATH_TEXT","KURTOSIS","LAG","LAST_DAY","LAST_QUERY_ID","LAST_TRANSACTION","LAST_VALUE","LEAD","LEAST","LEFT","LENGTH","LEN","LIKE","LIKE ALL","LIKE ANY","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOGIN_HISTORY","LOGIN_HISTORY_BY_USER","LOWER","LPAD","LTRIM","MATERIALIZED_VIEW_REFRESH_HISTORY","MD5","MD5_HEX","MD5_BINARY","MD5_NUMBER — Obsoleted","MD5_NUMBER_LOWER64","MD5_NUMBER_UPPER64","MEDIAN","MIN","MAX","MINHASH","MINHASH_COMBINE","MOD","MODE","MONTHNAME","MONTHS_BETWEEN","NEXT_DAY","NORMAL","NTH_VALUE","NTILE","NULLIF","NULLIFZERO","NVL","NVL2","OBJECT_AGG","OBJECT_CONSTRUCT","OBJECT_CONSTRUCT_KEEP_NULL","OBJECT_DELETE","OBJECT_INSERT","OBJECT_KEYS","OBJECT_PICK","OCTET_LENGTH","PARSE_IP","PARSE_JSON","PARSE_URL","PARSE_XML","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIPE_USAGE_HISTORY","POLICY_CONTEXT","POLICY_REFERENCES","POSITION","POW","POWER","PREVIOUS_DAY","QUERY_ACCELERATION_HISTORY","QUERY_HISTORY","QUERY_HISTORY_BY_SESSION","QUERY_HISTORY_BY_USER","QUERY_HISTORY_BY_WAREHOUSE","RADIANS","RANDOM","RANDSTR","RANK","RATIO_TO_REPORT","REGEXP","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REGEXP_SUBSTR_ALL","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","REGR_VALX","REGR_VALY","REPEAT","REPLACE","REPLICATION_GROUP_REFRESH_HISTORY","REPLICATION_GROUP_REFRESH_PROGRESS","REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB","REPLICATION_GROUP_USAGE_HISTORY","REPLICATION_USAGE_HISTORY","REST_EVENT_HISTORY","RESULT_SCAN","REVERSE","RIGHT","RLIKE","ROUND","ROW_NUMBER","RPAD","RTRIM","RTRIMMED_LENGTH","SEARCH_OPTIMIZATION_HISTORY","SEQ1","SEQ2","SEQ4","SEQ8","SERVERLESS_TASK_HISTORY","SHA1","SHA1_HEX","SHA1_BINARY","SHA2","SHA2_HEX","SHA2_BINARY","SIGN","SIN","SINH","SKEW","SOUNDEX","SPACE","SPLIT","SPLIT_PART","SPLIT_TO_TABLE","SQRT","SQUARE","ST_AREA","ST_ASEWKB","ST_ASEWKT","ST_ASGEOJSON","ST_ASWKB","ST_ASBINARY","ST_ASWKT","ST_ASTEXT","ST_AZIMUTH","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DWITHIN","ST_ENDPOINT","ST_ENVELOPE","ST_GEOGFROMGEOHASH","ST_GEOGPOINTFROMGEOHASH","ST_GEOGRAPHYFROMWKB","ST_GEOGRAPHYFROMWKT","ST_GEOHASH","ST_GEOMETRYFROMWKB","ST_GEOMETRYFROMWKT","ST_HAUSDORFFDISTANCE","ST_INTERSECTION","ST_INTERSECTS","ST_LENGTH","ST_MAKEGEOMPOINT","ST_GEOM_POINT","ST_MAKELINE","ST_MAKEPOINT","ST_POINT","ST_MAKEPOLYGON","ST_POLYGON","ST_NPOINTS","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SETSRID","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY","STAGE_STORAGE_USAGE_HISTORY","STARTSWITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRIP_NULL_VALUE","STRTOK","STRTOK_SPLIT_TO_TABLE","STRTOK_TO_ARRAY","SUBSTR","SUBSTRING","SUM","SYSDATE","SYSTEM$ABORT_SESSION","SYSTEM$ABORT_TRANSACTION","SYSTEM$AUTHORIZE_PRIVATELINK","SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS","SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS","SYSTEM$CANCEL_ALL_QUERIES","SYSTEM$CANCEL_QUERY","SYSTEM$CLUSTERING_DEPTH","SYSTEM$CLUSTERING_INFORMATION","SYSTEM$CLUSTERING_RATIO ","SYSTEM$CURRENT_USER_TASK_NAME","SYSTEM$DATABASE_REFRESH_HISTORY ","SYSTEM$DATABASE_REFRESH_PROGRESS","SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB ","SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$DISABLE_DATABASE_REPLICATION","SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$ESTIMATE_QUERY_ACCELERATION","SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS","SYSTEM$EXPLAIN_JSON_TO_TEXT","SYSTEM$EXPLAIN_PLAN_JSON","SYSTEM$EXTERNAL_TABLE_PIPE_STATUS","SYSTEM$GENERATE_SAML_CSR","SYSTEM$GENERATE_SCIM_ACCESS_TOKEN","SYSTEM$GET_AWS_SNS_IAM_POLICY","SYSTEM$GET_PREDECESSOR_RETURN_VALUE","SYSTEM$GET_PRIVATELINK","SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS","SYSTEM$GET_PRIVATELINK_CONFIG","SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO","SYSTEM$GET_TAG","SYSTEM$GET_TAG_ALLOWED_VALUES","SYSTEM$GET_TAG_ON_CURRENT_COLUMN","SYSTEM$GET_TAG_ON_CURRENT_TABLE","SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER","SYSTEM$LAST_CHANGE_COMMIT_TIME","SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME","SYSTEM$MIGRATE_SAML_IDP_REGISTRATION","SYSTEM$PIPE_FORCE_RESUME","SYSTEM$PIPE_STATUS","SYSTEM$REVOKE_PRIVATELINK","SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS","SYSTEM$SET_RETURN_VALUE","SYSTEM$SHOW_OAUTH_CLIENT_SECRETS","SYSTEM$STREAM_GET_TABLE_TIMESTAMP","SYSTEM$STREAM_HAS_DATA","SYSTEM$TASK_DEPENDENTS_ENABLE","SYSTEM$TYPEOF","SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS","SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN","SYSTEM$WAIT","SYSTEM$WHITELIST","SYSTEM$WHITELIST_PRIVATELINK","TAG_REFERENCES","TAG_REFERENCES_ALL_COLUMNS","TAG_REFERENCES_WITH_LINEAGE","TAN","TANH","TASK_DEPENDENTS","TASK_HISTORY","TIME_FROM_PARTS","TIME_SLICE","TIMEADD","TIMEDIFF","TIMESTAMP_FROM_PARTS","TIMESTAMPADD","TIMESTAMPDIFF","TO_ARRAY","TO_BINARY","TO_BOOLEAN","TO_CHAR","TO_VARCHAR","TO_DATE","DATE","TO_DECIMAL","TO_NUMBER","TO_NUMERIC","TO_DOUBLE","TO_GEOGRAPHY","TO_GEOMETRY","TO_JSON","TO_OBJECT","TO_TIME","TIME","TO_TIMESTAMP","TO_TIMESTAMP_LTZ","TO_TIMESTAMP_NTZ","TO_TIMESTAMP_TZ","TO_VARIANT","TO_XML","TRANSLATE","TRIM","TRUNCATE","TRUNC","TRUNC","TRY_BASE64_DECODE_BINARY","TRY_BASE64_DECODE_STRING","TRY_CAST","TRY_HEX_DECODE_BINARY","TRY_HEX_DECODE_STRING","TRY_PARSE_JSON","TRY_TO_BINARY","TRY_TO_BOOLEAN","TRY_TO_DATE","TRY_TO_DECIMAL","TRY_TO_NUMBER","TRY_TO_NUMERIC","TRY_TO_DOUBLE","TRY_TO_GEOGRAPHY","TRY_TO_GEOMETRY","TRY_TO_TIME","TRY_TO_TIMESTAMP","TRY_TO_TIMESTAMP_LTZ","TRY_TO_TIMESTAMP_NTZ","TRY_TO_TIMESTAMP_TZ","TYPEOF","UNICODE","UNIFORM","UPPER","UUID_STRING","VALIDATE","VALIDATE_PIPE_LOAD","VAR_POP","VAR_SAMP","VARIANCE","VARIANCE_SAMP","VARIANCE_POP","WAREHOUSE_LOAD_HISTORY","WAREHOUSE_METERING_HISTORY","WIDTH_BUCKET","XMLGET","YEAR","YEAROFWEEK","YEAROFWEEKISO","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEKISO","DAYOFYEAR","WEEK","WEEK","WEEKOFYEAR","WEEKISO","MONTH","QUARTER","ZEROIFNULL","ZIPF"],UN=["ACCOUNT","ALL","ALTER","AND","ANY","AS","BETWEEN","BY","CASE","CAST","CHECK","COLUMN","CONNECT","CONNECTION","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATABASE","DELETE","DISTINCT","DROP","ELSE","EXISTS","FALSE","FOLLOWING","FOR","FROM","FULL","GRANT","GROUP","GSCLUSTER","HAVING","ILIKE","IN","INCREMENT","INNER","INSERT","INTERSECT","INTO","IS","ISSUE","JOIN","LATERAL","LEFT","LIKE","LOCALTIME","LOCALTIMESTAMP","MINUS","NATURAL","NOT","NULL","OF","ON","OR","ORDER","ORGANIZATION","QUALIFY","REGEXP","REVOKE","RIGHT","RLIKE","ROW","ROWS","SAMPLE","SCHEMA","SELECT","SET","SOME","START","TABLE","TABLESAMPLE","THEN","TO","TRIGGER","TRUE","TRY_CAST","UNION","UNIQUE","UPDATE","USING","VALUES","VIEW","WHEN","WHENEVER","WHERE","WITH","COMMENT"],uN=["NUMBER","DECIMAL","NUMERIC","INT","INTEGER","BIGINT","SMALLINT","TINYINT","BYTEINT","FLOAT","FLOAT4","FLOAT8","DOUBLE","DOUBLE PRECISION","REAL","VARCHAR","CHAR","CHARACTER","STRING","TEXT","BINARY","VARBINARY","BOOLEAN","DATE","DATETIME","TIME","TIMESTAMP","TIMESTAMP_LTZ","TIMESTAMP_NTZ","TIMESTAMP","TIMESTAMP_TZ","VARIANT","OBJECT","ARRAY","GEOGRAPHY","GEOMETRY"],cN=_(["SELECT [ALL | DISTINCT]"]),dN=_(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","QUALIFY","LIMIT","OFFSET","FETCH [FIRST | NEXT]","INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]","{THEN | ELSE} INTO","VALUES","SET","CLUSTER BY","[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}","COPY GRANTS","USING TEMPLATE","MERGE INTO","WHEN MATCHED [AND]","THEN {UPDATE SET | DELETE}","WHEN NOT MATCHED THEN INSERT"]),AR=_(["CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]"]),wT=_(["CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]","UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","RENAME TO","SWAP WITH","[SUSPEND | RESUME] RECLUSTER","DROP CLUSTERING KEY","ADD [COLUMN]","RENAME COLUMN","{ALTER | MODIFY} [COLUMN]","DROP [COLUMN]","{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]","RENAME CONSTRAINT","{ADD | DROP} SEARCH OPTIMIZATION","{SET | UNSET} TAG","{ADD | DROP} ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","[SET DATA] TYPE","UNSET COMMENT","{SET | UNSET} MASKING POLICY","TRUNCATE [TABLE] [IF EXISTS]","ALTER ACCOUNT","ALTER API INTEGRATION","ALTER CONNECTION","ALTER DATABASE","ALTER EXTERNAL TABLE","ALTER FAILOVER GROUP","ALTER FILE FORMAT","ALTER FUNCTION","ALTER INTEGRATION","ALTER MASKING POLICY","ALTER MATERIALIZED VIEW","ALTER NETWORK POLICY","ALTER NOTIFICATION INTEGRATION","ALTER PIPE","ALTER PROCEDURE","ALTER REPLICATION GROUP","ALTER RESOURCE MONITOR","ALTER ROLE","ALTER ROW ACCESS POLICY","ALTER SCHEMA","ALTER SECURITY INTEGRATION","ALTER SEQUENCE","ALTER SESSION","ALTER SESSION POLICY","ALTER SHARE","ALTER STAGE","ALTER STORAGE INTEGRATION","ALTER STREAM","ALTER TAG","ALTER TASK","ALTER USER","ALTER VIEW","ALTER WAREHOUSE","BEGIN","CALL","COMMIT","COPY INTO","CREATE ACCOUNT","CREATE API INTEGRATION","CREATE CONNECTION","CREATE DATABASE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL TABLE","CREATE FAILOVER GROUP","CREATE FILE FORMAT","CREATE FUNCTION","CREATE INTEGRATION","CREATE MANAGED ACCOUNT","CREATE MASKING POLICY","CREATE MATERIALIZED VIEW","CREATE NETWORK POLICY","CREATE NOTIFICATION INTEGRATION","CREATE PIPE","CREATE PROCEDURE","CREATE REPLICATION GROUP","CREATE RESOURCE MONITOR","CREATE ROLE","CREATE ROW ACCESS POLICY","CREATE SCHEMA","CREATE SECURITY INTEGRATION","CREATE SEQUENCE","CREATE SESSION POLICY","CREATE SHARE","CREATE STAGE","CREATE STORAGE INTEGRATION","CREATE STREAM","CREATE TAG","CREATE TASK","CREATE USER","CREATE WAREHOUSE","DELETE","DESCRIBE DATABASE","DESCRIBE EXTERNAL TABLE","DESCRIBE FILE FORMAT","DESCRIBE FUNCTION","DESCRIBE INTEGRATION","DESCRIBE MASKING POLICY","DESCRIBE MATERIALIZED VIEW","DESCRIBE NETWORK POLICY","DESCRIBE PIPE","DESCRIBE PROCEDURE","DESCRIBE RESULT","DESCRIBE ROW ACCESS POLICY","DESCRIBE SCHEMA","DESCRIBE SEQUENCE","DESCRIBE SESSION POLICY","DESCRIBE SHARE","DESCRIBE STAGE","DESCRIBE STREAM","DESCRIBE TABLE","DESCRIBE TASK","DESCRIBE TRANSACTION","DESCRIBE USER","DESCRIBE VIEW","DESCRIBE WAREHOUSE","DROP CONNECTION","DROP DATABASE","DROP EXTERNAL TABLE","DROP FAILOVER GROUP","DROP FILE FORMAT","DROP FUNCTION","DROP INTEGRATION","DROP MANAGED ACCOUNT","DROP MASKING POLICY","DROP MATERIALIZED VIEW","DROP NETWORK POLICY","DROP PIPE","DROP PROCEDURE","DROP REPLICATION GROUP","DROP RESOURCE MONITOR","DROP ROLE","DROP ROW ACCESS POLICY","DROP SCHEMA","DROP SEQUENCE","DROP SESSION POLICY","DROP SHARE","DROP STAGE","DROP STREAM","DROP TAG","DROP TASK","DROP USER","DROP VIEW","DROP WAREHOUSE","EXECUTE IMMEDIATE","EXECUTE TASK","EXPLAIN","GET","GRANT OWNERSHIP","GRANT ROLE","INSERT","LIST","MERGE","PUT","REMOVE","REVOKE ROLE","ROLLBACK","SHOW COLUMNS","SHOW CONNECTIONS","SHOW DATABASES","SHOW DATABASES IN FAILOVER GROUP","SHOW DATABASES IN REPLICATION GROUP","SHOW DELEGATED AUTHORIZATIONS","SHOW EXTERNAL FUNCTIONS","SHOW EXTERNAL TABLES","SHOW FAILOVER GROUPS","SHOW FILE FORMATS","SHOW FUNCTIONS","SHOW GLOBAL ACCOUNTS","SHOW GRANTS","SHOW INTEGRATIONS","SHOW LOCKS","SHOW MANAGED ACCOUNTS","SHOW MASKING POLICIES","SHOW MATERIALIZED VIEWS","SHOW NETWORK POLICIES","SHOW OBJECTS","SHOW ORGANIZATION ACCOUNTS","SHOW PARAMETERS","SHOW PIPES","SHOW PRIMARY KEYS","SHOW PROCEDURES","SHOW REGIONS","SHOW REPLICATION ACCOUNTS","SHOW REPLICATION DATABASES","SHOW REPLICATION GROUPS","SHOW RESOURCE MONITORS","SHOW ROLES","SHOW ROW ACCESS POLICIES","SHOW SCHEMAS","SHOW SEQUENCES","SHOW SESSION POLICIES","SHOW SHARES","SHOW SHARES IN FAILOVER GROUP","SHOW SHARES IN REPLICATION GROUP","SHOW STAGES","SHOW STREAMS","SHOW TABLES","SHOW TAGS","SHOW TASKS","SHOW TRANSACTIONS","SHOW USER FUNCTIONS","SHOW USERS","SHOW VARIABLES","SHOW VIEWS","SHOW WAREHOUSES","TRUNCATE MATERIALIZED VIEW","UNDROP DATABASE","UNDROP SCHEMA","UNDROP TABLE","UNDROP TAG","UNSET","USE DATABASE","USE ROLE","USE SCHEMA","USE SECONDARY ROLES","USE WAREHOUSE"]),GN=_(["UNION [ALL]","MINUS","EXCEPT","INTERSECT"]),pN=_(["[INNER] JOIN","[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | NATURAL} JOIN"]),HN=_(["{ROWS | RANGE} BETWEEN","ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]"]),BN={name:"snowflake",tokenizerOptions:{reservedSelect:cN,reservedClauses:[...dN,...AR,...wT],reservedSetOperations:GN,reservedJoins:pN,reservedPhrases:HN,reservedKeywords:UN,reservedDataTypes:uN,reservedFunctionNames:MN,stringTypes:["$$","''-qq-bs"],identTypes:['""-qq'],variableTypes:[{regex:"[$][1-9]\\d*"},{regex:"[$][_a-zA-Z][_a-zA-Z0-9$]*"}],extraParens:["[]"],identChars:{rest:"$"},lineCommentTypes:["--","//"],operators:["%","::","||","=>"],propertyAccessOperators:[":"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:[...AR,...wT],tabularOnelineClauses:wT}},wE=T=>T[T.length-1],AA=T=>T.sort((E,e)=>e.length-E.length||E.localeCompare(e)),OT=T=>T.replace(/\s+/gu," "),JT=T=>/\n/.test(T),tE=T=>T.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&"),SR=/\s+/uy,uE=T=>new RegExp(`(?:${T})`,"uy"),mN=T=>T.split("").map(E=>/ /gu.test(E)?"\\s+":`[${E.toUpperCase()}${E.toLowerCase()}]`).join(""),YN=T=>T+"(?:-"+T+")*",FN=({prefixes:T,requirePrefix:E})=>`(?:${T.map(mN).join("|")}${E?"":"|"})`,hN=T=>new RegExp(`(?:${T.map(tE).join("|")}).*?(?=\r
|\r|
|$)`,"uy"),IR=(T,E=[])=>{const e=T==="open"?0:1,R=["()",...E].map(A=>A[e]);return uE(R.map(tE).join("|"))},tR=T=>uE(`${AA(T).map(tE).join("|")}`),fN=({rest:T,dashes:E})=>T||E?`(?![${T||""}${E?"-":""}])`:"",LE=(T,E={})=>{if(T.length===0)return/^\b$/u;const e=fN(E),R=AA(T).map(tE).join("|").replace(/ /gu,"\\s+");return new RegExp(`(?:${R})${e}\\b`,"iuy")},$T=(T,E)=>{if(!T.length)return;const e=T.map(tE).join("|");return uE(`(?:${e})(?:${E})`)},VN=()=>{const T={"<":">","[":"]","(":")","{":"}"},E="{left}(?:(?!{right}').)*?{right}",e=Object.entries(T).map(([O,N])=>E.replace(/{left}/g,tE(O)).replace(/{right}/g,tE(N))),R=tE(Object.keys(T).join(""));return`[Qq]'(?:${String.raw`(?<tag>[^\s${R}])(?:(?!\k<tag>').)*?\k<tag>`}|${e.join("|")})'`},NR={"``":"(?:`[^`]*`)+","[]":String.raw`(?:\[[^\]]*\])(?:\][^\]]*\])*`,'""-qq':String.raw`(?:"[^"]*")+`,'""-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")`,'""-qq-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")+`,'""-raw':String.raw`(?:"[^"]*")`,"''-qq":String.raw`(?:'[^']*')+`,"''-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')`,"''-qq-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')+`,"''-raw":String.raw`(?:'[^']*')`,$$:String.raw`(?<tag>\$\w*\$)[\s\S]*?\k<tag>`,"'''..'''":String.raw`'''[^\\]*?(?:\\.[^\\]*?)*?'''`,'""".."""':String.raw`"""[^\\]*?(?:\\.[^\\]*?)*?"""`,"{}":String.raw`(?:\{[^\}]*\})`,"q''":VN()},SA=T=>typeof T=="string"?NR[T]:"regex"in T?T.regex:FN(T)+NR[T.quote],vN=T=>uE(T.map(E=>"regex"in E?E.regex:SA(E)).join("|")),OA=T=>T.map(SA).join("|"),sR=T=>uE(OA(T)),yN=(T={})=>uE(IA(T)),IA=({first:T,rest:E,dashes:e,allowFirstCharNumber:R}={})=>{const A="\\p{Alphabetic}\\p{Mark}_",S="\\p{Decimal_Number}",O=tE(T??""),N=tE(E??""),i=R?`[${A}${S}${O}][${A}${S}${N}]*`:`[${A}${O}][${A}${S}${N}]*`;return e?YN(i):i};function tA(T,E){const e=T.slice(0,E).split(/\n/);return{line:e.length,col:e[e.length-1].length+1}}var WN=class{constructor(T,E){this.rules=T,this.dialectName=E,this.input="",this.index=0}tokenize(T){this.input=T,this.index=0;const E=[];let e;for(;this.index<this.input.length;){const R=this.getWhitespace();if(this.index<this.input.length){if(e=this.getNextToken(),!e)throw this.createParseError();E.push(eE(z({},e),{precedingWhitespace:R}))}}return E}createParseError(){const T=this.input.slice(this.index,this.index+10),{line:E,col:e}=tA(this.input,this.index);return new Error(`Parse error: Unexpected "${T}" at line ${E} column ${e}.
${this.dialectInfo()}`)}dialectInfo(){return this.dialectName==="sql"?`This likely happens because you're using the default "sql" dialect.
If possible, please select a more specific dialect (like sqlite, postgresql, etc).`:`SQL dialect used: "${this.dialectName}".`}getWhitespace(){SR.lastIndex=this.index;const T=SR.exec(this.input);if(T)return this.index+=T[0].length,T[0]}getNextToken(){for(const T of this.rules){const E=this.match(T);if(E)return E}}match(T){T.regex.lastIndex=this.index;const E=T.regex.exec(this.input);if(E){const e=E[0],R={type:T.type,raw:e,text:T.text?T.text(e):e,start:this.index};return T.key&&(R.key=T.key(e)),this.index+=e.length,R}}},rR=/\/\*/uy,gN=/[\s\S]/uy,XN=/\*\//uy,bN=class{constructor(){this.lastIndex=0}exec(T){let E="",e,R=0;if(e=this.matchSection(rR,T))E+=e,R++;else return null;for(;R>0;)if(e=this.matchSection(rR,T))E+=e,R++;else if(e=this.matchSection(XN,T))E+=e,R--;else if(e=this.matchSection(gN,T))E+=e;else return null;return[E]}matchSection(T,E){T.lastIndex=this.lastIndex;const e=T.exec(E);return e&&(this.lastIndex+=e[0].length),e?e[0]:null}},KN=class{constructor(T,E){this.cfg=T,this.dialectName=E,this.rulesBeforeParams=this.buildRulesBeforeParams(T),this.rulesAfterParams=this.buildRulesAfterParams(T)}tokenize(T,E){const e=[...this.rulesBeforeParams,...this.buildParamRules(this.cfg,E),...this.rulesAfterParams],R=new WN(e,this.dialectName).tokenize(T);return this.cfg.postProcess?this.cfg.postProcess(R):R}buildRulesBeforeParams(T){var E,e;return this.validRules([{type:"BLOCK_COMMENT",regex:/(\/\* *sql-formatter-disable *\*\/[\s\S]*?(?:\/\* *sql-formatter-enable *\*\/|$))/uy},{type:"BLOCK_COMMENT",regex:T.nestedBlockComments?new bN:/(\/\*[^]*?\*\/)/uy},{type:"LINE_COMMENT",regex:hN((E=T.lineCommentTypes)!=null?E:["--"])},{type:"QUOTED_IDENTIFIER",regex:sR(T.identTypes)},{type:"NUMBER",regex:/(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\s*)?[0-9]+(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\.[0-9]+)?)?)(?![\w\p{Alphabetic}])/uy},{type:"RESERVED_PHRASE",regex:LE((e=T.reservedPhrases)!=null?e:[],T.identChars),text:q},{type:"CASE",regex:/CASE\b/iuy,text:q},{type:"END",regex:/END\b/iuy,text:q},{type:"BETWEEN",regex:/BETWEEN\b/iuy,text:q},{type:"LIMIT",regex:T.reservedClauses.includes("LIMIT")?/LIMIT\b/iuy:void 0,text:q},{type:"RESERVED_CLAUSE",regex:LE(T.reservedClauses,T.identChars),text:q},{type:"RESERVED_SELECT",regex:LE(T.reservedSelect,T.identChars),text:q},{type:"RESERVED_SET_OPERATION",regex:LE(T.reservedSetOperations,T.identChars),text:q},{type:"WHEN",regex:/WHEN\b/iuy,text:q},{type:"ELSE",regex:/ELSE\b/iuy,text:q},{type:"THEN",regex:/THEN\b/iuy,text:q},{type:"RESERVED_JOIN",regex:LE(T.reservedJoins,T.identChars),text:q},{type:"AND",regex:/AND\b/iuy,text:q},{type:"OR",regex:/OR\b/iuy,text:q},{type:"XOR",regex:T.supportsXor?/XOR\b/iuy:void 0,text:q},{type:"RESERVED_FUNCTION_NAME",regex:LE(T.reservedFunctionNames,T.identChars),text:q},{type:"RESERVED_DATA_TYPE",regex:LE(T.reservedDataTypes,T.identChars),text:q},{type:"RESERVED_KEYWORD",regex:LE(T.reservedKeywords,T.identChars),text:q}])}buildRulesAfterParams(T){var E,e;return this.validRules([{type:"VARIABLE",regex:T.variableTypes?vN(T.variableTypes):void 0},{type:"STRING",regex:sR(T.stringTypes)},{type:"IDENTIFIER",regex:yN(T.identChars)},{type:"DELIMITER",regex:/[;]/uy},{type:"COMMA",regex:/[,]/y},{type:"OPEN_PAREN",regex:IR("open",T.extraParens)},{type:"CLOSE_PAREN",regex:IR("close",T.extraParens)},{type:"OPERATOR",regex:tR(["+","-","/",">","<","=","<>","<=",">=","!=",...(E=T.operators)!=null?E:[]])},{type:"ASTERISK",regex:/[*]/uy},{type:"PROPERTY_ACCESS_OPERATOR",regex:tR([".",...(e=T.propertyAccessOperators)!=null?e:[]])}])}buildParamRules(T,E){var e,R,A,S,O;const N={named:(E==null?void 0:E.named)||((e=T.paramTypes)==null?void 0:e.named)||[],quoted:(E==null?void 0:E.quoted)||((R=T.paramTypes)==null?void 0:R.quoted)||[],numbered:(E==null?void 0:E.numbered)||((A=T.paramTypes)==null?void 0:A.numbered)||[],positional:typeof(E==null?void 0:E.positional)=="boolean"?E.positional:(S=T.paramTypes)==null?void 0:S.positional,custom:(E==null?void 0:E.custom)||((O=T.paramTypes)==null?void 0:O.custom)||[]};return this.validRules([{type:"NAMED_PARAMETER",regex:$T(N.named,IA(T.paramChars||T.identChars)),key:i=>i.slice(1)},{type:"QUOTED_PARAMETER",regex:$T(N.quoted,OA(T.identTypes)),key:i=>(({tokenKey:I,quoteChar:t})=>I.replace(new RegExp(tE("\\"+t),"gu"),t))({tokenKey:i.slice(2,-1),quoteChar:i.slice(-1)})},{type:"NUMBERED_PARAMETER",regex:$T(N.numbered,"[0-9]+"),key:i=>i.slice(1)},{type:"POSITIONAL_PARAMETER",regex:N.positional?/[?]/y:void 0},...N.custom.map(i=>{var I;return{type:"CUSTOM_PARAMETER",regex:uE(i.regex),key:(I=i.key)!=null?I:t=>t}})])}validRules(T){return T.filter(E=>!!E.regex)}},q=T=>OT(T.toUpperCase()),_R=new Map,xN=T=>{let E=_R.get(T);return E||(E=wN(T),_R.set(T,E)),E},wN=T=>({tokenizer:new KN(T.tokenizerOptions,T.name),formatOptions:JN(T.formatOptions)}),JN=T=>{var E;return{alwaysDenseOperators:T.alwaysDenseOperators||[],onelineClauses:Object.fromEntries(T.onelineClauses.map(e=>[e,!0])),tabularOnelineClauses:Object.fromEntries(((E=T.tabularOnelineClauses)!=null?E:T.onelineClauses).map(e=>[e,!0]))}};function $N(T){return T.indentStyle==="tabularLeft"||T.indentStyle==="tabularRight"?" ".repeat(10):T.useTabs?"	":" ".repeat(T.tabWidth)}function mE(T){return T.indentStyle==="tabularLeft"||T.indentStyle==="tabularRight"}var kN=class{constructor(T){this.params=T,this.index=0}get({key:T,text:E}){return this.params?T?this.params[T]:this.params[this.index++]:E}getPositionalParameterIndex(){return this.index}setPositionalParameterIndex(T){this.index=T}};function QN(T){return T.map(qN).map(ZN).map(jN).map(zN).map(Es)}var qN=(T,E,e)=>{if(RA(T.type)){const R=Ts(e,E);if(R&&R.type==="PROPERTY_ACCESS_OPERATOR")return eE(z({},T),{type:"IDENTIFIER",text:T.raw})}return T},ZN=(T,E,e)=>{if(T.type==="RESERVED_FUNCTION_NAME"){const R=TT(e,E);if(!R||!NA(R))return eE(z({},T),{type:"RESERVED_KEYWORD"})}return T},jN=(T,E,e)=>{if(T.type==="RESERVED_DATA_TYPE"){const R=TT(e,E);if(R&&NA(R))return eE(z({},T),{type:"RESERVED_PARAMETERIZED_DATA_TYPE"})}return T},zN=(T,E,e)=>{if(T.type==="IDENTIFIER"){const R=TT(e,E);if(R&&sA(R))return eE(z({},T),{type:"ARRAY_IDENTIFIER"})}return T},Es=(T,E,e)=>{if(T.type==="RESERVED_DATA_TYPE"){const R=TT(e,E);if(R&&sA(R))return eE(z({},T),{type:"ARRAY_KEYWORD"})}return T},Ts=(T,E)=>TT(T,E,-1),TT=(T,E,e=1)=>{let R=1;for(;T[E+R*e]&&es(T[E+R*e]);)R++;return T[E+R*e]},NA=T=>T.type==="OPEN_PAREN"&&T.text==="(",sA=T=>T.type==="OPEN_PAREN"&&T.text==="[",es=T=>T.type==="BLOCK_COMMENT"||T.type==="LINE_COMMENT",rA=class{constructor(T){this.tokenize=T,this.index=0,this.tokens=[],this.input=""}reset(T,E){this.input=T,this.index=0,this.tokens=this.tokenize(T)}next(){return this.tokens[this.index++]}save(){}formatError(T){const{line:E,col:e}=tA(this.input,T.start);return`Parse error at token: ${T.text} at line ${E} column ${e}`}has(T){return T in TA}};function kT(T){return T[0]}var p=new rA(T=>[]),PE=([[T]])=>T,Z=T=>({type:"keyword",tokenType:T.type,text:T.text,raw:T.raw}),CR=T=>({type:"data_type",text:T.text,raw:T.raw}),j=(T,{leading:E,trailing:e})=>(E!=null&&E.length&&(T=eE(z({},T),{leadingComments:E})),e!=null&&e.length&&(T=eE(z({},T),{trailingComments:e})),T),Rs=(T,{leading:E,trailing:e})=>{if(E!=null&&E.length){const[R,...A]=T;T=[j(R,{leading:E}),...A]}if(e!=null&&e.length){const R=T.slice(0,-1),A=T[T.length-1];T=[...R,j(A,{trailing:e})]}return T},As={Lexer:p,ParserRules:[{name:"main$ebnf$1",symbols:[]},{name:"main$ebnf$1",symbols:["main$ebnf$1","statement"],postprocess:T=>T[0].concat([T[1]])},{name:"main",symbols:["main$ebnf$1"],postprocess:([T])=>{const E=T[T.length-1];return E&&!E.hasSemicolon?E.children.length>0?T:T.slice(0,-1):T}},{name:"statement$subexpression$1",symbols:[p.has("DELIMITER")?{type:"DELIMITER"}:DELIMITER]},{name:"statement$subexpression$1",symbols:[p.has("EOF")?{type:"EOF"}:EOF]},{name:"statement",symbols:["expressions_or_clauses","statement$subexpression$1"],postprocess:([T,[E]])=>({type:"statement",children:T,hasSemicolon:E.type==="DELIMITER"})},{name:"expressions_or_clauses$ebnf$1",symbols:[]},{name:"expressions_or_clauses$ebnf$1",symbols:["expressions_or_clauses$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"expressions_or_clauses$ebnf$2",symbols:[]},{name:"expressions_or_clauses$ebnf$2",symbols:["expressions_or_clauses$ebnf$2","clause"],postprocess:T=>T[0].concat([T[1]])},{name:"expressions_or_clauses",symbols:["expressions_or_clauses$ebnf$1","expressions_or_clauses$ebnf$2"],postprocess:([T,E])=>[...T,...E]},{name:"clause$subexpression$1",symbols:["limit_clause"]},{name:"clause$subexpression$1",symbols:["select_clause"]},{name:"clause$subexpression$1",symbols:["other_clause"]},{name:"clause$subexpression$1",symbols:["set_operation"]},{name:"clause",symbols:["clause$subexpression$1"],postprocess:PE},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["free_form_sql"]},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"limit_clause$ebnf$1$subexpression$1",symbols:[p.has("COMMA")?{type:"COMMA"}:COMMA,"limit_clause$ebnf$1$subexpression$1$ebnf$1"]},{name:"limit_clause$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1"],postprocess:kT},{name:"limit_clause$ebnf$1",symbols:[],postprocess:()=>null},{name:"limit_clause",symbols:[p.has("LIMIT")?{type:"LIMIT"}:LIMIT,"_","expression_chain_","limit_clause$ebnf$1"],postprocess:([T,E,e,R])=>{if(R){const[A,S]=R;return{type:"limit_clause",limitKw:j(Z(T),{trailing:E}),offset:e,count:S}}else return{type:"limit_clause",limitKw:j(Z(T),{trailing:E}),count:e}}},{name:"select_clause$subexpression$1$ebnf$1",symbols:[]},{name:"select_clause$subexpression$1$ebnf$1",symbols:["select_clause$subexpression$1$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"select_clause$subexpression$1",symbols:["all_columns_asterisk","select_clause$subexpression$1$ebnf$1"]},{name:"select_clause$subexpression$1$ebnf$2",symbols:[]},{name:"select_clause$subexpression$1$ebnf$2",symbols:["select_clause$subexpression$1$ebnf$2","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"select_clause$subexpression$1",symbols:["asteriskless_free_form_sql","select_clause$subexpression$1$ebnf$2"]},{name:"select_clause",symbols:[p.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT,"select_clause$subexpression$1"],postprocess:([T,[E,e]])=>({type:"clause",nameKw:Z(T),children:[E,...e]})},{name:"select_clause",symbols:[p.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT],postprocess:([T])=>({type:"clause",nameKw:Z(T),children:[]})},{name:"all_columns_asterisk",symbols:[p.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK],postprocess:()=>({type:"all_columns_asterisk"})},{name:"other_clause$ebnf$1",symbols:[]},{name:"other_clause$ebnf$1",symbols:["other_clause$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"other_clause",symbols:[p.has("RESERVED_CLAUSE")?{type:"RESERVED_CLAUSE"}:RESERVED_CLAUSE,"other_clause$ebnf$1"],postprocess:([T,E])=>({type:"clause",nameKw:Z(T),children:E})},{name:"set_operation$ebnf$1",symbols:[]},{name:"set_operation$ebnf$1",symbols:["set_operation$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"set_operation",symbols:[p.has("RESERVED_SET_OPERATION")?{type:"RESERVED_SET_OPERATION"}:RESERVED_SET_OPERATION,"set_operation$ebnf$1"],postprocess:([T,E])=>({type:"set_operation",nameKw:Z(T),children:E})},{name:"expression_chain_$ebnf$1",symbols:["expression_with_comments_"]},{name:"expression_chain_$ebnf$1",symbols:["expression_chain_$ebnf$1","expression_with_comments_"],postprocess:T=>T[0].concat([T[1]])},{name:"expression_chain_",symbols:["expression_chain_$ebnf$1"],postprocess:kT},{name:"expression_chain$ebnf$1",symbols:[]},{name:"expression_chain$ebnf$1",symbols:["expression_chain$ebnf$1","_expression_with_comments"],postprocess:T=>T[0].concat([T[1]])},{name:"expression_chain",symbols:["expression","expression_chain$ebnf$1"],postprocess:([T,E])=>[T,...E]},{name:"andless_expression_chain$ebnf$1",symbols:[]},{name:"andless_expression_chain$ebnf$1",symbols:["andless_expression_chain$ebnf$1","_andless_expression_with_comments"],postprocess:T=>T[0].concat([T[1]])},{name:"andless_expression_chain",symbols:["andless_expression","andless_expression_chain$ebnf$1"],postprocess:([T,E])=>[T,...E]},{name:"expression_with_comments_",symbols:["expression","_"],postprocess:([T,E])=>j(T,{trailing:E})},{name:"_expression_with_comments",symbols:["_","expression"],postprocess:([T,E])=>j(E,{leading:T})},{name:"_andless_expression_with_comments",symbols:["_","andless_expression"],postprocess:([T,E])=>j(E,{leading:T})},{name:"free_form_sql$subexpression$1",symbols:["asteriskless_free_form_sql"]},{name:"free_form_sql$subexpression$1",symbols:["asterisk"]},{name:"free_form_sql",symbols:["free_form_sql$subexpression$1"],postprocess:PE},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["logic_operator"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comma"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comment"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["other_keyword"]},{name:"asteriskless_free_form_sql",symbols:["asteriskless_free_form_sql$subexpression$1"],postprocess:PE},{name:"expression$subexpression$1",symbols:["andless_expression"]},{name:"expression$subexpression$1",symbols:["logic_operator"]},{name:"expression",symbols:["expression$subexpression$1"],postprocess:PE},{name:"andless_expression$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"andless_expression$subexpression$1",symbols:["asterisk"]},{name:"andless_expression",symbols:["andless_expression$subexpression$1"],postprocess:PE},{name:"asteriskless_andless_expression$subexpression$1",symbols:["atomic_expression"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["between_predicate"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["case_expression"]},{name:"asteriskless_andless_expression",symbols:["asteriskless_andless_expression$subexpression$1"],postprocess:PE},{name:"atomic_expression$subexpression$1",symbols:["array_subscript"]},{name:"atomic_expression$subexpression$1",symbols:["function_call"]},{name:"atomic_expression$subexpression$1",symbols:["property_access"]},{name:"atomic_expression$subexpression$1",symbols:["parenthesis"]},{name:"atomic_expression$subexpression$1",symbols:["curly_braces"]},{name:"atomic_expression$subexpression$1",symbols:["square_brackets"]},{name:"atomic_expression$subexpression$1",symbols:["operator"]},{name:"atomic_expression$subexpression$1",symbols:["identifier"]},{name:"atomic_expression$subexpression$1",symbols:["parameter"]},{name:"atomic_expression$subexpression$1",symbols:["literal"]},{name:"atomic_expression$subexpression$1",symbols:["data_type"]},{name:"atomic_expression$subexpression$1",symbols:["keyword"]},{name:"atomic_expression",symbols:["atomic_expression$subexpression$1"],postprocess:PE},{name:"array_subscript",symbols:[p.has("ARRAY_IDENTIFIER")?{type:"ARRAY_IDENTIFIER"}:ARRAY_IDENTIFIER,"_","square_brackets"],postprocess:([T,E,e])=>({type:"array_subscript",array:j({type:"identifier",quoted:!1,text:T.text},{trailing:E}),parenthesis:e})},{name:"array_subscript",symbols:[p.has("ARRAY_KEYWORD")?{type:"ARRAY_KEYWORD"}:ARRAY_KEYWORD,"_","square_brackets"],postprocess:([T,E,e])=>({type:"array_subscript",array:j(Z(T),{trailing:E}),parenthesis:e})},{name:"function_call",symbols:[p.has("RESERVED_FUNCTION_NAME")?{type:"RESERVED_FUNCTION_NAME"}:RESERVED_FUNCTION_NAME,"_","parenthesis"],postprocess:([T,E,e])=>({type:"function_call",nameKw:j(Z(T),{trailing:E}),parenthesis:e})},{name:"parenthesis",symbols:[{literal:"("},"expressions_or_clauses",{literal:")"}],postprocess:([T,E,e])=>({type:"parenthesis",children:E,openParen:"(",closeParen:")"})},{name:"curly_braces$ebnf$1",symbols:[]},{name:"curly_braces$ebnf$1",symbols:["curly_braces$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"curly_braces",symbols:[{literal:"{"},"curly_braces$ebnf$1",{literal:"}"}],postprocess:([T,E,e])=>({type:"parenthesis",children:E,openParen:"{",closeParen:"}"})},{name:"square_brackets$ebnf$1",symbols:[]},{name:"square_brackets$ebnf$1",symbols:["square_brackets$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"square_brackets",symbols:[{literal:"["},"square_brackets$ebnf$1",{literal:"]"}],postprocess:([T,E,e])=>({type:"parenthesis",children:E,openParen:"[",closeParen:"]"})},{name:"property_access$subexpression$1",symbols:["identifier"]},{name:"property_access$subexpression$1",symbols:["array_subscript"]},{name:"property_access$subexpression$1",symbols:["all_columns_asterisk"]},{name:"property_access$subexpression$1",symbols:["parameter"]},{name:"property_access",symbols:["atomic_expression","_",p.has("PROPERTY_ACCESS_OPERATOR")?{type:"PROPERTY_ACCESS_OPERATOR"}:PROPERTY_ACCESS_OPERATOR,"_","property_access$subexpression$1"],postprocess:([T,E,e,R,[A]])=>({type:"property_access",object:j(T,{trailing:E}),operator:e.text,property:j(A,{leading:R})})},{name:"between_predicate",symbols:[p.has("BETWEEN")?{type:"BETWEEN"}:BETWEEN,"_","andless_expression_chain","_",p.has("AND")?{type:"AND"}:AND,"_","andless_expression"],postprocess:([T,E,e,R,A,S,O])=>({type:"between_predicate",betweenKw:Z(T),expr1:Rs(e,{leading:E,trailing:R}),andKw:Z(A),expr2:[j(O,{leading:S})]})},{name:"case_expression$ebnf$1",symbols:["expression_chain_"],postprocess:kT},{name:"case_expression$ebnf$1",symbols:[],postprocess:()=>null},{name:"case_expression$ebnf$2",symbols:[]},{name:"case_expression$ebnf$2",symbols:["case_expression$ebnf$2","case_clause"],postprocess:T=>T[0].concat([T[1]])},{name:"case_expression",symbols:[p.has("CASE")?{type:"CASE"}:CASE,"_","case_expression$ebnf$1","case_expression$ebnf$2",p.has("END")?{type:"END"}:END],postprocess:([T,E,e,R,A])=>({type:"case_expression",caseKw:j(Z(T),{trailing:E}),endKw:Z(A),expr:e||[],clauses:R})},{name:"case_clause",symbols:[p.has("WHEN")?{type:"WHEN"}:WHEN,"_","expression_chain_",p.has("THEN")?{type:"THEN"}:THEN,"_","expression_chain_"],postprocess:([T,E,e,R,A,S])=>({type:"case_when",whenKw:j(Z(T),{trailing:E}),thenKw:j(Z(R),{trailing:A}),condition:e,result:S})},{name:"case_clause",symbols:[p.has("ELSE")?{type:"ELSE"}:ELSE,"_","expression_chain_"],postprocess:([T,E,e])=>({type:"case_else",elseKw:j(Z(T),{trailing:E}),result:e})},{name:"comma$subexpression$1",symbols:[p.has("COMMA")?{type:"COMMA"}:COMMA]},{name:"comma",symbols:["comma$subexpression$1"],postprocess:([[T]])=>({type:"comma"})},{name:"asterisk$subexpression$1",symbols:[p.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK]},{name:"asterisk",symbols:["asterisk$subexpression$1"],postprocess:([[T]])=>({type:"operator",text:T.text})},{name:"operator$subexpression$1",symbols:[p.has("OPERATOR")?{type:"OPERATOR"}:OPERATOR]},{name:"operator",symbols:["operator$subexpression$1"],postprocess:([[T]])=>({type:"operator",text:T.text})},{name:"identifier$subexpression$1",symbols:[p.has("IDENTIFIER")?{type:"IDENTIFIER"}:IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[p.has("QUOTED_IDENTIFIER")?{type:"QUOTED_IDENTIFIER"}:QUOTED_IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[p.has("VARIABLE")?{type:"VARIABLE"}:VARIABLE]},{name:"identifier",symbols:["identifier$subexpression$1"],postprocess:([[T]])=>({type:"identifier",quoted:T.type!=="IDENTIFIER",text:T.text})},{name:"parameter$subexpression$1",symbols:[p.has("NAMED_PARAMETER")?{type:"NAMED_PARAMETER"}:NAMED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[p.has("QUOTED_PARAMETER")?{type:"QUOTED_PARAMETER"}:QUOTED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[p.has("NUMBERED_PARAMETER")?{type:"NUMBERED_PARAMETER"}:NUMBERED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[p.has("POSITIONAL_PARAMETER")?{type:"POSITIONAL_PARAMETER"}:POSITIONAL_PARAMETER]},{name:"parameter$subexpression$1",symbols:[p.has("CUSTOM_PARAMETER")?{type:"CUSTOM_PARAMETER"}:CUSTOM_PARAMETER]},{name:"parameter",symbols:["parameter$subexpression$1"],postprocess:([[T]])=>({type:"parameter",key:T.key,text:T.text})},{name:"literal$subexpression$1",symbols:[p.has("NUMBER")?{type:"NUMBER"}:NUMBER]},{name:"literal$subexpression$1",symbols:[p.has("STRING")?{type:"STRING"}:STRING]},{name:"literal",symbols:["literal$subexpression$1"],postprocess:([[T]])=>({type:"literal",text:T.text})},{name:"keyword$subexpression$1",symbols:[p.has("RESERVED_KEYWORD")?{type:"RESERVED_KEYWORD"}:RESERVED_KEYWORD]},{name:"keyword$subexpression$1",symbols:[p.has("RESERVED_PHRASE")?{type:"RESERVED_PHRASE"}:RESERVED_PHRASE]},{name:"keyword$subexpression$1",symbols:[p.has("RESERVED_JOIN")?{type:"RESERVED_JOIN"}:RESERVED_JOIN]},{name:"keyword",symbols:["keyword$subexpression$1"],postprocess:([[T]])=>Z(T)},{name:"data_type$subexpression$1",symbols:[p.has("RESERVED_DATA_TYPE")?{type:"RESERVED_DATA_TYPE"}:RESERVED_DATA_TYPE]},{name:"data_type",symbols:["data_type$subexpression$1"],postprocess:([[T]])=>CR(T)},{name:"data_type",symbols:[p.has("RESERVED_PARAMETERIZED_DATA_TYPE")?{type:"RESERVED_PARAMETERIZED_DATA_TYPE"}:RESERVED_PARAMETERIZED_DATA_TYPE,"_","parenthesis"],postprocess:([T,E,e])=>({type:"parameterized_data_type",dataType:j(CR(T),{trailing:E}),parenthesis:e})},{name:"logic_operator$subexpression$1",symbols:[p.has("AND")?{type:"AND"}:AND]},{name:"logic_operator$subexpression$1",symbols:[p.has("OR")?{type:"OR"}:OR]},{name:"logic_operator$subexpression$1",symbols:[p.has("XOR")?{type:"XOR"}:XOR]},{name:"logic_operator",symbols:["logic_operator$subexpression$1"],postprocess:([[T]])=>Z(T)},{name:"other_keyword$subexpression$1",symbols:[p.has("WHEN")?{type:"WHEN"}:WHEN]},{name:"other_keyword$subexpression$1",symbols:[p.has("THEN")?{type:"THEN"}:THEN]},{name:"other_keyword$subexpression$1",symbols:[p.has("ELSE")?{type:"ELSE"}:ELSE]},{name:"other_keyword$subexpression$1",symbols:[p.has("END")?{type:"END"}:END]},{name:"other_keyword",symbols:["other_keyword$subexpression$1"],postprocess:([[T]])=>Z(T)},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1","comment"],postprocess:T=>T[0].concat([T[1]])},{name:"_",symbols:["_$ebnf$1"],postprocess:([T])=>T},{name:"comment",symbols:[p.has("LINE_COMMENT")?{type:"LINE_COMMENT"}:LINE_COMMENT],postprocess:([T])=>({type:"line_comment",text:T.text,precedingWhitespace:T.precedingWhitespace})},{name:"comment",symbols:[p.has("BLOCK_COMMENT")?{type:"BLOCK_COMMENT"}:BLOCK_COMMENT],postprocess:([T])=>({type:"block_comment",text:T.text,precedingWhitespace:T.precedingWhitespace})},{name:"comment",symbols:[p.has("DISABLE_COMMENT")?{type:"DISABLE_COMMENT"}:DISABLE_COMMENT],postprocess:([T])=>({type:"disable_comment",text:T.text,precedingWhitespace:T.precedingWhitespace})}],ParserStart:"main"},Ss=As,{Parser:Os,Grammar:Is}=rO;function ts(T){let E={};const e=new rA(A=>[...QN(T.tokenize(A,E)),eA(A.length)]),R=new Os(Is.fromCompiled(Ss),{lexer:e});return{parse:(A,S)=>{E=S;const{results:O}=R.feed(A);if(O.length===1)return O[0];throw O.length===0?new Error("Parse error: Invalid SQL"):new Error(`Parse error: Ambiguous grammar
${JSON.stringify(O,void 0,2)}`)}}}var _A=class{constructor(T){this.indentation=T,this.items=[]}add(...T){for(const E of T)switch(E){case 0:this.items.push(0);break;case 1:this.trimHorizontalWhitespace();break;case 2:this.trimWhitespace();break;case 3:this.trimHorizontalWhitespace(),this.addNewline(3);break;case 4:this.trimHorizontalWhitespace(),this.addNewline(4);break;case 5:this.addIndentation();break;case 6:this.items.push(6);break;default:this.items.push(E)}}trimHorizontalWhitespace(){for(;Ns(wE(this.items));)this.items.pop()}trimWhitespace(){for(;ss(wE(this.items));)this.items.pop()}addNewline(T){if(this.items.length>0)switch(wE(this.items)){case 3:this.items.pop(),this.items.push(T);break;case 4:break;default:this.items.push(T);break}}addIndentation(){for(let T=0;T<this.indentation.getLevel();T++)this.items.push(6)}toString(){return this.items.map(T=>this.itemToString(T)).join("")}getLayoutItems(){return this.items}itemToString(T){switch(T){case 0:return" ";case 3:case 4:return`
`;case 6:return this.indentation.getSingleIndent();default:return T}}},Ns=T=>T===0||T===6,ss=T=>T===0||T===6||T===3;function aR(T,E){if(E==="standard")return T;let e=[];return T.length>=10&&T.includes(" ")&&([T,...e]=T.split(" ")),E==="tabularLeft"?T=T.padEnd(9," "):T=T.padStart(9," "),T+["",...e].join(" ")}function LR(T){return uO(T)||T==="RESERVED_CLAUSE"||T==="RESERVED_SELECT"||T==="RESERVED_SET_OPERATION"||T==="RESERVED_JOIN"||T==="LIMIT"}var QT="top-level",rs="block-level",CA=class{constructor(T){this.indent=T,this.indentTypes=[]}getSingleIndent(){return this.indent}getLevel(){return this.indentTypes.length}increaseTopLevel(){this.indentTypes.push(QT)}increaseBlockLevel(){this.indentTypes.push(rs)}decreaseTopLevel(){this.indentTypes.length>0&&wE(this.indentTypes)===QT&&this.indentTypes.pop()}decreaseBlockLevel(){for(;this.indentTypes.length>0&&this.indentTypes.pop()===QT;);}},_s=class extends _A{constructor(T){super(new CA("")),this.expressionWidth=T,this.length=0,this.trailingSpace=!1}add(...T){if(T.forEach(E=>this.addToLength(E)),this.length>this.expressionWidth)throw new Se;super.add(...T)}addToLength(T){if(typeof T=="string")this.length+=T.length,this.trailingSpace=!1;else{if(T===4||T===3)throw new Se;T===5||T===6||T===0?this.trailingSpace||(this.length++,this.trailingSpace=!0):(T===2||T===1)&&this.trailingSpace&&(this.trailingSpace=!1,this.length--)}}},Se=class extends Error{},Cs=class Oe{constructor({cfg:E,dialectCfg:e,params:R,layout:A,inline:S=!1}){this.inline=!1,this.nodes=[],this.index=-1,this.cfg=E,this.dialectCfg=e,this.inline=S,this.params=R,this.layout=A}format(E){for(this.nodes=E,this.index=0;this.index<this.nodes.length;this.index++)this.formatNode(this.nodes[this.index]);return this.layout}formatNode(E){this.formatComments(E.leadingComments),this.formatNodeWithoutComments(E),this.formatComments(E.trailingComments)}formatNodeWithoutComments(E){switch(E.type){case"function_call":return this.formatFunctionCall(E);case"parameterized_data_type":return this.formatParameterizedDataType(E);case"array_subscript":return this.formatArraySubscript(E);case"property_access":return this.formatPropertyAccess(E);case"parenthesis":return this.formatParenthesis(E);case"between_predicate":return this.formatBetweenPredicate(E);case"case_expression":return this.formatCaseExpression(E);case"case_when":return this.formatCaseWhen(E);case"case_else":return this.formatCaseElse(E);case"clause":return this.formatClause(E);case"set_operation":return this.formatSetOperation(E);case"limit_clause":return this.formatLimitClause(E);case"all_columns_asterisk":return this.formatAllColumnsAsterisk(E);case"literal":return this.formatLiteral(E);case"identifier":return this.formatIdentifier(E);case"parameter":return this.formatParameter(E);case"operator":return this.formatOperator(E);case"comma":return this.formatComma(E);case"line_comment":return this.formatLineComment(E);case"block_comment":return this.formatBlockComment(E);case"disable_comment":return this.formatBlockComment(E);case"data_type":return this.formatDataType(E);case"keyword":return this.formatKeywordNode(E)}}formatFunctionCall(E){this.withComments(E.nameKw,()=>{this.layout.add(this.showFunctionKw(E.nameKw))}),this.formatNode(E.parenthesis)}formatParameterizedDataType(E){this.withComments(E.dataType,()=>{this.layout.add(this.showDataType(E.dataType))}),this.formatNode(E.parenthesis)}formatArraySubscript(E){let e;switch(E.array.type){case"data_type":e=this.showDataType(E.array);break;case"keyword":e=this.showKw(E.array);break;default:e=this.showIdentifier(E.array);break}this.withComments(E.array,()=>{this.layout.add(e)}),this.formatNode(E.parenthesis)}formatPropertyAccess(E){this.formatNode(E.object),this.layout.add(1,E.operator),this.formatNode(E.property)}formatParenthesis(E){const e=this.formatInlineExpression(E.children);e?(this.layout.add(E.openParen),this.layout.add(...e.getLayoutItems()),this.layout.add(1,E.closeParen,0)):(this.layout.add(E.openParen,3),mE(this.cfg)?(this.layout.add(5),this.layout=this.formatSubExpression(E.children)):(this.layout.indentation.increaseBlockLevel(),this.layout.add(5),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseBlockLevel()),this.layout.add(3,5,E.closeParen,0))}formatBetweenPredicate(E){this.layout.add(this.showKw(E.betweenKw),0),this.layout=this.formatSubExpression(E.expr1),this.layout.add(1,0,this.showNonTabularKw(E.andKw),0),this.layout=this.formatSubExpression(E.expr2),this.layout.add(0)}formatCaseExpression(E){this.formatNode(E.caseKw),this.layout.indentation.increaseBlockLevel(),this.layout=this.formatSubExpression(E.expr),this.layout=this.formatSubExpression(E.clauses),this.layout.indentation.decreaseBlockLevel(),this.layout.add(3,5),this.formatNode(E.endKw)}formatCaseWhen(E){this.layout.add(3,5),this.formatNode(E.whenKw),this.layout=this.formatSubExpression(E.condition),this.formatNode(E.thenKw),this.layout=this.formatSubExpression(E.result)}formatCaseElse(E){this.layout.add(3,5),this.formatNode(E.elseKw),this.layout=this.formatSubExpression(E.result)}formatClause(E){this.isOnelineClause(E)?this.formatClauseInOnelineStyle(E):mE(this.cfg)?this.formatClauseInTabularStyle(E):this.formatClauseInIndentedStyle(E)}isOnelineClause(E){return mE(this.cfg)?this.dialectCfg.tabularOnelineClauses[E.nameKw.text]:this.dialectCfg.onelineClauses[E.nameKw.text]}formatClauseInIndentedStyle(E){this.layout.add(3,5,this.showKw(E.nameKw),3),this.layout.indentation.increaseTopLevel(),this.layout.add(5),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseTopLevel()}formatClauseInOnelineStyle(E){this.layout.add(3,5,this.showKw(E.nameKw),0),this.layout=this.formatSubExpression(E.children)}formatClauseInTabularStyle(E){this.layout.add(3,5,this.showKw(E.nameKw),0),this.layout.indentation.increaseTopLevel(),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseTopLevel()}formatSetOperation(E){this.layout.add(3,5,this.showKw(E.nameKw),3),this.layout.add(5),this.layout=this.formatSubExpression(E.children)}formatLimitClause(E){this.withComments(E.limitKw,()=>{this.layout.add(3,5,this.showKw(E.limitKw))}),this.layout.indentation.increaseTopLevel(),mE(this.cfg)?this.layout.add(0):this.layout.add(3,5),E.offset?(this.layout=this.formatSubExpression(E.offset),this.layout.add(1,",",0),this.layout=this.formatSubExpression(E.count)):this.layout=this.formatSubExpression(E.count),this.layout.indentation.decreaseTopLevel()}formatAllColumnsAsterisk(E){this.layout.add("*",0)}formatLiteral(E){this.layout.add(E.text,0)}formatIdentifier(E){this.layout.add(this.showIdentifier(E),0)}formatParameter(E){this.layout.add(this.params.get(E),0)}formatOperator({text:E}){this.cfg.denseOperators||this.dialectCfg.alwaysDenseOperators.includes(E)?this.layout.add(1,E):E===":"?this.layout.add(1,E,0):this.layout.add(E,0)}formatComma(E){this.inline?this.layout.add(1,",",0):this.layout.add(1,",",3,5)}withComments(E,e){this.formatComments(E.leadingComments),e(),this.formatComments(E.trailingComments)}formatComments(E){E&&E.forEach(e=>{e.type==="line_comment"?this.formatLineComment(e):this.formatBlockComment(e)})}formatLineComment(E){JT(E.precedingWhitespace||"")?this.layout.add(3,5,E.text,4,5):this.layout.getLayoutItems().length>0?this.layout.add(2,0,E.text,4,5):this.layout.add(E.text,4,5)}formatBlockComment(E){E.type==="block_comment"&&this.isMultilineBlockComment(E)?(this.splitBlockComment(E.text).forEach(e=>{this.layout.add(3,5,e)}),this.layout.add(3,5)):this.layout.add(E.text,0)}isMultilineBlockComment(E){return JT(E.text)||JT(E.precedingWhitespace||"")}isDocComment(E){const e=E.split(/\n/);return/^\/\*\*?$/.test(e[0])&&e.slice(1,e.length-1).every(R=>/^\s*\*/.test(R))&&/^\s*\*\/$/.test(wE(e))}splitBlockComment(E){return this.isDocComment(E)?E.split(/\n/).map(e=>/^\s*\*/.test(e)?" "+e.replace(/^\s*/,""):e):E.split(/\n/).map(e=>e.replace(/^\s*/,""))}formatSubExpression(E){return new Oe({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:this.layout,inline:this.inline}).format(E)}formatInlineExpression(E){const e=this.params.getPositionalParameterIndex();try{return new Oe({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:new _s(this.cfg.expressionWidth),inline:!0}).format(E)}catch(R){if(R instanceof Se){this.params.setPositionalParameterIndex(e);return}else throw R}}formatKeywordNode(E){switch(E.tokenType){case"RESERVED_JOIN":return this.formatJoin(E);case"AND":case"OR":case"XOR":return this.formatLogicalOperator(E);default:return this.formatKeyword(E)}}formatJoin(E){mE(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(3,5,this.showKw(E),0),this.layout.indentation.increaseTopLevel()):this.layout.add(3,5,this.showKw(E),0)}formatKeyword(E){this.layout.add(this.showKw(E),0)}formatLogicalOperator(E){this.cfg.logicalOperatorNewline==="before"?mE(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(3,5,this.showKw(E),0),this.layout.indentation.increaseTopLevel()):this.layout.add(3,5,this.showKw(E),0):this.layout.add(this.showKw(E),3,5)}formatDataType(E){this.layout.add(this.showDataType(E),0)}showKw(E){return LR(E.tokenType)?aR(this.showNonTabularKw(E),this.cfg.indentStyle):this.showNonTabularKw(E)}showNonTabularKw(E){switch(this.cfg.keywordCase){case"preserve":return OT(E.raw);case"upper":return E.text;case"lower":return E.text.toLowerCase()}}showFunctionKw(E){return LR(E.tokenType)?aR(this.showNonTabularFunctionKw(E),this.cfg.indentStyle):this.showNonTabularFunctionKw(E)}showNonTabularFunctionKw(E){switch(this.cfg.functionCase){case"preserve":return OT(E.raw);case"upper":return E.text;case"lower":return E.text.toLowerCase()}}showIdentifier(E){if(E.quoted)return E.text;switch(this.cfg.identifierCase){case"preserve":return E.text;case"upper":return E.text.toUpperCase();case"lower":return E.text.toLowerCase()}}showDataType(E){switch(this.cfg.dataTypeCase){case"preserve":return OT(E.raw);case"upper":return E.text;case"lower":return E.text.toLowerCase()}}},as=class{constructor(T,E){this.dialect=T,this.cfg=E,this.params=new kN(this.cfg.params)}format(T){const E=this.parse(T);return this.formatAst(E).trimEnd()}parse(T){return ts(this.dialect.tokenizer).parse(T,this.cfg.paramTypes||{})}formatAst(T){return T.map(E=>this.formatStatement(E)).join(`
`.repeat(this.cfg.linesBetweenQueries+1))}formatStatement(T){const E=new Cs({cfg:this.cfg,dialectCfg:this.dialect.formatOptions,params:this.params,layout:new _A(new CA($N(this.cfg)))}).format(T.children);return T.hasSemicolon&&(this.cfg.newlineBeforeSemicolon?E.add(3,";"):E.add(2,";")),E.toString()}},IT=class extends Error{};function Ls(T){const E=["multilineLists","newlineBeforeOpenParen","newlineBeforeCloseParen","aliasAs","commaPosition","tabulateAlias"];for(const e of E)if(e in T)throw new IT(`${e} config is no more supported.`);if(T.expressionWidth<=0)throw new IT(`expressionWidth config must be positive number. Received ${T.expressionWidth} instead.`);if(T.params&&!is(T.params)&&console.warn('WARNING: All "params" option values should be strings.'),T.paramTypes&&!ns(T.paramTypes))throw new IT("Empty regex given in custom paramTypes. That would result in matching infinite amount of parameters.");return T}function is(T){return(T instanceof Array?T:Object.values(T)).every(e=>typeof e=="string")}function ns(T){return T.custom&&Array.isArray(T.custom)?T.custom.every(E=>E.regex!==""):!0}var aA={bigquery:"bigquery",db2:"db2",db2i:"db2i",hive:"hive",mariadb:"mariadb",mysql:"mysql",n1ql:"n1ql",plsql:"plsql",postgresql:"postgresql",redshift:"redshift",spark:"spark",sqlite:"sqlite",sql:"sql",tidb:"tidb",trino:"trino",transactsql:"transactsql",tsql:"transactsql",singlestoredb:"singlestoredb",snowflake:"snowflake"},os=Object.keys(aA),Ds={tabWidth:2,useTabs:!1,keywordCase:"preserve",identifierCase:"preserve",dataTypeCase:"preserve",functionCase:"preserve",indentStyle:"standard",logicalOperatorNewline:"before",expressionWidth:50,linesBetweenQueries:1,denseOperators:!1,newlineBeforeSemicolon:!1},Ps=(T,E={})=>{if(typeof E.language=="string"&&!os.includes(E.language))throw new IT(`Unsupported SQL dialect: ${E.language}`);const e=aA[E.language||"sql"];return ls(T,eE(z({},E),{dialect:EA[e]}))},ls=(T,E)=>{var e=E,{dialect:R}=e,A=aO(e,["dialect"]);if(typeof T!="string")throw new Error("Invalid query argument. Expected string, instead got "+typeof T);const S=Ls(z(z({},Ds),A));return new as(xN(R),S).format(T)};/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/var Ms={comments:{lineComment:"--",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}]},XE={defaultToken:"",tokenPostfix:".sql",ignoreCase:!0,brackets:[{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"}],keywords:["ABORT","ABSOLUTE","ACTION","ADA","ADD","AFTER","ALL","ALLOCATE","ALTER","ALWAYS","ANALYZE","AND","ANY","ARE","AS","ASC","ASSERTION","AT","ATTACH","AUTHORIZATION","AUTOINCREMENT","AVG","BACKUP","BEFORE","BEGIN","BETWEEN","BIT","BIT_LENGTH","BOTH","BREAK","BROWSE","BULK","BY","CASCADE","CASCADED","CASE","CAST","CATALOG","CHAR","CHARACTER","CHARACTER_LENGTH","CHAR_LENGTH","CHECK","CHECKPOINT","CLOSE","CLUSTERED","COALESCE","COLLATE","COLLATION","COLUMN","COMMIT","COMPUTE","CONFLICT","CONNECT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTAINS","CONTAINSTABLE","CONTINUE","CONVERT","CORRESPONDING","COUNT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATE","DAY","DBCC","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DENY","DESC","DESCRIBE","DESCRIPTOR","DETACH","DIAGNOSTICS","DISCONNECT","DISK","DISTINCT","DISTRIBUTED","DO","DOMAIN","DOUBLE","DROP","DUMP","EACH","ELSE","END","END-EXEC","ERRLVL","ESCAPE","EXCEPT","EXCEPTION","EXCLUDE","EXCLUSIVE","EXEC","EXECUTE","EXISTS","EXIT","EXPLAIN","EXTERNAL","EXTRACT","FAIL","FALSE","FETCH","FILE","FILLFACTOR","FILTER","FIRST","FLOAT","FOLLOWING","FOR","FOREIGN","FORTRAN","FOUND","FREETEXT","FREETEXTTABLE","FROM","FULL","FUNCTION","GENERATED","GET","GLOB","GLOBAL","GO","GOTO","GRANT","GROUP","GROUPS","HAVING","HOLDLOCK","HOUR","IDENTITY","IDENTITYCOL","IDENTITY_INSERT","IF","IGNORE","IMMEDIATE","IN","INCLUDE","INDEX","INDEXED","INDICATOR","INITIALLY","INNER","INPUT","INSENSITIVE","INSERT","INSTEAD","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","ISNULL","ISOLATION","JOIN","KEY","KILL","LANGUAGE","LAST","LEADING","LEFT","LEVEL","LIKE","LIMIT","LINENO","LOAD","LOCAL","LOWER","MATCH","MATERIALIZED","MAX","MERGE","MIN","MINUTE","MODULE","MONTH","NAMES","NATIONAL","NATURAL","NCHAR","NEXT","NO","NOCHECK","NONCLUSTERED","NONE","NOT","NOTHING","NOTNULL","NULL","NULLIF","NULLS","NUMERIC","OCTET_LENGTH","OF","OFF","OFFSET","OFFSETS","ON","ONLY","OPEN","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","OPTION","OR","ORDER","OTHERS","OUTER","OUTPUT","OVER","OVERLAPS","PAD","PARTIAL","PARTITION","PASCAL","PERCENT","PIVOT","PLAN","POSITION","PRAGMA","PRECEDING","PRECISION","PREPARE","PRESERVE","PRIMARY","PRINT","PRIOR","PRIVILEGES","PROC","PROCEDURE","PUBLIC","QUERY","RAISE","RAISERROR","RANGE","READ","READTEXT","REAL","RECONFIGURE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELATIVE","RELEASE","RENAME","REPLACE","REPLICATION","RESTORE","RESTRICT","RETURN","RETURNING","REVERT","REVOKE","RIGHT","ROLLBACK","ROW","ROWCOUNT","ROWGUIDCOL","ROWS","RULE","SAVE","SAVEPOINT","SCHEMA","SCROLL","SECOND","SECTION","SECURITYAUDIT","SELECT","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","SESSION","SESSION_USER","SET","SETUSER","SHUTDOWN","SIZE","SMALLINT","SOME","SPACE","SQL","SQLCA","SQLCODE","SQLERROR","SQLSTATE","SQLWARNING","STATISTICS","SUBSTRING","SUM","SYSTEM_USER","TABLE","TABLESAMPLE","TEMP","TEMPORARY","TEXTSIZE","THEN","TIES","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TOP","TRAILING","TRAN","TRANSACTION","TRANSLATE","TRANSLATION","TRIGGER","TRIM","TRUE","TRUNCATE","TRY_CONVERT","TSEQUAL","UNBOUNDED","UNION","UNIQUE","UNKNOWN","UNPIVOT","UPDATE","UPDATETEXT","UPPER","USAGE","USE","USER","USING","VACUUM","VALUE","VALUES","VARCHAR","VARYING","VIEW","VIRTUAL","WAITFOR","WHEN","WHENEVER","WHERE","WHILE","WINDOW","WITH","WITHIN GROUP","WITHOUT","WORK","WRITE","WRITETEXT","YEAR","ZONE"],operators:["ALL","AND","ANY","BETWEEN","EXISTS","IN","LIKE","NOT","OR","SOME","EXCEPT","INTERSECT","UNION","APPLY","CROSS","FULL","INNER","JOIN","LEFT","OUTER","RIGHT","CONTAINS","FREETEXT","IS","NULL","PIVOT","UNPIVOT","MATCHED"],builtinFunctions:["AVG","CHECKSUM_AGG","COUNT","COUNT_BIG","GROUPING","GROUPING_ID","MAX","MIN","SUM","STDEV","STDEVP","VAR","VARP","CUME_DIST","FIRST_VALUE","LAG","LAST_VALUE","LEAD","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","COLLATE","COLLATIONPROPERTY","TERTIARY_WEIGHTS","FEDERATION_FILTERING_VALUE","CAST","CONVERT","PARSE","TRY_CAST","TRY_CONVERT","TRY_PARSE","ASYMKEY_ID","ASYMKEYPROPERTY","CERTPROPERTY","CERT_ID","CRYPT_GEN_RANDOM","DECRYPTBYASYMKEY","DECRYPTBYCERT","DECRYPTBYKEY","DECRYPTBYKEYAUTOASYMKEY","DECRYPTBYKEYAUTOCERT","DECRYPTBYPASSPHRASE","ENCRYPTBYASYMKEY","ENCRYPTBYCERT","ENCRYPTBYKEY","ENCRYPTBYPASSPHRASE","HASHBYTES","IS_OBJECTSIGNED","KEY_GUID","KEY_ID","KEY_NAME","SIGNBYASYMKEY","SIGNBYCERT","SYMKEYPROPERTY","VERIFYSIGNEDBYCERT","VERIFYSIGNEDBYASYMKEY","CURSOR_STATUS","DATALENGTH","IDENT_CURRENT","IDENT_INCR","IDENT_SEED","IDENTITY","SQL_VARIANT_PROPERTY","CURRENT_TIMESTAMP","DATEADD","DATEDIFF","DATEFROMPARTS","DATENAME","DATEPART","DATETIME2FROMPARTS","DATETIMEFROMPARTS","DATETIMEOFFSETFROMPARTS","DAY","EOMONTH","GETDATE","GETUTCDATE","ISDATE","MONTH","SMALLDATETIMEFROMPARTS","SWITCHOFFSET","SYSDATETIME","SYSDATETIMEOFFSET","SYSUTCDATETIME","TIMEFROMPARTS","TODATETIMEOFFSET","YEAR","CHOOSE","COALESCE","IIF","NULLIF","ABS","ACOS","ASIN","ATAN","ATN2","CEILING","COS","COT","DEGREES","EXP","FLOOR","LOG","LOG10","PI","POWER","RADIANS","RAND","ROUND","SIGN","SIN","SQRT","SQUARE","TAN","APP_NAME","APPLOCK_MODE","APPLOCK_TEST","ASSEMBLYPROPERTY","COL_LENGTH","COL_NAME","COLUMNPROPERTY","DATABASE_PRINCIPAL_ID","DATABASEPROPERTYEX","DB_ID","DB_NAME","FILE_ID","FILE_IDEX","FILE_NAME","FILEGROUP_ID","FILEGROUP_NAME","FILEGROUPPROPERTY","FILEPROPERTY","FULLTEXTCATALOGPROPERTY","FULLTEXTSERVICEPROPERTY","INDEX_COL","INDEXKEY_PROPERTY","INDEXPROPERTY","OBJECT_DEFINITION","OBJECT_ID","OBJECT_NAME","OBJECT_SCHEMA_NAME","OBJECTPROPERTY","OBJECTPROPERTYEX","ORIGINAL_DB_NAME","PARSENAME","SCHEMA_ID","SCHEMA_NAME","SCOPE_IDENTITY","SERVERPROPERTY","STATS_DATE","TYPE_ID","TYPE_NAME","TYPEPROPERTY","DENSE_RANK","NTILE","RANK","ROW_NUMBER","PUBLISHINGSERVERNAME","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","CERTENCODED","CERTPRIVATEKEY","CURRENT_USER","HAS_DBACCESS","HAS_PERMS_BY_NAME","IS_MEMBER","IS_ROLEMEMBER","IS_SRVROLEMEMBER","LOGINPROPERTY","ORIGINAL_LOGIN","PERMISSIONS","PWDENCRYPT","PWDCOMPARE","SESSION_USER","SESSIONPROPERTY","SUSER_ID","SUSER_NAME","SUSER_SID","SUSER_SNAME","SYSTEM_USER","USER","USER_ID","USER_NAME","ASCII","CHAR","CHARINDEX","CONCAT","DIFFERENCE","FORMAT","LEFT","LEN","LOWER","LTRIM","NCHAR","PATINDEX","QUOTENAME","REPLACE","REPLICATE","REVERSE","RIGHT","RTRIM","SOUNDEX","SPACE","STR","STUFF","SUBSTRING","UNICODE","UPPER","BINARY_CHECKSUM","CHECKSUM","CONNECTIONPROPERTY","CONTEXT_INFO","CURRENT_REQUEST_ID","ERROR_LINE","ERROR_NUMBER","ERROR_MESSAGE","ERROR_PROCEDURE","ERROR_SEVERITY","ERROR_STATE","FORMATMESSAGE","GETANSINULL","GET_FILESTREAM_TRANSACTION_CONTEXT","HOST_ID","HOST_NAME","ISNULL","ISNUMERIC","MIN_ACTIVE_ROWVERSION","NEWID","NEWSEQUENTIALID","ROWCOUNT_BIG","XACT_STATE","TEXTPTR","TEXTVALID","COLUMNS_UPDATED","EVENTDATA","TRIGGER_NESTLEVEL","UPDATE","CHANGETABLE","CHANGE_TRACKING_CONTEXT","CHANGE_TRACKING_CURRENT_VERSION","CHANGE_TRACKING_IS_COLUMN_IN_MASK","CHANGE_TRACKING_MIN_VALID_VERSION","CONTAINSTABLE","FREETEXTTABLE","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","FILETABLEROOTPATH","GETFILENAMESPACEPATH","GETPATHLOCATOR","PATHNAME","GET_TRANSMISSION_STATUS"],builtinVariables:["@@DATEFIRST","@@DBTS","@@LANGID","@@LANGUAGE","@@LOCK_TIMEOUT","@@MAX_CONNECTIONS","@@MAX_PRECISION","@@NESTLEVEL","@@OPTIONS","@@REMSERVER","@@SERVERNAME","@@SERVICENAME","@@SPID","@@TEXTSIZE","@@VERSION","@@CURSOR_ROWS","@@FETCH_STATUS","@@DATEFIRST","@@PROCID","@@ERROR","@@IDENTITY","@@ROWCOUNT","@@TRANCOUNT","@@CONNECTIONS","@@CPU_BUSY","@@IDLE","@@IO_BUSY","@@PACKET_ERRORS","@@PACK_RECEIVED","@@PACK_SENT","@@TIMETICKS","@@TOTAL_ERRORS","@@TOTAL_READ","@@TOTAL_WRITE"],pseudoColumns:["$ACTION","$IDENTITY","$ROWGUID","$PARTITION"],tokenizer:{root:[{include:"@comments"},{include:"@whitespace"},{include:"@pseudoColumns"},{include:"@numbers"},{include:"@strings"},{include:"@complexIdentifiers"},{include:"@scopes"},[/[;,.]/,"delimiter"],[/[()]/,"@brackets"],[/[\w@#$]+/,{cases:{"@operators":"operator","@builtinVariables":"predefined","@builtinFunctions":"predefined","@keywords":"keyword","@default":"identifier"}}],[/[<>=!%&+\-*/|~^]/,"operator"]],whitespace:[[/\s+/,"white"]],comments:[[/--+.*/,"comment"],[/\/\*/,{token:"comment.quote",next:"@comment"}]],comment:[[/[^*/]+/,"comment"],[/\*\//,{token:"comment.quote",next:"@pop"}],[/./,"comment"]],pseudoColumns:[[/[$][A-Za-z_][\w@#$]*/,{cases:{"@pseudoColumns":"predefined","@default":"identifier"}}]],numbers:[[/0[xX][0-9a-fA-F]*/,"number"],[/[$][+-]*\d*(\.\d*)?/,"number"],[/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/,"number"]],strings:[[/N'/,{token:"string",next:"@string"}],[/'/,{token:"string",next:"@string"}]],string:[[/[^']+/,"string"],[/''/,"string"],[/'/,{token:"string",next:"@pop"}]],complexIdentifiers:[[/\[/,{token:"identifier.quote",next:"@bracketedIdentifier"}],[/"/,{token:"identifier.quote",next:"@quotedIdentifier"}]],bracketedIdentifier:[[/[^\]]+/,"identifier"],[/]]/,"identifier"],[/]/,{token:"identifier.quote",next:"@pop"}]],quotedIdentifier:[[/[^"]+/,"identifier"],[/""/,"identifier"],[/"/,{token:"identifier.quote",next:"@pop"}]],scopes:[[/BEGIN\s+(DISTRIBUTED\s+)?TRAN(SACTION)?\b/i,"keyword"],[/BEGIN\s+TRY\b/i,{token:"keyword.try"}],[/END\s+TRY\b/i,{token:"keyword.try"}],[/BEGIN\s+CATCH\b/i,{token:"keyword.catch"}],[/END\s+CATCH\b/i,{token:"keyword.catch"}],[/(BEGIN|CASE)\b/i,{token:"keyword.block"}],[/END\b/i,{token:"keyword.block"}],[/WHEN\b/i,{token:"keyword.choice"}],[/THEN\b/i,{token:"keyword.choice"}]]}};const Us=Object.freeze(Object.defineProperty({__proto__:null,conf:Ms,language:XE},Symbol.toStringTag,{value:"Module"})),LA=T=>(UA("data-v-71916fe4"),T=T(),uA(),T),us={class:"tools-box"},cs={key:0},ds=LA(()=>TE("i",{class:"el-icon-edit"},null,-1)),Gs=LA(()=>TE("i",{class:"el-icon-delete"},null,-1)),ps=Ie({__name:"index",props:{read:{type:Boolean,default:()=>!1},title:{type:String,default:""},value:{type:String,default:()=>"{}"},pointOut:{type:Array,default:()=>[]},height:{type:String,default:()=>"400"},fontSize:{type:String,default:()=>"18"},language:{type:String,default:()=>"sql"}},emits:["update:value"],setup(T,{expose:E,emit:e}){const R=T,A=()=>{lS(i.getValue())};self.MonacoEnvironment={getWorker(u,C){return new PS}};const S=Y(null),O=e;kE(()=>{s(),_E.sdk.getEventBus().on("changeEvSettings",u=>{Ge.setTheme(u.theme=="dark"?"vs-dark":"vs")})});const N=Y();let i=null;const I=()=>{try{const u=i.getValue();i.setValue(Ps(u))}catch(u){console.log(u)}},t=YE(()=>_E.sdk.isDarkTheme()?"vs-dark":"vs"),s=()=>{i==null&&(GE.registerCompletionItemProvider("sql",{provideCompletionItems:function(u,C){let D=[];for(let U of R.pointOut)D.push({label:U.caption,kind:GE.CompletionItemKind.Keyword,insertText:U.value,sortText:`${U.score}`});return XE.keywords.forEach(U=>{D.push({label:U,kind:GE.CompletionItemKind.Keyword,insertText:U})}),XE.operators.forEach(U=>{D.push({label:U,kind:GE.CompletionItemKind.Operator,insertText:U})}),XE.builtinFunctions.forEach(U=>{D.push({label:U,kind:GE.CompletionItemKind.Function,insertText:U})}),XE.builtinVariables.forEach(U=>{D.push({label:U,kind:GE.CompletionItemKind.Variable,insertText:U})}),{suggestions:D}}}),N.value.innerHTML="",i=Ge.create(N.value,{value:S.value||R.value,language:R.language,theme:t.value,editorOptions:{selectOnLineNumbers:!0,roundedSelection:!1,readOnly:R.read,cursorStyle:"line",automaticLayout:!1,glyphMargin:!0,useTabStops:!1,fontSize:R.fontSize,autoIndent:!0}}),i.onDidChangeModelContent(function(u){S.value=i.getValue(),O("update:value",i.getValue())}),window.addEventListener("resize",()=>{i.layout()}))},r=Y("100%"),n=Y();return E({updateEditorWidth:()=>{N.value&&(r.value=`${n.value.clientWidth}px`)},SetText:u=>{const C=i.getPosition();i.setValue(u),C&&(i.setPosition(C),i.focus())}}),(u,C)=>(v(),AE("div",null,[TE("div",us,[TE("div",null,[T.title!=""?(v(),AE("span",cs,W(T.title),1)):SE("",!0)]),TE("div",{class:"tools-list"},[TE("span",{class:"aides",style:{"margin-right":"1rem"},onClick:I},[ds,b(" 美化")]),TE("span",{class:"aides",onClick:A},[Gs,b(" 复制")])])]),TE("div",{id:"container",ref_key:"container",ref:N,style:MA({"min-height":`${T.height}px`,width:r.value,"max-height":"400px"})},null,4)]))}});const Hs=aT(ps,[["__scopeId","data-v-71916fe4"]]),iA="/api/dslHistory/";function Bs(T){return _E.request({url:iA+"CleanAction",method:"post",data:T})}function ms(T){return _E.request({url:iA+"ListAction",method:"post",data:T})}const Ys=Ie({__name:"index",props:{modelValue:{}},emits:["update:modelValue"],setup(T,{emit:E}){const e=E,R=S=>{S[0]&&S[1]&&e("update:modelValue",S)},A=[{text:"今天",value:()=>{let S=[J().format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")];return R(S),S}},{text:"昨天",value:()=>{let S=[J().subtract(1,"day").format("YYYY-MM-DD 00:00:00"),J().subtract(1,"day").format("YYYY-MM-DD 23:59:59")];return R(S),S}},{text:"一周",value:()=>{let S=[J().subtract(7,"day").format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")];return R(S),S}},{text:"两周",value:()=>{let S=[J().subtract(14,"day").format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")];return R(S),S}},{text:"一月",value:()=>{let S=[J().subtract(30,"day").format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")];return R(S),S}},{text:"三个月",value:()=>{let S=[J().subtract(90,"day").format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")];return R(S),S}},{text:"半年",value:()=>{let S=[J().subtract(180,"day").format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")];return R(S),S}},{text:"一年",value:()=>{let S=[J().subtract(360,"day").format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")];return R(S),S}}];return(S,O)=>{const N=f("el-date-picker");return v(),k(N,{type:"datetimerange","range-separator":"To",clearable:!1,editable:!1,"model-value":S.modelValue,"popper-class":"vab-date-picker",shortcuts:A,onCalendarChange:R},null,8,["model-value"])}}});const Fs={name:"History",components:{IndexSelect:MS,Date:Ys},props:{dialogVisible:{type:Boolean,default:!1}},setup(T,{emit:E}){const e=Y({indexName:"",date:[J().format("YYYY-MM-DD 00:00:00"),J().format("YYYY-MM-DD 23:59:59")],page:1,limit:10}),R=Y([]),A=Y(0),S=Y(T.dialogVisible),O=Y(!1),N=async(a=1)=>{e.value.page=a,e.value.date=[J(e.value.date[0]).format("YYYY-MM-DD HH:mm:ss"),J(e.value.date[1]).format("YYYY-MM-DD HH:mm:ss")],O.value=!0;const{data:l,code:u,msg:C}=await ms(e.value);O.value=!1,u!==0?Q({type:"error",message:C}):(R.value=l.list,A.value=l.count)},i=a=>{e.value.limit=a,N(1)},I=a=>{e.value.date=a,N(1)},t=a=>{e.value.indexName=a,N(1)},s=a=>{E("getHistoryData",a),E("close",!1)},r=async()=>{const{code:a,msg:l}=await Bs(e.value);a!==0?Q({type:"error",message:l}):(Q({type:"success",message:l}),N(1))},n=()=>{E("close",!1)};return kE(()=>{N(1)}),cA(()=>T.dialogVisible,a=>{a&&N(1)}),{input:e,list:R,total:A,handleSizeChange:i,changeDate:I,changeIndex:t,getHistoryData:s,clean:r,close:n,searchHistory:N,dialogVisible:S,loading:O}}},hs={class:"search-container"},fs={class:"pagination-container"};function Vs(T,E,e,R,A,S){const O=f("index-select"),N=f("el-form-item"),i=f("date"),I=f("el-button"),t=f("el-form"),s=f("el-table-column"),r=f("el-popover"),n=f("el-table"),a=f("el-pagination"),l=f("el-drawer"),u=nR("loading");return v(),AE("div",null,[G(l,{size:"80%",modelValue:R.dialogVisible,"onUpdate:modelValue":E[2]||(E[2]=C=>R.dialogVisible=C),title:T.$t("历史记录"),onClose:R.close},{default:c(()=>[TE("div",hs,[G(t,{inline:!0},{default:c(()=>[G(N,{label:"索引名"},{default:c(()=>[G(O,{style:{width:"140px"},clearable:!0,placeholder:T.$t("请选择索引名"),onChange:R.changeIndex},null,8,["placeholder","onChange"])]),_:1}),G(N,{label:"时间"},{default:c(()=>[G(i,{modelValue:R.input.date,"onUpdate:modelValue":E[0]||(E[0]=C=>R.input.date=C)},null,8,["modelValue"])]),_:1}),G(N,null,{default:c(()=>[G(I,{type:"primary",onClick:E[1]||(E[1]=C=>R.searchHistory(1))},{default:c(()=>[b("查询")]),_:1})]),_:1})]),_:1})]),qT((v(),k(n,{data:R.list},{default:c(()=>[G(s,{align:"center",label:"Method",width:"220"},{default:c(({row:C})=>[b(W(C.method),1)]),_:1}),G(s,{align:"center",label:"Path",width:"300"},{default:c(({row:C})=>[b(W(C.path),1)]),_:1}),G(s,{align:"center",label:"Body",width:"300"},{default:c(({row:C})=>[G(r,{placement:"top-start",title:"body",width:"600",trigger:"hover"},{reference:c(()=>[b(W(C.body.substr(0,50)+"..."),1)]),default:c(()=>[TE("div",null,W(C.body),1)]),_:2},1024)]),_:1}),G(s,{align:"center",label:T.$t("创建时间"),width:"220"},{default:c(({row:C})=>[b(W(C.created),1)]),_:1},8,["label"]),G(s,{align:"center",label:T.$t("操作"),fixed:"right",width:"100"},{header:c(()=>[G(I,{type:"danger",onClick:R.clean},{default:c(()=>[b(W(T.$t("清空")),1)]),_:1},8,["onClick"])]),default:c(({row:C})=>[G(I,{type:"success",onClick:D=>R.getHistoryData(C)},{default:c(()=>[b(W(T.$t("搜索")),1)]),_:2},1032,["onClick"])]),_:1},8,["label"])]),_:1},8,["data"])),[[u,R.loading]]),TE("div",fs,[G(a,{"hide-on-single-page":"","current-page":R.input.page,"page-sizes":[10,20,30,50,100,150,200],"page-size":R.input.limit,layout:"total, sizes, prev, pager, next",total:R.total,onSizeChange:R.handleSizeChange,onCurrentChange:R.searchHistory},null,8,["current-page","page-size","total","onSizeChange","onCurrentChange"])])]),_:1},8,["modelValue","title","onClose"])])}const vs=aT(Fs,[["render",Vs],["__scopeId","data-v-377e6fe4"]]),ys={class:"search-container"},Ws={key:0},gs={key:1},Xs={key:0,class:"search-container"},bs={class:"search-container"},Ks=Ie({__name:"res-table",props:{dialogVisible:Boolean,jsonData:Array,searchPath:String},emits:["close"],setup(T,{emit:E}){const e=T,R=E;te().appContext.config.globalProperties;const A=Y(e.jsonData),S=Y(e.dialogVisible),O=Y(!1),N=Y(!0),i=Y(!1),I=Y([]),t=Y(0),s=Y(!1),r=Y([]),n=Y(!1),a=Y(""),l=Y({}),u=Y({}),C=YE(()=>a.value===""?I.value:vR(I.value,a.value.trim())),D=()=>{N.value=!1,ZT(()=>{N.value=!0})},U=YE(()=>JSON.stringify(l.value,null,"	")),B=YE(()=>JSON.stringify(A.value.hits.hits[t],null,"	")),h=YE(()=>JSON.stringify(A.value[t],null,"	")),x=async()=>{const d=tT(A.value);if(Array.isArray(d)){if(d.length>500){Q.error("请减少数据条数"),R("close",!1);return}I.value=d;for(const L in I.value){const M=I.value[L];for(const m in M){let V=dE(M[m]);V===!1&&(V=M[m]),m.includes(".")?(I.value[L][m.split(".").join("->")]=V,delete I.value[L][m]):I.value[L][m]=V,I.value[L].xwl_index=L}}r.value=Object.keys(I.value[0]),s.value=!0}else if(d!=null&&d.hasOwnProperty("hits")){if(d.hits.hits.length>0){if(n.value=!0,d.hits.hits.length>1e3){Q.error("请减少查詢的数据条数"),R("close",!1);return}const y=[];for(const F in d.hits.hits){const g=d.hits.hits[F]._source;g._id=d.hits.hits[F]._id,g._score=d.hits.hits[F]._score,g.xwl_index=F,y.push(g)}s.value=!1,I.value=y;for(const F in I.value)for(const g in I.value[F])(typeof I.value[F][g]=="object"||Array.isArray(I.value[F][g]))&&(I.value[F][g]=JSON.stringify(I.value[F][g]))}const L={es_connect:_E.sdk.GetSelectEsConnID(),index_name:d.hits.hits[0]._index},{data:M,code:m,msg:V}=await iR(L);if(m===0){if(M.ver===6){const y=Object.keys(M.list[L.index_name].mappings),F=Object.keys(M.list[L.index_name].mappings[y[0]].properties);l.value=M.list[L.index_name].mappings[y[0]].properties;const g=["_id",...F.filter(aE=>aE!=="_id")];r.value=g}else if(M.ver===7||M.ver===8){const y=Object.keys(M.list[L.index_name].mappings.properties);l.value=M.list[L.index_name].mappings.properties;const F=["_id",...y.filter(g=>g!=="_id")];r.value=F}}else Q.error(V)}},$=d=>{try{u.value=JSON.parse(d)}catch(L){console.error(L)}},EE=async()=>{const d=A.value.hits.hits[t.value],L=u.value,M={es_connect:_E.sdk.GetSelectEsConnID(),index:d._index,type_name:d._type,json:L},m=await cS(M);m.code===0?Q.success(m.msg+"(_id为:"+m.data._id+")"):Q.error(m.msg)},OE=d=>{try{const L=JSON.parse(d);A.value.hits.hits[t.value]=L}catch(L){console.error(L)}},IE=async()=>{const d=A.value.hits.hits[t.value],L=d._source,M={es_connect:_E.sdk.GetSelectEsConnID(),index:d._index,type_name:d._type,id:d._id,json:L},m=await dS(M);if(m.code===0){const V=tT(A.value.hits.hits[t.value]._source);V._id=A.value.hits.hits[t.value]._id,V._score=A.value.hits.hits[t.value]._score,V.xwl_index=t.value;for(const y in V)(typeof V[y]=="object"||Array.isArray(V[y]))&&(V[y]=JSON.stringify(V[y]));I.value[t.value]=V,N.value=!1,ZT(()=>{N.value=!0}),Q.success(m.msg)}else Q.error(m.msg)},cE=async(d,L)=>{Ne.confirm("确定删除该条文档吗?","警告",{confirmButtonText:"确认",cancelButtonText:"取消",type:"warning"}).then(async()=>{evUtils.GetSelectEsConnID(),A.value.hits.hits[0]._index,A.value.hits.hits[0]._type,d._id;const M=await GS(e);M.code===0?(I.value.splice(L,1),Q.success(M.msg)):Q.error(M.msg)}).catch(M=>{console.error(M)})},dE=d=>{const L=Number(d);return d===""||d.includes(" ")||isNaN(L)?!1:L},DE=d=>{t.value=d,i.value=!0},eT=d=>{d()},UT=()=>{R("close",!1)};return kE(()=>{x()}),(d,L)=>{const M=f("el-tag"),m=f("el-input"),V=f("el-button"),y=f("el-table-column"),F=f("el-popover"),g=f("el-button-group"),aE=f("el-table"),yE=f("el-drawer");return v(),AE("div",null,[G(yE,{size:"95%",modelValue:S.value,"onUpdate:modelValue":L[2]||(L[2]=X=>S.value=X),title:"查询结果",onClose:UT},{default:c(()=>[TE("div",ys,[G(M,null,{default:c(()=>[b(W(d.$t("请输入关键词")),1)]),_:1}),G(m,{modelValue:a.value,"onUpdate:modelValue":L[0]||(L[0]=X=>a.value=X),style:{width:"300px"},clearable:"",onInput:D},null,8,["modelValue"]),G(V,{type:"success",onClick:D},{default:c(()=>[b(W(d.$t("搜索")),1)]),_:1}),n.value?(v(),k(V,{key:0,type:"primary",onClick:L[1]||(L[1]=X=>O.value=!0)},{default:c(()=>[b(W(d.$t("添加文档")),1)]),_:1})):SE("",!0)]),N.value?(v(),k(aE,{key:0,data:C.value,"use-virtual":"","row-height":30},{default:c(()=>[G(y,{label:"ID",align:"center",fixed:"","min-width":"100"},{default:c(({row:X,$index:rE})=>[n.value?(v(),AE(AT,{key:0},[b(W(X._id),1)],64)):(v(),AE(AT,{key:1},[b(W(rE+1),1)],64))]),_:1}),d.val!=="xwl_index"&&d.val!=="_id"?(v(!0),AE(AT,{key:0},oR(r.value,(X,rE)=>(v(),k(y,{key:rE,prop:X,sortable:!0,align:"center",label:X},{default:c(({row:NE})=>[NE[X]!==void 0?(v(),k(F,{key:0,placement:"top-start",trigger:"hover"},{reference:c(()=>[NE[X].toString().length>=20?(v(),AE("span",Ws,W(NE[X].toString().substr(0,20)+"..."),1)):(v(),AE("span",gs,W(NE[X].toString()),1))]),default:c(()=>[TE("div",null,W(NE[X].toString()),1)]),_:2},1024)):SE("",!0)]),_:2},1032,["prop","label"]))),128)):SE("",!0),G(y,{align:"center",label:d.$t("操作"),fixed:"right",width:"200"},{default:c(({row:X,$index:rE})=>[G(g,null,{default:c(()=>[n.value?(v(),k(V,{key:0,type:"primary",onClick:NE=>DE(rE)},{default:c(()=>[b(W(d.$t("编辑")),1)]),_:2},1032,["onClick"])):(v(),k(V,{key:1,type:"success",onClick:NE=>DE(rE)},{default:c(()=>[b(W(d.$t("查看")),1)]),_:2},1032,["onClick"])),n.value?(v(),k(V,{key:2,type:"danger",onClick:NE=>cE(X,rE)},{default:c(()=>[b(W(d.$t("删除")),1)]),_:2},1032,["onClick"])):SE("",!0)]),_:2},1024)]),_:1},8,["label"])]),_:1},8,["data"])):SE("",!0)]),_:1},8,["modelValue"]),G(yE,{ref:"drawer",title:d.$t("详细数据"),"before-close":eT,modelValue:i.value,"onUpdate:modelValue":L[5]||(L[5]=X=>i.value=X),direction:"rtl","close-on-press-escape":"","destroy-on-close":"",size:"80%"},{default:c(()=>[n.value?(v(),AE("div",Xs,[G(M,null,{default:c(()=>[b(W(d.$t("操作")),1)]),_:1}),G(V,{type:"primary",onClick:IE},{default:c(()=>[b(W(d.$t("修改")),1)]),_:1})])):SE("",!0),Array.isArray(A.value)?(v(),k(bE,{key:1,value:h.value,"onUpdate:value":L[3]||(L[3]=X=>h.value=X),height:"900",class:"res-body",styles:"width: 100%",read:!0,title:d.$t("详细数据")},null,8,["value","title"])):(v(),k(bE,{key:2,value:B.value,"onUpdate:value":L[4]||(L[4]=X=>B.value=X),height:"900",class:"res-body",styles:"width: 100%",read:!n.value,title:d.$t("详细数据"),onGetValue:OE},null,8,["value","read","title"]))]),_:1},8,["title","modelValue"]),G(yE,{ref:"drawer",title:d.$t("新增文档"),"before-close":eT,modelValue:O.value,"onUpdate:modelValue":L[7]||(L[7]=X=>O.value=X),direction:"rtl","close-on-press-escape":"","destroy-on-close":"",size:"80%"},{default:c(()=>[TE("div",bs,[G(M,null,{default:c(()=>[b(W(d.$t("操作")),1)]),_:1}),G(V,{type:"primary",onClick:EE},{default:c(()=>[b(W(d.$t("提交")),1)]),_:1})]),O.value?(v(),k(bE,{key:0,value:U.value,"onUpdate:value":L[6]||(L[6]=X=>U.value=X),height:"900",class:"res-body",styles:"width: 100%",title:d.$t("新增文档"),onGetValue:$},null,8,["value","title"])):SE("",!0)]),_:1},8,["title","modelValue"])])}}});const xs=aT(Ks,[["__scopeId","data-v-813ed2a5"]]);const ws={class:"search-container"},Js={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html",target:"_blank"},$s={__name:"tools",props:{queryData:{type:Array,default:()=>[]},indices:{type:Array,default:()=>[]},uniqueId:{type:String,default:""},input:{type:Object,default:()=>({})},sqlStr:{type:String,default:""},title:{type:String,default:""},max:{type:Number,default:8}},setup(T){te().appContext.config.globalProperties;const E=T,e=Y(E.sqlStr),R=Y(!1);Y("");const A=Y(!1),S=Y(),O=Y(),N=Y(!1),i=Y(!1),I=Y(!1),t=Y({}),s=Y(""),r=Y(oA),n=Y("{}"),a=Y(!1),l=Y(E.input),u=()=>{Q({type:"success",message:"开始下载"})},C=()=>{Q({type:"success",message:"下载成功"})},D=YE(()=>{s.value="",t.value={};const L=JSON.parse(n.value);if(!L)return!1;if(Array.isArray(L))return L.length<=0?!1:(s.value=UT(L),Object.keys(L[0]).forEach(M=>{t.value[M]=M}),!0);if(L.hasOwnProperty("hits")&&L.hits.hits.length>0){const M=L.hits.hits;["_index","_type","_id"].forEach(y=>{t.value[y]=y});const V=[];return M.forEach(y=>{const F=y._source;F!=null&&Object.keys(F).forEach(g=>{Object.prototype.toString.call(F[g])==="[object Object]"?Object.keys(F[g]).forEach(aE=>{t.value[`${g}->${aE}`]=`_source.${g}.${aE}`}):Array.isArray(F[g])?(Object.prototype.toString.call(F[g][0])==="[object Object]"&&V.push(g),t.value[g]=`_source.${g}`):t.value[g]=`_source.${g}`})}),V.forEach(y=>{M.forEach(F=>{F._source[y]&&(F._source[y]=JSON.stringify(F._source[y]))})}),s.value=M,!0}return!1}),U=async()=>{},B=L=>{i.value=!1,L()},h=()=>{N.value=!0,ZT(()=>{i.value=!0})},x=()=>{l.value.body="{}",n.value="{}",S.value.SetText("{}"),O.value.SetText("{}")},$=L=>{l.value.path=L.data},EE=L=>new Promise((M,m)=>{Ne.confirm(L,"警告",{confirmButtonText:"确认",cancelButtonText:"取消",type:"warning"}).then(()=>M(!0)).catch(V=>M(!1))}),OE=async()=>{const L=tT(l.value);if((L.method=="DELETE"||L.path.indexOf("_delete_by_query")!=-1)&&!await EE("确定执行删除操作吗")){Q({type:"success",message:"已取消"});return}(L.path.trim().length>0||L.path.trim()=="")&&L.path.trim().substr(0,1)!="/"&&(L.path="/"+L.path.trim()),I.value=!0,L.es_connect=_E.sdk.GetSelectEsConnID(),US(L).then(M=>{I.value=!1,M.code==0||M.code==200||M.code==201?Q({type:"success",message:M.msg}):M.data!=null&&M.data.hasOwnProperty("error")&&M.data.error.hasOwnProperty("reason")&&M.data.error.reason.indexOf("does not support having a body")!==-1?Q({type:"error",message:"请清空body，然后重新点击【->GO】获取数据"}):Q({type:"error",message:M.msg}),n.value=JSON.stringify(M.data,null,"	"),O.value.SetText(n.value)}).catch(M=>{console.log(M),I.value=!1})},IE=()=>{S.value.updateEditorWidth(),O.value.updateEditorWidth()},cE=async()=>{const{data:L,code:M,msg:m}=await uS({sql:e.value});console.log(L,m),M==0?(l.value.body=L.dsl,l.value.path=L.tableName+"/_search",S.value.SetText(L.dsl),OE()):Q({type:"error",message:m})},dE=L=>{l.value.path=L.path,l.value.body=L.body,S.value.SetText(L.body),l.value.method=L.method},DE=()=>{A.value=!1},eT=()=>{R.value=!1},UT=L=>{const M=[];for(const m of L){const V={};for(const y in m){const F=y.replace(/^\s+|\s+$/g,"");V[F]=m[y]}M.push(V)}return M},d=(L,M)=>{let m=JSON.parse(JSON.stringify(E.queryData));if(L.trim()==""){m.length>E.max?M(m.slice(0,E.max)):M(m);return}m=vR(m,L.trim()),m.length>E.max?M(m.slice(0,E.max)):M(m)};return kE(()=>{U()}),DR(()=>{}),(L,M)=>{const m=f("el-option"),V=f("el-select"),y=f("el-autocomplete"),F=f("el-button"),g=f("download-excel"),aE=f("el-container"),yE=f("el-form-item"),X=f("el-form"),rE=f("el-link"),NE=f("el-drawer"),nA=nR("loading");return v(),AE("div",null,[TE("div",ws,[G(X,null,{default:c(()=>[G(yE,null,{default:c(()=>[G(aE,null,{default:c(()=>[G(y,{style:{width:"30rem"},ref:"autocomplete",modelValue:l.value.path,"onUpdate:modelValue":M[1]||(M[1]=RE=>l.value.path=RE),clearable:"",class:"filter-item select-path autocomplete",placeholder:L.$t("请输入内容"),"fetch-suggestions":d,onClear:x,onKeyup:dA(OE,["enter","native"]),onSelect:$},{prepend:c(()=>[G(V,{modelValue:l.value.method,"onUpdate:modelValue":M[0]||(M[0]=RE=>l.value.method=RE),style:{width:"10rem"},placeholder:L.$t("请选择Http Method"),filterable:""},{default:c(()=>[G(m,{label:L.$t("PUT【更新或创建】"),value:"PUT"},null,8,["label"]),G(m,{label:L.$t("GET【查询】"),value:"GET"},null,8,["label"]),G(m,{label:"DELETE【"+L.$t("删除")+"】",value:"DELETE"},null,8,["label"]),G(m,{label:L.$t("POST【创建】"),value:"POST"},null,8,["label"]),G(m,{label:L.$t("HEAD【是否存在】"),value:"HEAD"},null,8,["label"])]),_:1},8,["modelValue","placeholder"])]),_:1},8,["modelValue","placeholder"]),G(F,{slot:"append",type:"text"},{default:c(()=>[TE("a",Js,W(L.$t("官方文档")),1)]),_:1}),G(F,{class:"filter-item go",style:{display:"inline"},loading:I.value,type:"primary",onClick:OE},{default:c(()=>[b("GO")]),_:1},8,["loading"]),qT(G(F,{class:"filter-item sql-format",style:{display:"inline"},type:"warning",onClick:h},{default:c(()=>[b(W(L.$t("SQL转换")),1)]),_:1},512),[[GA,l.value.method=="GET"]]),G(F,{class:"filter-item search-history",style:{display:"inline"},type:"danger",onClick:M[2]||(M[2]=RE=>A.value=!0)},{default:c(()=>[b(W(L.$t("搜索历史")),1)]),_:1}),D.value&&l.value.path.trim()!="_search"?(v(),k(F,{key:0,style:{display:"inline"},type:"success",onClick:M[3]||(M[3]=RE=>R.value=!0)},{default:c(()=>[b(W(L.$t("返回结果转表格")),1)]),_:1})):SE("",!0),D.value?(v(),k(g,{key:1,ref:"download",class:"download",fields:t.value,data:s.value,name:L.$t(l.value.path+".xls"),"before-generate":u,"before-finish":C},{default:c(()=>[qT((v(),k(F,{disabled:a.value,type:"primary",class:"filter-item download"},{default:c(()=>[b(W(L.$t("下载")),1)]),_:1},8,["disabled"])),[[nA,a.value]])]),_:1},8,["fields","data","name"])):SE("",!0)]),_:1})]),_:1})]),_:1})]),G(pA(pS),{style:{"margin-top":"10px"},onResizeLineEndMove:IE,onResizeLineMove:IE,distribute:.5,lineThickness:6,isVertical:!0},{first:c(()=>[G(bE,{ref_key:"jsonEditorRef1",ref:S,value:l.value.body,"onUpdate:value":M[4]||(M[4]=RE=>l.value.body=RE),"font-size":"15",height:"500",class:"req-body","point-out":r.value,read:!1,title:L.$t("请求Body")},null,8,["value","point-out","title"])]),second:c(()=>[G(bE,{ref_key:"jsonEditorRef2",ref:O,value:n.value,"onUpdate:value":M[5]||(M[5]=RE=>n.value=RE),"font-size":"15",height:"500",class:"res-body",read:!0,title:L.$t("返回信息")},null,8,["value","title"])]),_:1}),G(NE,{ref:"drawer",title:"Edit SQL","before-close":B,modelValue:N.value,"onUpdate:modelValue":M[7]||(M[7]=RE=>N.value=RE),direction:"rtl","close-on-press-escape":"","destroy-on-close":"",size:"80%"},{default:c(()=>[G(F,{style:{margin:"20px"},type:"warning",onClick:cE},{default:c(()=>[b(W(L.$t("开始转换为DSL")),1)]),_:1}),G(rE,{type:"success",disabled:""},{default:c(()=>[b(W(L.$t("表名可用索引名代替")),1)]),_:1}),i.value?(v(),k(Hs,{key:0,"point-out":E.indices,value:e.value,"onUpdate:value":M[6]||(M[6]=RE=>e.value=RE),styles:"width: 100%"},null,8,["point-out","value"])):SE("",!0)]),_:1},8,["modelValue"]),A.value?(v(),k(vs,{key:0,"dialog-visible":A.value,onGetHistoryData:dE,onClose:DE},null,8,["dialog-visible"])):SE("",!0),R.value?(v(),k(xs,{key:1,"search-path":l.value.path,"dialog-visible":R.value,"json-data":JSON.parse(n.value),onClose:eT},null,8,["search-path","dialog-visible","json-data"])):SE("",!0)])}}},ks=aT($s,[["__scopeId","data-v-69a7bc35"]]);const Qs={class:"app-container",style:{"overflow-x":"hidden"}},Lr={__name:"index",setup(T){te().appContext.config.globalProperties;const E=Y(1),e=Y([]),R=Y([]),A=Y([]);kE(()=>{N();const t=sessionStorage.getItem("editableTabs"),s=sessionStorage.getItem("editableTabsValue");s!=null&&t!=""&&t!="null"?E.value=Number(s):E.value=1,t!=null&&t!=""&&t!="null"?e.value=JSON.parse(t):e.value.push({title:"新窗口1",uniqueId:1,input:{body:"{}",method:"POST",path:""},sqlStr:"select * from "})});const S=(t,s)=>{s==="add"&&i()};DR(()=>{const t=JSON.stringify(e.value);sessionStorage.setItem("editableTabs",t),sessionStorage.setItem("editableTabsValue",E.value)});const O=(t,s,r,n)=>{for(const a of e.value)if(a.uniqueId===t){a.input=s,a.sqlStr=r,a.title=n;break}},N=async()=>{const t={es_connect:_E.sdk.GetSelectEsConnID()},s=await iR(t);if(s.code===0){const r=s.data.list,n=Object.keys(r);R.value=[];const a=tT(DA);for(const l of n)A.value.push({caption:l,meta:l,value:l,score:1});for(const l of a)if(l.value.includes("{indices}"))for(const u of n){const C=Object.keys(r[u].mappings)||["{type}"],D={value:l.value.replace(/{indices}/g,u).replace(/{type}/g,C[0]),data:l.data.replace(/{indices}/g,u).replace(/{type}/g,C[0])};R.value.push(D)}R.value.push(...a)}},i=()=>{Ne.prompt("请输入新窗口标题","提示",{confirmButtonText:"确定",cancelButtonText:"取消"}).then(({value:t})=>{t||(t=`新窗口${e.value.length+1}`);const s=Date.now();e.value.push({title:t,uniqueId:s,input:{body:"{}",method:"POST",path:""},sqlStr:"select * from "}),E.value=s}).catch(t=>{console.log("err",t)})},I=t=>{let s=E.value;const r=e.value;s===t&&r.forEach((n,a)=>{if(n.uniqueId===t){const l=r[a+1]||r[a-1];l&&(s=l.uniqueId)}}),E.value=s,e.value=r.filter(n=>n.uniqueId!==t)};return(t,s)=>{const r=f("Plus"),n=f("el-icon"),a=f("el-tab-pane"),l=f("el-tabs"),u=f("el-card");return v(),AE("div",Qs,[G(u,{style:{"margin-top":"10px"},class:"box-card"},{default:c(()=>[G(l,{editable:"",onEdit:S,class:"curd-tab",modelValue:E.value,"onUpdate:modelValue":s[0]||(s[0]=C=>E.value=C),type:"card",closable:"",onTabRemove:I},{"add-icon":c(()=>[G(n,{style:{"font-size":"14px","font-weight":"bolder"}},{default:c(()=>[G(r)]),_:1})]),default:c(()=>[(v(!0),AE(AT,null,oR(e.value,(C,D)=>(v(),k(a,{lazy:!0,key:C.uniqueId,label:C.title,name:Number(C.uniqueId)},{default:c(()=>[G(ks,{indices:A.value,title:C.title,"query-data":R.value,input:C.input,"unique-id":C.uniqueId,"sql-str":C.sqlStr,onSaveData:O},null,8,["indices","title","query-data","input","unique-id","sql-str"])]),_:2},1032,["label","name"]))),128))]),_:1},8,["modelValue"])]),_:1})])}}};export{Lr as default};
